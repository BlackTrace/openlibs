#pragma once

#using <..\..\..\release\Plugin.dll>

//
#include "resource.h"
#include "..\common\common.h"
#include "..\common\sysmodule.h"
#include "shadow_ssdt.h"
#include "kernel.h"
#include "monitor.h"
#include "app.h"
//引入OD反汇编引擎头文件
#include "OD_DASM/disasm.h"

#include "AboutForm.h"
#include "CatchForm.h"
#include "ProcessModuleForm.h"
#include "ProcessThreadForm.h"
#include "ProcessFindModuleForm.h"
#include "ProcessSigverifForm.h"
#include "EventlogForm.h"
#include "ServiceForm.h"
#include "ServiceCreateForm.h"
#include "ProcessInjectDllForm.h"
#include "ProcessInjectDllByHookMsg1Form.h"
#include "ProcessInjectDllByHookMsg2Form.h"
#include "ProcessHandleInfoForm.h"
#include "OtherShareCreateForm.h"
#include "OtherUserCreateForm.h"
#include "OtherUserChangeForm.h"
#include "DisasmForm.h"
#include "FileRenameForm.h"
#include "FileUnlockViewForm.h"
#include "OtherCleanSetForm.h"
#include "OtherCleanTraceForm.h"
#include "WinFindForm.h"
#include "WinPropertyForm.h"
#include "other_table_infect_form.h"
#include "other_table_view_form.h"
#include "other_table_export_form.h"
#include "reg_string_change_form.h"
#include "reg_dword_change_form.h"
#include "reg_multi_change_form.h"
#include "reg_find_form.h"
#include "ntreg_init.h"

//驱动句柄
HANDLE hDriver = NULL;
//系统版本常量
ULONG ulOSVersion = 0;
//当前程序进程ID
ULONG ulProcessID = 0;

//
static BOOL bRet = FALSE;
static DWORD dwRet = 0;

//表示文件数量
ULONG tv_other_clean_ulFileCount = 0;
//表示文件大小
ULONG tv_other_clean_ulFileLength = 0;

//表示痕迹数量
ULONG tv_other_trace_ulCount = 0;

namespace Deianeira {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::Diagnostics;
	using namespace System::Runtime::InteropServices;
	using namespace System::Threading;
	using namespace System::Net;
    using namespace System::Text::RegularExpressions;
	using namespace System::IO;
	using namespace System::Text;
	using namespace System::Management;
	using namespace System::ServiceProcess;
	using namespace Microsoft::Win32;
	using namespace System::Collections::Generic;
	using namespace System::Reflection;
	using namespace Microsoft::VisualBasic::FileIO;
	using namespace System::Xml;

	//此为“窗体管理”所需要的相关定义
	//定义Net下的EnumWindows回调函数
	delegate bool CallBack(HWND hWnd, int lParam);
	//调用Windows API
	[DllImport("user32")] 
	extern "C" int EnumWindows(CallBack^ calback_, int lParam);

	[DllImport("user32")]
	extern "C" int EnumChildWindows(HWND hWndParent,CallBack^ calback_, LPARAM lParam);

	[DllImport("user32")] 
	extern "C" int EnumThreadWindows(DWORD dwThreadId,CallBack^ calback_, int lParam);
	
	/// <summary>
	/// Form1 摘要
	///
	/// 警告: 如果更改此类的名称，则需要更改
	///          与此类所依赖的所有 .resx 文件关联的托管资源编译器工具的
	///          “资源文件名”属性。否则，
	///          设计器将不能与此窗体的关联
	///          本地化资源正确交互。
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			//TODO: 在此处添加构造函数代码
			//
			//设置线程间的访问机制,允许线程间互相访问
			CheckForIllegalCrossThreadCalls = false;
		}

	protected:
		/// <summary>
		/// 清理所有正在使用的资源。
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::MenuStrip^  menuStrip1;
	private: System::Windows::Forms::ToolStripMenuItem^  文件FToolStripMenuItem;
	private: System::Windows::Forms::ToolStripMenuItem^  查看VToolStripMenuItem;
	private: System::Windows::Forms::ToolStripMenuItem^  选项ToolStripMenuItem;
	private: System::Windows::Forms::ToolStripMenuItem^  帮助HToolStripMenuItem;
	private: System::Windows::Forms::StatusStrip^  statusStrip1;
	private: System::Windows::Forms::ColumnHeader^  columnHeader43;
	private: System::Windows::Forms::ColumnHeader^  columnHeader44;
	private: System::Windows::Forms::ColumnHeader^  columnHeader45;
	private: System::Windows::Forms::ColumnHeader^  columnHeader46;
	private: System::Windows::Forms::ColumnHeader^  columnHeader47;
	private: System::Windows::Forms::ColumnHeader^  columnHeader48;
	private: System::Windows::Forms::TabPage^  tp_about;
	private: System::Windows::Forms::TabPage^  tp_monitor;
	private: System::Windows::Forms::TabPage^  tp_srcshot;
	private: System::Windows::Forms::TabPage^  tp_other;
	private: System::Windows::Forms::TabPage^  tp_run;
	private: System::Windows::Forms::TabPage^  tp_reg;
	private: System::Windows::Forms::TabPage^  tp_file;
	private: System::Windows::Forms::TabPage^  tp_net;
	private: System::Windows::Forms::TabControl^  tc_net;
	private: System::Windows::Forms::TabPage^  tp_net_port;
	private: System::Windows::Forms::TabPage^  tp_net_iePlugin;

	private: System::Windows::Forms::ListView^  lv_net_iePlugin;
private: System::Windows::Forms::ColumnHeader^  columnHeader72;
private: System::Windows::Forms::ColumnHeader^  columnHeader73;
private: System::Windows::Forms::ColumnHeader^  columnHeader74;
private: System::Windows::Forms::ColumnHeader^  columnHeader75;
private: System::Windows::Forms::ColumnHeader^  columnHeader76;
	private: System::Windows::Forms::TabPage^  tp_net_ieMenu;
	private: System::Windows::Forms::ListView^  lv_net_ieMenu;
private: System::Windows::Forms::ColumnHeader^  columnHeader77;
private: System::Windows::Forms::ColumnHeader^  columnHeader78;
private: System::Windows::Forms::ColumnHeader^  columnHeader79;
	private: System::Windows::Forms::TabPage^  tp_net_lsp;
	private: System::Windows::Forms::ListView^  lv_net_lsp;
private: System::Windows::Forms::ColumnHeader^  columnHeader80;
private: System::Windows::Forms::ColumnHeader^  columnHeader81;
private: System::Windows::Forms::ColumnHeader^  columnHeader82;
private: System::Windows::Forms::ColumnHeader^  columnHeader83;
private: System::Windows::Forms::ColumnHeader^  columnHeader84;
	private: System::Windows::Forms::TabPage^  tp_net_host;
	private: System::Windows::Forms::TextBox^  txt_net_host;
	private: System::Windows::Forms::TabPage^  tp_app;
	private: System::Windows::Forms::TabControl^  tc_app;
	private: System::Windows::Forms::TabPage^  tp_app_msg;




	private: System::Windows::Forms::TabPage^  tp_kernel;
	private: System::Windows::Forms::TabControl^  tc_kernel;
	private: System::Windows::Forms::TabPage^  tp_kernel_ssdt;
	private: System::Windows::Forms::ListView^  lv_kernel_ssdt;
private: System::Windows::Forms::ColumnHeader^  columnHeader31;
private: System::Windows::Forms::ColumnHeader^  columnHeader32;
private: System::Windows::Forms::ColumnHeader^  columnHeader33;
private: System::Windows::Forms::ColumnHeader^  columnHeader34;
private: System::Windows::Forms::ColumnHeader^  columnHeader35;
private: System::Windows::Forms::TabPage^  tp_kernel_shadow;
private: System::Windows::Forms::ListView^  lv_kernel_shadow;
private: System::Windows::Forms::ColumnHeader^  columnHeader37;
private: System::Windows::Forms::ColumnHeader^  columnHeader38;
private: System::Windows::Forms::ColumnHeader^  columnHeader39;
private: System::Windows::Forms::ColumnHeader^  columnHeader40;
private: System::Windows::Forms::ColumnHeader^  columnHeader41;
private: System::Windows::Forms::TabPage^  tp_kernel_fsd;
private: System::Windows::Forms::ListView^  lv_kernel_fsd;
private: System::Windows::Forms::ColumnHeader^  columnHeader49;
private: System::Windows::Forms::ColumnHeader^  columnHeader50;
private: System::Windows::Forms::ColumnHeader^  columnHeader51;
private: System::Windows::Forms::ColumnHeader^  columnHeader52;
private: System::Windows::Forms::ColumnHeader^  columnHeader53;
private: System::Windows::Forms::ColumnHeader^  columnHeader54;
private: System::Windows::Forms::TabPage^  tp_kernel_callback;
private: System::Windows::Forms::ListView^  lv_kernel_callback;
private: System::Windows::Forms::ColumnHeader^  columnHeader55;
private: System::Windows::Forms::ColumnHeader^  columnHeader56;
private: System::Windows::Forms::ColumnHeader^  columnHeader57;
private: System::Windows::Forms::ColumnHeader^  columnHeader58;
private: System::Windows::Forms::ColumnHeader^  columnHeader59;
private: System::Windows::Forms::TabPage^  tp_kernel_filter;
private: System::Windows::Forms::ListView^  lv_kernel_filter;
private: System::Windows::Forms::ColumnHeader^  columnHeader60;
private: System::Windows::Forms::ColumnHeader^  columnHeader61;
private: System::Windows::Forms::ColumnHeader^  columnHeader62;
private: System::Windows::Forms::ColumnHeader^  columnHeader63;
private: System::Windows::Forms::ColumnHeader^  columnHeader64;
private: System::Windows::Forms::ColumnHeader^  columnHeader65;
private: System::Windows::Forms::TabPage^  tabPage4;
private: System::Windows::Forms::ListView^  lv_sysmodule;
private: System::Windows::Forms::ColumnHeader^  columnHeader23;
private: System::Windows::Forms::ColumnHeader^  columnHeader24;
private: System::Windows::Forms::ColumnHeader^  columnHeader25;
private: System::Windows::Forms::ColumnHeader^  columnHeader27;
private: System::Windows::Forms::ColumnHeader^  columnHeader28;
private: System::Windows::Forms::ColumnHeader^  columnHeader29;
private: System::Windows::Forms::ColumnHeader^  columnHeader30;
private: System::Windows::Forms::TabPage^  tp_eventlog;
private: System::Windows::Forms::ListView^  lv_eventlog;
private: System::Windows::Forms::ColumnHeader^  columnHeader14;
private: System::Windows::Forms::ColumnHeader^  columnHeader15;
private: System::Windows::Forms::ColumnHeader^  columnHeader16;
private: System::Windows::Forms::ColumnHeader^  columnHeader17;
private: System::Windows::Forms::ColumnHeader^  columnHeader18;
private: System::Windows::Forms::ColumnHeader^  columnHeader19;
private: System::Windows::Forms::ColumnHeader^  columnHeader20;
private: System::Windows::Forms::ColumnHeader^  columnHeader21;
private: System::Windows::Forms::ColumnHeader^  columnHeader22;
private: System::Windows::Forms::TabPage^  tp_service;
private: System::Windows::Forms::ListView^  lv_service;
private: System::Windows::Forms::ColumnHeader^  columnHeader7;
private: System::Windows::Forms::ColumnHeader^  columnHeader8;
private: System::Windows::Forms::ColumnHeader^  columnHeader9;
private: System::Windows::Forms::ColumnHeader^  columnHeader10;
private: System::Windows::Forms::ColumnHeader^  columnHeader11;
private: System::Windows::Forms::ColumnHeader^  columnHeader12;
private: System::Windows::Forms::ColumnHeader^  columnHeader13;
private: System::Windows::Forms::TabPage^  tp_process;
private: System::Windows::Forms::ListView^  lv_process;
private: System::Windows::Forms::ColumnHeader^  columnHeader1;
private: System::Windows::Forms::ColumnHeader^  columnHeader2;
private: System::Windows::Forms::ColumnHeader^  columnHeader3;
private: System::Windows::Forms::ColumnHeader^  columnHeader4;
private: System::Windows::Forms::ColumnHeader^  columnHeader5;
private: System::Windows::Forms::ColumnHeader^  columnHeader6;
private: System::Windows::Forms::TabControl^  tc_main;
private: System::Windows::Forms::SplitContainer^  splitContainer1;
private: System::Windows::Forms::SplitContainer^  splitContainer2;
private: System::Windows::Forms::TreeView^  tv_file;
private: System::Windows::Forms::SplitContainer^  splitContainer3;
private: System::Windows::Forms::SplitContainer^  splitContainer4;
private: System::Windows::Forms::TreeView^  tv_reg;
private: System::Windows::Forms::ListView^  lv_reg;
private: System::Windows::Forms::ListView^  lv_run;
private: System::Windows::Forms::ColumnHeader^  columnHeader100;
private: System::Windows::Forms::ColumnHeader^  columnHeader101;
private: System::Windows::Forms::ColumnHeader^  columnHeader102;
private: System::Windows::Forms::ColumnHeader^  columnHeader103;







private: System::Windows::Forms::ColumnHeader^  columnHeader91;
private: System::Windows::Forms::ColumnHeader^  columnHeader92;
private: System::Windows::Forms::ColumnHeader^  columnHeader93;
private: System::Windows::Forms::TabControl^  tc_other;
private: System::Windows::Forms::TabPage^  tp_other_table;

private: System::Windows::Forms::TabPage^  tp_other_md5;




private: System::Windows::Forms::ListView^  lv_other_md5;
private: System::Windows::Forms::ColumnHeader^  columnHeader109;
private: System::Windows::Forms::ColumnHeader^  columnHeader110;
private: System::Windows::Forms::ColumnHeader^  columnHeader111;
private: System::Windows::Forms::TabPage^  tp_other_menu;
private: System::Windows::Forms::SplitContainer^  splitContainer5;
private: System::Windows::Forms::ListView^  lv_other_menu;
private: System::Windows::Forms::ColumnHeader^  columnHeader112;
private: System::Windows::Forms::ColumnHeader^  columnHeader113;
private: System::Windows::Forms::ColumnHeader^  columnHeader114;
private: System::Windows::Forms::GroupBox^  groupBox1;
private: System::Windows::Forms::TabPage^  tp_other_proxy;
private: System::Windows::Forms::ListView^  lv_other_proxy;
private: System::Windows::Forms::ColumnHeader^  columnHeader115;
private: System::Windows::Forms::ColumnHeader^  columnHeader116;
private: System::Windows::Forms::ColumnHeader^  columnHeader117;
private: System::Windows::Forms::ColumnHeader^  columnHeader118;
private: System::Windows::Forms::ColumnHeader^  columnHeader119;
private: System::Windows::Forms::TabPage^  tp_other_sigverif;
private: System::Windows::Forms::ListView^  lv_other_sigverif;
private: System::Windows::Forms::ColumnHeader^  columnHeader120;
private: System::Windows::Forms::ColumnHeader^  columnHeader121;
private: System::Windows::Forms::ColumnHeader^  columnHeader122;
private: System::Windows::Forms::ColumnHeader^  columnHeader123;
private: System::Windows::Forms::RichTextBox^  rtb_srcshot;
private: System::Windows::Forms::ColumnHeader^  columnHeader124;
private: System::Windows::Forms::TabPage^  tp_other_mbr;
private: System::Windows::Forms::ListView^  lv_other_mbr;
private: System::Windows::Forms::ColumnHeader^  columnHeader125;
private: System::Windows::Forms::ColumnHeader^  columnHeader126;
private: System::Windows::Forms::ColumnHeader^  columnHeader127;
private: System::Windows::Forms::ColumnHeader^  columnHeader128;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnQuit;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnMenu;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnTopMost;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnAbout;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnReportBug;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnContact;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnUpdate;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnBlog;
private: System::Windows::Forms::ContextMenuStrip^  cms_process;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_module;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_thread;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_showModuleForm;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator3;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_findModule;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_findSigverif;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator4;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_kill;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_forceKill;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_killAndDelete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator5;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator6;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_lock;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_unlock;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator7;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_inject;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator8;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_onlineAnalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator9;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_copy;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator10;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator11;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_service;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator12;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_do;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_do_start;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_do_stop;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_do_pause;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_do_resume;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator13;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_do_create;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_do_delete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator14;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_config;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_config_auto;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_config_manual;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_config_disabled;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator15;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_sigverifDll;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator16;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_onlineAnalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator17;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_showProperty;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_explorerDll;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_showPropertyDll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator18;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_reg;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator19;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_eventlog;
private: System::Windows::Forms::ToolStripMenuItem^  cms_eventlog_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator20;
private: System::Windows::Forms::ToolStripMenuItem^  cms_eventlog_clearSys;
private: System::Windows::Forms::ToolStripMenuItem^  cms_eventlog_clearSec;
private: System::Windows::Forms::ToolStripMenuItem^  cms_eventlog_clearApp;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator22;
private: System::Windows::Forms::ToolStripMenuItem^  cms_eventlog_clearAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator21;
private: System::Windows::Forms::ToolStripMenuItem^  cms_eventlog_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_sysmodule;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator23;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_delete1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_delete2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator24;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator26;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator27;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_onlineAnalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator28;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator29;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_reg;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator30;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_win;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator31;




private: System::Windows::Forms::ToolStripMenuItem^  cms_win_destroy;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator33;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_top;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_quitTop;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator34;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_show;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_hide;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator35;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_max;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_min;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator36;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_file;
private: System::Windows::Forms::ContextMenuStrip^  cms_reg;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator37;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_delete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_forceDelete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator38;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_rebootDelete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator39;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_rename;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_copyTo;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator40;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator41;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator42;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_md5;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_md52;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator43;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_onlineAnalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator44;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator45;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_export;
private: System::Windows::Forms::TabPage^  tp_win;
private: System::Windows::Forms::TabPage^  tp_other_share;
private: System::Windows::Forms::TabPage^  tp_other_user;
private: System::Windows::Forms::ListView^  lv_other_share;
private: System::Windows::Forms::ColumnHeader^  columnHeader159;
private: System::Windows::Forms::ColumnHeader^  columnHeader160;
private: System::Windows::Forms::ColumnHeader^  columnHeader161;
private: System::Windows::Forms::ListView^  lv_other_user;

private: System::Windows::Forms::ColumnHeader^  columnHeader162;
private: System::Windows::Forms::ColumnHeader^  columnHeader163;
private: System::Windows::Forms::ColumnHeader^  columnHeader164;



private: System::Windows::Forms::ToolStripMenuItem^  工具TToolStripMenuItem;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnSecMode;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator46;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnFixLSP;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnSecEnv;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnForceReboot;
private: System::Windows::Forms::ContextMenuStrip^  cms_net_lsp;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator48;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_sigverif;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator49;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_fix;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator50;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_onlineAalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator51;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator52;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_reg;
private: System::Windows::Forms::ContextMenuStrip^  cms_srcshot;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator53;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_full;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_part;

private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_save;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_mbr;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_mbr_refresh;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator55;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_mbr_choose;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator56;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_mbr_save;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_mbr_recover;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator57;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_mbr_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_proxy;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator58;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_http;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_edu;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator59;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_check;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_checkAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator60;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_use;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_quit;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator62;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_proxy_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_sigverif_openFile;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_sigverif_openFolder;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_sigverif_openFolder2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator64;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_sigverif_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cm_other_sigverif_showProperty;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator65;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_sigverif_export;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnCommonFunc;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator66;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnCommonURL;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_md5;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_openFile;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_openFolder;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_openFolder2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator70;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cm_other_md5_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator71;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_share;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_share_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator47;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_share_delete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator72;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_share_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cm_other_share_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator73;
private: System::Windows::Forms::ToolStripMenuItem^  cm_other_share_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_share_create;
private: System::Windows::Forms::ColumnHeader^  columnHeader168;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_user;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_user_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator74;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_user_create;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_user_delete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator75;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_user_export;
private: System::Windows::Forms::ListView^  lv_net_port;
private: System::Windows::Forms::ColumnHeader^  columnHeader66;
private: System::Windows::Forms::ColumnHeader^  columnHeader67;
private: System::Windows::Forms::ColumnHeader^  columnHeader68;
private: System::Windows::Forms::ColumnHeader^  columnHeader69;
private: System::Windows::Forms::ColumnHeader^  columnHeader70;
private: System::Windows::Forms::ColumnHeader^  columnHeader71;
private: System::Windows::Forms::ContextMenuStrip^  cms_net_port;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator80;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_delete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_force;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator81;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_process_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator82;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator83;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_change;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_change_bin;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator84;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_delete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_rename;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator85;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_new;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_new_item;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator87;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_new_string;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_new_binary;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_new_dword;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_new_multi;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_new_expand;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator86;
private: System::Windows::Forms::ToolStripMenuItem^  cms_reg_export;
private: System::Windows::Forms::Label^  lblMenu;
private: System::Windows::Forms::GroupBox^  groupBox3;
private: System::Windows::Forms::GroupBox^  groupBox2;
private: System::Windows::Forms::Label^  label1;
private: System::Windows::Forms::Label^  label2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_injectByHookMsg;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_injectByHookMsg1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_injectByHookMsg2;
private: System::Windows::Forms::ToolStripStatusLabel^  tsp_lbl_msg;
private: System::Windows::Forms::Label^  lbl_quit;
private: System::Windows::Forms::ContextMenuStrip^  cms_net_host;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_host_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator92;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_host_save;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_host_saveas;
private: System::Windows::Forms::SaveFileDialog^  SFD;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_sigverif;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator93;
private: System::Windows::Forms::ContextMenuStrip^  cms_net_ieMenu;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator94;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_delete1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_delete2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator95;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_sigverif;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator96;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator97;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_onlineAnalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator98;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator99;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_reg;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator100;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_net_iePlugin;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_refresh;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator101;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_delete1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_delete2;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator102;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_sigverif;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator103;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_copy2;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator104;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_onlineAnalysis;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator105;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_showProperty;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator106;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_reg;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator107;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_export;
private: System::Windows::Forms::ColumnHeader^  columnHeader166;
private: System::Windows::Forms::ColumnHeader^  columnHeader170;
private: System::Windows::Forms::ColumnHeader^  columnHeader169;
private: System::Windows::Forms::ColumnHeader^  columnHeader165;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator108;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_user_change;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_user_start;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_user_disable;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator109;
private: System::Windows::Forms::OpenFileDialog^  OFD;
private: System::Windows::Forms::FolderBrowserDialog^  FBD;
private: System::Windows::Forms::ColumnHeader^  columnHeader167;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator61;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_copy2;
private: System::Windows::Forms::Button^  btn_other_menu_restart;

private: System::Windows::Forms::Label^  label6;
private: System::Windows::Forms::Button^  btn_other_menu_clear;

private: System::Windows::Forms::TextBox^  txt_other_menu_param;

private: System::Windows::Forms::TextBox^  txt_other_menu_path;

private: System::Windows::Forms::TextBox^  txt_other_menu_name;

private: System::Windows::Forms::Label^  label5;
private: System::Windows::Forms::Label^  label4;
private: System::Windows::Forms::Label^  label3;
private: System::Windows::Forms::Button^  btn_other_menu_browse;
private: System::Windows::Forms::Button^  btn_other_menu_ok;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_menu;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator63;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_delete1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_delete2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator69;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_sigverif;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator110;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator111;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_onlineAnalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator112;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator113;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_reg;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator114;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_table;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_table_open;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator115;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_table_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_run;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator116;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_delete1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_delete2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator117;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_sigverif;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator118;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator119;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_onlineFind;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_onlineAnalysis;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator120;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator121;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_reg;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator122;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_cut;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_copy;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_paste;

private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_undo;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator124;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_del;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_hide;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator125;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator123;

private: System::Windows::Forms::ListView^  lv_monitor;
private: System::Windows::Forms::ColumnHeader^  columnHeader129;
private: System::Windows::Forms::ColumnHeader^  columnHeader130;
private: System::Windows::Forms::ColumnHeader^  columnHeader131;
private: System::Windows::Forms::ColumnHeader^  columnHeader132;
private: System::Windows::Forms::ColumnHeader^  columnHeader104;
private: System::Windows::Forms::ColumnHeader^  columnHeader133;
private: System::Windows::Forms::ColumnHeader^  columnHeader134;
private: System::Windows::Forms::ContextMenuStrip^  cms_monitor;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_start;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_stop;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator76;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_kernel_ssdt;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator67;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_only;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator68;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator77;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_recovery;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_recoveryAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator78;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator79;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_kernel_shadow;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator88;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_only;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator89;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator90;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_recovery;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_recoveryAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator91;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator126;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_export;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnSelfProtectionStart;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnSelfProtectionStop;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator127;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_hide;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator128;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_disasmCur;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_disasmOri;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator129;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_disasmCur;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_disasmOri;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator130;

private: System::Windows::Forms::ColumnHeader^  columnHeader36;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_sigverifAll;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_sigverifAll;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_sigverifAll;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_sigverifAll;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_sigverifAll;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnSecEnv2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator131;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnProcess;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnProcessDisableCreate;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnProcessDisableKill;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnProcessDisableCreateThread;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnProcessDisableKillThread;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnFile;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnFileDisableCreate;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnFileDisableDelete;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnFileDisableOpenRead;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnReg;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnRegDisableCreate;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnRegDisableDelete;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnRegDisableOpenRead;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator132;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnForceShutdown;
private: System::Windows::Forms::ContextMenuStrip^  cms_kernel_callback;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_callback_refresh;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator25;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_callback_delete;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator133;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_callback_disasm;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator134;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_callback_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_callback_showProperty;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator135;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_callback_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_kernel_filter;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_filter_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator136;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_filter_delete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator137;


private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_filter_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_filter_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator139;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_filter_export;
private: System::Windows::Forms::ContextMenuStrip^  cms_kernel_fsd;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator140;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_only;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator141;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_disasmCur;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_disasmOri;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator142;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator143;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_recovery;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_recoveryAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator144;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator145;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_fsd_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_forceKill2;
private: System::Windows::Forms::SplitContainer^  splitContainer6;
private: System::Windows::Forms::ListView^  lv_module;
private: System::Windows::Forms::ColumnHeader^  columnHeader26;
private: System::Windows::Forms::ColumnHeader^  columnHeader135;
private: System::Windows::Forms::ColumnHeader^  columnHeader136;
private: System::Windows::Forms::ColumnHeader^  columnHeader138;
private: System::Windows::Forms::ColumnHeader^  columnHeader137;
private: System::Windows::Forms::ContextMenuStrip^  cms_module;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator146;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_all;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator147;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_unload;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_unloadAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator148;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_delete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator149;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_sigverif;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_sigverifAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator150;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_copyAddr;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator151;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator152;
private: System::Windows::Forms::ToolStripMenuItem^  cms_module_export;
private: System::Windows::Forms::ListView^  lv_file;
private: System::Windows::Forms::ColumnHeader^  columnHeader85;
private: System::Windows::Forms::ColumnHeader^  columnHeader86;
private: System::Windows::Forms::ColumnHeader^  columnHeader87;
private: System::Windows::Forms::ColumnHeader^  columnHeader88;
private: System::Windows::Forms::ColumnHeader^  columnHeader89;
private: System::Windows::Forms::ColumnHeader^  columnHeader90;
private: System::Windows::Forms::ImageList^  imageList1;
private: System::Windows::Forms::ToolStripMenuItem^  驱动ToolStripMenuItem;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnDriverDisableLoad;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator153;
private: System::Windows::Forms::ComboBox^  cbo_file;
private: System::Windows::Forms::ComboBox^  cbo_reg;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_process;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_process_disableCreate;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_process_disableDelete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_file;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_file_disableCreate;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_file_disableDelete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_file_disableRead;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_reg;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_reg_disableCreate;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_reg_disableDelete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_do_reg_disableQuery;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator154;
private: System::Windows::Forms::ToolStripMenuItem^  tsmibtnPlugin;
private: System::Windows::Forms::ListView^  lv_app_msg;
private: System::Windows::Forms::ColumnHeader^  columnHeader139;
private: System::Windows::Forms::ColumnHeader^  columnHeader140;
private: System::Windows::Forms::ColumnHeader^  columnHeader141;
private: System::Windows::Forms::ColumnHeader^  columnHeader142;
private: System::Windows::Forms::ColumnHeader^  columnHeader143;
private: System::Windows::Forms::ColumnHeader^  columnHeader144;
private: System::Windows::Forms::ColumnHeader^  columnHeader145;
private: System::Windows::Forms::ContextMenuStrip^  cms_app_msg;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_msg_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator138;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_msg_only;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator155;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_msg_unload;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_msg_unloadAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator156;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_msg_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_jump;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_search;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator157;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_processProperty;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_includeProcess;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_excludeProcess;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator159;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_pathProperty;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_includePath;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_excludePath;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator158;
private: System::Windows::Forms::ToolStripMenuItem^  cms_monitor_clean;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator160;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator161;
private: System::Windows::Forms::ToolStripMenuItem^  cms_srcshot_clear;


private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_clear;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator163;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_sigverif_clear;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator164;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_view;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator166;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator165;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_sysmodule_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_ssdt_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_shadow_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_callback_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_kernel_filter_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_iePlugin_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_ieMenu_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_run_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_md5_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_menu_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_sigverif_explorer2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_service_explorerDll2;
private: System::Windows::Forms::ContextMenuStrip^  cms_tv_file;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator167;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_delete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_forceDelete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator168;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_rebootDelete;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator169;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_rename;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_copyTo;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator170;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_copy1;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator171;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_md5;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_sigverif;
private: System::Windows::Forms::TabPage^  tp_other_clean;

private: System::Windows::Forms::SplitContainer^  splitContainer7;
private: System::Windows::Forms::SplitContainer^  splitContainer8;
private: System::Windows::Forms::Button^  btn_other_clean;
private: System::Windows::Forms::Label^  lbl_other_clean_msg;
private: System::Windows::Forms::TreeView^  tv_other_clean;
private: System::Windows::Forms::Label^  lbl_other_clean_recommend;
private: System::Windows::Forms::Label^  lbl_other_clean_noall;
private: System::Windows::Forms::Label^  lbl_other_clean_all;
private: System::Windows::Forms::Label^  lbl_other_clean_set;
private: System::Windows::Forms::Label^  lbl_other_clean_reset;
private: System::Windows::Forms::TabPage^  tp_other_trace;

private: System::Windows::Forms::SplitContainer^  splitContainer9;
private: System::Windows::Forms::SplitContainer^  splitContainer10;
private: System::Windows::Forms::Button^  btn_other_trace;
private: System::Windows::Forms::Label^  lbl_other_trace_msg;
private: System::Windows::Forms::TreeView^  tv_other_trace;
private: System::Windows::Forms::Label^  lbl_other_trace_reset;

private: System::Windows::Forms::Label^  lbl_other_trace_recommend;
private: System::Windows::Forms::Label^  lbl_other_trace_noall;
private: System::Windows::Forms::Label^  lbl_other_trace_all;
private: System::Windows::Forms::TabPage^  tp_app_hook;

private: System::Windows::Forms::SplitContainer^  splitContainer11;
private: System::Windows::Forms::ListView^  lv_app_hook2;

private: System::Windows::Forms::ColumnHeader^  columnHeader156;
private: System::Windows::Forms::ListView^  lv_app_hook;

private: System::Windows::Forms::ColumnHeader^  columnHeader151;
private: System::Windows::Forms::ColumnHeader^  columnHeader152;
private: System::Windows::Forms::ColumnHeader^  columnHeader153;
private: System::Windows::Forms::ColumnHeader^  columnHeader154;
private: System::Windows::Forms::ColumnHeader^  columnHeader155;
private: System::Windows::Forms::TabPage^  tp_kernel_hook;
private: System::Windows::Forms::ListView^  lv_kernel_hook;
private: System::Windows::Forms::ColumnHeader^  columnHeader146;
private: System::Windows::Forms::ColumnHeader^  columnHeader147;
private: System::Windows::Forms::ColumnHeader^  columnHeader148;
private: System::Windows::Forms::ColumnHeader^  columnHeader149;
private: System::Windows::Forms::ColumnHeader^  columnHeader150;
private: System::Windows::Forms::ContextMenuStrip^  cms_other_clean_trace;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_clean_trace_view;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_handle;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_unlockView;

private: System::Windows::Forms::ToolStripMenuItem^  cms_win_view;
private: System::Windows::Forms::ToolStripMenuItem^  cms_win_view_find;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator172;


private: System::Windows::Forms::ToolStripMenuItem^  cms_other_table_view;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator175;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_table_infect;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator176;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator174;
private: System::Windows::Forms::SplitContainer^  splitContainer12;
private: System::Windows::Forms::ListView^  lv_other_table;
private: System::Windows::Forms::ColumnHeader^  columnHeader105;
private: System::Windows::Forms::ColumnHeader^  columnHeader106;
private: System::Windows::Forms::ColumnHeader^  columnHeader107;
private: System::Windows::Forms::ColumnHeader^  columnHeader108;
private: System::Windows::Forms::ColumnHeader^  columnHeader157;
private: System::Windows::Forms::ColumnHeader^  columnHeader158;
private: System::Windows::Forms::ListView^  lv_other_table_func;
private: System::Windows::Forms::ColumnHeader^  columnHeader171;
private: System::Windows::Forms::ColumnHeader^  columnHeader172;
private: System::Windows::Forms::ColumnHeader^  columnHeader173;
private: System::Windows::Forms::ColumnHeader^  columnHeader174;
private: System::Windows::Forms::ColumnHeader^  columnHeader175;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_exportTable;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_table_before;
private: System::Windows::Forms::ToolStripMenuItem^  cms_other_table_forward;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator162;
private: System::Windows::Forms::TreeView^  tv_win;
private: System::Windows::Forms::TabPage^  tp_snap;
private: System::Windows::Forms::TabControl^  tc_snap;


private: System::Windows::Forms::TabPage^  tabPage1;
private: System::Windows::Forms::TabPage^  tabPage2;
private: System::Windows::Forms::TabPage^  tabPage3;
private: System::Windows::Forms::TabPage^  tabPage5;
private: System::Windows::Forms::ListView^  lv_snap_file;
private: System::Windows::Forms::ColumnHeader^  columnHeader42;
private: System::Windows::Forms::ColumnHeader^  columnHeader94;
private: System::Windows::Forms::ColumnHeader^  columnHeader95;
private: System::Windows::Forms::ColumnHeader^  columnHeader96;
private: System::Windows::Forms::ColumnHeader^  columnHeader97;
private: System::Windows::Forms::ColumnHeader^  columnHeader98;
private: System::Windows::Forms::ContextMenuStrip^  cms_snap_file;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_choose;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator178;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_save;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator179;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator180;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_export;
private: System::Windows::Forms::ListView^  lv_snap_file_analysis;
private: System::Windows::Forms::ColumnHeader^  columnHeader99;
private: System::Windows::Forms::ColumnHeader^  columnHeader176;
private: System::Windows::Forms::ColumnHeader^  columnHeader177;
private: System::Windows::Forms::ContextMenuStrip^  cms_snap_file_analysis;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_analysis_one;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_analysis_two;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator177;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_analysis_explorer;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_analysis_showProperty;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator181;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_analysis_export;
private: System::Windows::Forms::SplitContainer^  splitContainer13;
private: System::Windows::Forms::SplitContainer^  splitContainer14;
private: System::Windows::Forms::TreeView^  tv_snap_reg;
private: System::Windows::Forms::ListView^  lv_snap_reg;
private: System::Windows::Forms::ColumnHeader^  columnHeader178;
private: System::Windows::Forms::ColumnHeader^  columnHeader179;
private: System::Windows::Forms::ColumnHeader^  columnHeader180;
private: System::Windows::Forms::ComboBox^  cbo_snap_reg;
private: System::Windows::Forms::ColumnHeader^  columnHeader181;
private: System::Windows::Forms::ColumnHeader^  columnHeader182;
private: System::Windows::Forms::ContextMenuStrip^  cms_snap_reg;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_save;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator183;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_explorer;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator184;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_export;
private: System::Windows::Forms::ListView^  lv_snap_reg_analysis;
private: System::Windows::Forms::ColumnHeader^  columnHeader183;
private: System::Windows::Forms::ColumnHeader^  columnHeader184;
private: System::Windows::Forms::ColumnHeader^  columnHeader185;
private: System::Windows::Forms::ContextMenuStrip^  cms_snap_reg_analysis;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_analysis_one;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_analysis_two;


private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator182;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_analysis_explorer;

private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator185;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_analysis_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_clear;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator186;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_file_analysis_clear;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator187;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_clear;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator188;
private: System::Windows::Forms::ToolStripMenuItem^  cms_snap_reg_analysis_clear;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator189;
private: System::Windows::Forms::ImageList^  imageList2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_file_snap;
private: System::Windows::Forms::ToolStripMenuItem^  cms_process_win;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_snap;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator32;
private: System::Windows::Forms::ContextMenuStrip^  cms_tv_reg;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator54;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_delete;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_rename;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator173;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_find;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator190;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_view;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator191;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_copy;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator192;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_new;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_new_item;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator194;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_new_string;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_new_binary;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_new_dword;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_new_multi;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_new_expand;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator193;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_snap;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator195;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator196;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_reg_hive;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator197;
private: System::Windows::Forms::ToolStripMenuItem^  cms_tv_file_disk;
private: System::Windows::Forms::ContextMenuStrip^  cms_app_hook;
private: System::Windows::Forms::ContextMenuStrip^  cms_app_hook2;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_hook2_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator198;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_hook2_check;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_hook2_checkAll;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_hook_refresh;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator199;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_hook_recover;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_hook_recoverAll;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator200;
private: System::Windows::Forms::ToolStripMenuItem^  cms_app_hook_export;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_copy;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_port_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator201;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_copy;
private: System::Windows::Forms::ToolStripMenuItem^  cms_net_lsp_copy2;
private: System::Windows::Forms::ToolStripSeparator^  toolStripSeparator202;















private: System::ComponentModel::IContainer^  components;
	protected: 


	private:
		/// <summary>
		/// 必需的设计器变量。
		/// </summary>


#pragma region Windows Form Designer generated code
		/// <summary>
		/// 设计器支持所需的方法 - 不要
		/// 使用代码编辑器修改此方法的内容。
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			System::ComponentModel::ComponentResourceManager^  resources = (gcnew System::ComponentModel::ComponentResourceManager(Form1::typeid));
			System::Windows::Forms::TreeNode^  treeNode1 = (gcnew System::Windows::Forms::TreeNode(L"系统临时文件"));
			System::Windows::Forms::TreeNode^  treeNode2 = (gcnew System::Windows::Forms::TreeNode(L"无效的快捷方式"));
			System::Windows::Forms::TreeNode^  treeNode3 = (gcnew System::Windows::Forms::TreeNode(L"缩略图缓存文件"));
			System::Windows::Forms::TreeNode^  treeNode4 = (gcnew System::Windows::Forms::TreeNode(L"内存转储文件"));
			System::Windows::Forms::TreeNode^  treeNode5 = (gcnew System::Windows::Forms::TreeNode(L"Windows错误报告"));
			System::Windows::Forms::TreeNode^  treeNode6 = (gcnew System::Windows::Forms::TreeNode(L"系统自动更新时留下的补丁"));
			System::Windows::Forms::TreeNode^  treeNode7 = (gcnew System::Windows::Forms::TreeNode(L"系统打补丁时留下的卸载信息(谨慎)"));
			System::Windows::Forms::TreeNode^  treeNode8 = (gcnew System::Windows::Forms::TreeNode(L"Windows预读取文件"));
			System::Windows::Forms::TreeNode^  treeNode9 = (gcnew System::Windows::Forms::TreeNode(L"已下载的程序文件"));
			System::Windows::Forms::TreeNode^  treeNode10 = (gcnew System::Windows::Forms::TreeNode(L"日志文件"));
			System::Windows::Forms::TreeNode^  treeNode11 = (gcnew System::Windows::Forms::TreeNode(L"清理回收站"));
			System::Windows::Forms::TreeNode^  treeNode12 = (gcnew System::Windows::Forms::TreeNode(L"清理指定文件夹中指定类型的垃圾文件"));
			System::Windows::Forms::TreeNode^  treeNode13 = (gcnew System::Windows::Forms::TreeNode(L"Windows系统垃圾文件", gcnew cli::array< System::Windows::Forms::TreeNode^  >(12) {treeNode1, 
				treeNode2, treeNode3, treeNode4, treeNode5, treeNode6, treeNode7, treeNode8, treeNode9, treeNode10, treeNode11, treeNode12}));
			System::Windows::Forms::TreeNode^  treeNode14 = (gcnew System::Windows::Forms::TreeNode(L"IE浏览器缓存文件"));
			System::Windows::Forms::TreeNode^  treeNode15 = (gcnew System::Windows::Forms::TreeNode(L"Chrome浏览器缓存文件"));
			System::Windows::Forms::TreeNode^  treeNode16 = (gcnew System::Windows::Forms::TreeNode(L"FireFox浏览器缓存文件"));
			System::Windows::Forms::TreeNode^  treeNode17 = (gcnew System::Windows::Forms::TreeNode(L"Opera浏览器缓存文件"));
			System::Windows::Forms::TreeNode^  treeNode18 = (gcnew System::Windows::Forms::TreeNode(L"上网浏览产生的垃圾文件", gcnew cli::array< System::Windows::Forms::TreeNode^  >(4) {treeNode14, 
				treeNode15, treeNode16, treeNode17}));
			System::Windows::Forms::TreeNode^  treeNode19 = (gcnew System::Windows::Forms::TreeNode(L"Office安装文件"));
			System::Windows::Forms::TreeNode^  treeNode20 = (gcnew System::Windows::Forms::TreeNode(L"应用程序垃圾文件", gcnew cli::array< System::Windows::Forms::TreeNode^  >(1) {treeNode19}));
			System::Windows::Forms::TreeNode^  treeNode21 = (gcnew System::Windows::Forms::TreeNode(L"Internet Explorer 清理"));
			System::Windows::Forms::TreeNode^  treeNode22 = (gcnew System::Windows::Forms::TreeNode(L"Internet Explorer 地址栏网址历史"));
			System::Windows::Forms::TreeNode^  treeNode23 = (gcnew System::Windows::Forms::TreeNode(L"Internet Explorer Cookie"));
			System::Windows::Forms::TreeNode^  treeNode24 = (gcnew System::Windows::Forms::TreeNode(L"Internet Explorer 自动保存的表单"));
			System::Windows::Forms::TreeNode^  treeNode25 = (gcnew System::Windows::Forms::TreeNode(L"Internet Explorer 自动保存的密码"));
			System::Windows::Forms::TreeNode^  treeNode26 = (gcnew System::Windows::Forms::TreeNode(L"上网浏览痕迹", gcnew cli::array< System::Windows::Forms::TreeNode^  >(5) {treeNode21, 
				treeNode22, treeNode23, treeNode24, treeNode25}));
			System::Windows::Forms::TreeNode^  treeNode27 = (gcnew System::Windows::Forms::TreeNode(L"运行(开始菜单中，重启后生效)"));
			System::Windows::Forms::TreeNode^  treeNode28 = (gcnew System::Windows::Forms::TreeNode(L"最近运行的程序历史记录"));
			System::Windows::Forms::TreeNode^  treeNode29 = (gcnew System::Windows::Forms::TreeNode(L"文件打开与保存历史记录"));
			System::Windows::Forms::TreeNode^  treeNode30 = (gcnew System::Windows::Forms::TreeNode(L"最近打开的文件"));
			System::Windows::Forms::TreeNode^  treeNode31 = (gcnew System::Windows::Forms::TreeNode(L"Windows收藏夹"));
			System::Windows::Forms::TreeNode^  treeNode32 = (gcnew System::Windows::Forms::TreeNode(L"Windows模板"));
			System::Windows::Forms::TreeNode^  treeNode33 = (gcnew System::Windows::Forms::TreeNode(L"Windows搜索历史"));
			System::Windows::Forms::TreeNode^  treeNode34 = (gcnew System::Windows::Forms::TreeNode(L"Windows画图"));
			System::Windows::Forms::TreeNode^  treeNode35 = (gcnew System::Windows::Forms::TreeNode(L"Windows使用痕迹", gcnew cli::array< System::Windows::Forms::TreeNode^  >(8) {treeNode27, 
				treeNode28, treeNode29, treeNode30, treeNode31, treeNode32, treeNode33, treeNode34}));
			System::Windows::Forms::TreeNode^  treeNode36 = (gcnew System::Windows::Forms::TreeNode(L"Acrobat Reader"));
			System::Windows::Forms::TreeNode^  treeNode37 = (gcnew System::Windows::Forms::TreeNode(L"Office 清理"));
			System::Windows::Forms::TreeNode^  treeNode38 = (gcnew System::Windows::Forms::TreeNode(L"Office Access"));
			System::Windows::Forms::TreeNode^  treeNode39 = (gcnew System::Windows::Forms::TreeNode(L"Office Excel"));
			System::Windows::Forms::TreeNode^  treeNode40 = (gcnew System::Windows::Forms::TreeNode(L"Office PowerPoint"));
			System::Windows::Forms::TreeNode^  treeNode41 = (gcnew System::Windows::Forms::TreeNode(L"Office Word"));
			System::Windows::Forms::TreeNode^  treeNode42 = (gcnew System::Windows::Forms::TreeNode(L"WPS表格历史记录"));
			System::Windows::Forms::TreeNode^  treeNode43 = (gcnew System::Windows::Forms::TreeNode(L"WPS文字历史记录"));
			System::Windows::Forms::TreeNode^  treeNode44 = (gcnew System::Windows::Forms::TreeNode(L"WPS演示历史记录"));
			System::Windows::Forms::TreeNode^  treeNode45 = (gcnew System::Windows::Forms::TreeNode(L"办公软件使用痕迹", gcnew cli::array< System::Windows::Forms::TreeNode^  >(9) {treeNode36, 
				treeNode37, treeNode38, treeNode39, treeNode40, treeNode41, treeNode42, treeNode43, treeNode44}));
			System::Windows::Forms::TreeNode^  treeNode46 = (gcnew System::Windows::Forms::TreeNode(L"PPS网络电视"));
			System::Windows::Forms::TreeNode^  treeNode47 = (gcnew System::Windows::Forms::TreeNode(L"PPTV网络电视"));
			System::Windows::Forms::TreeNode^  treeNode48 = (gcnew System::Windows::Forms::TreeNode(L"QQLIVE网络电视"));
			System::Windows::Forms::TreeNode^  treeNode49 = (gcnew System::Windows::Forms::TreeNode(L"快播播放器"));
			System::Windows::Forms::TreeNode^  treeNode50 = (gcnew System::Windows::Forms::TreeNode(L"百度影音"));
			System::Windows::Forms::TreeNode^  treeNode51 = (gcnew System::Windows::Forms::TreeNode(L"暴风影音"));
			System::Windows::Forms::TreeNode^  treeNode52 = (gcnew System::Windows::Forms::TreeNode(L"皮皮影视"));
			System::Windows::Forms::TreeNode^  treeNode53 = (gcnew System::Windows::Forms::TreeNode(L"迅雷看看"));
			System::Windows::Forms::TreeNode^  treeNode54 = (gcnew System::Windows::Forms::TreeNode(L"Windows媒体播放器"));
			System::Windows::Forms::TreeNode^  treeNode55 = (gcnew System::Windows::Forms::TreeNode(L"最近看过的视频", gcnew cli::array< System::Windows::Forms::TreeNode^  >(9) {treeNode46, 
				treeNode47, treeNode48, treeNode49, treeNode50, treeNode51, treeNode52, treeNode53, treeNode54}));
			System::Windows::Forms::TreeNode^  treeNode56 = (gcnew System::Windows::Forms::TreeNode(L"迅雷"));
			System::Windows::Forms::TreeNode^  treeNode57 = (gcnew System::Windows::Forms::TreeNode(L"快车"));
			System::Windows::Forms::TreeNode^  treeNode58 = (gcnew System::Windows::Forms::TreeNode(L"QQ旋风"));
			System::Windows::Forms::TreeNode^  treeNode59 = (gcnew System::Windows::Forms::TreeNode(L"BitComet"));
			System::Windows::Forms::TreeNode^  treeNode60 = (gcnew System::Windows::Forms::TreeNode(L"下载工具", gcnew cli::array< System::Windows::Forms::TreeNode^  >(4) {treeNode56, 
				treeNode57, treeNode58, treeNode59}));
			System::Windows::Forms::TreeNode^  treeNode61 = (gcnew System::Windows::Forms::TreeNode(L"7ZIP"));
			System::Windows::Forms::TreeNode^  treeNode62 = (gcnew System::Windows::Forms::TreeNode(L"WinRAR"));
			System::Windows::Forms::TreeNode^  treeNode63 = (gcnew System::Windows::Forms::TreeNode(L"其他应用程序使用痕迹", gcnew cli::array< System::Windows::Forms::TreeNode^  >(2) {treeNode61, 
				treeNode62}));
			this->menuStrip1 = (gcnew System::Windows::Forms::MenuStrip());
			this->文件FToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnSelfProtectionStart = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnSelfProtectionStop = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator127 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->tsmibtnQuit = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->查看VToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnMenu = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->工具TToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnFixLSP = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnSecMode = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator46 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->tsmibtnCommonFunc = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnCommonURL = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator66 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->tsmibtnSecEnv = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnSecEnv2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator132 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->tsmibtnForceShutdown = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnForceReboot = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnPlugin = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->选项ToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnTopMost = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator131 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->驱动ToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnDriverDisableLoad = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator153 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->tsmibtnProcess = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnProcessDisableCreate = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnProcessDisableKill = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnProcessDisableCreateThread = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnProcessDisableKillThread = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnFile = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnFileDisableCreate = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnFileDisableDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnFileDisableOpenRead = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnReg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnRegDisableCreate = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnRegDisableDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnRegDisableOpenRead = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->帮助HToolStripMenuItem = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnAbout = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnReportBug = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnContact = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnUpdate = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tsmibtnBlog = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->statusStrip1 = (gcnew System::Windows::Forms::StatusStrip());
			this->tsp_lbl_msg = (gcnew System::Windows::Forms::ToolStripStatusLabel());
			this->columnHeader43 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader44 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader45 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader46 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader47 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader48 = (gcnew System::Windows::Forms::ColumnHeader());
			this->tp_about = (gcnew System::Windows::Forms::TabPage());
			this->groupBox3 = (gcnew System::Windows::Forms::GroupBox());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->groupBox2 = (gcnew System::Windows::Forms::GroupBox());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->tp_monitor = (gcnew System::Windows::Forms::TabPage());
			this->lv_monitor = (gcnew System::Windows::Forms::ListView());
			this->columnHeader129 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader130 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader131 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader132 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader104 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader133 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader134 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_monitor = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_monitor_start = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_monitor_stop = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator76 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_monitor_clean = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator160 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_monitor_jump = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_monitor_search = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator157 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_monitor_processProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_monitor_includeProcess = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_monitor_excludeProcess = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator159 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_monitor_pathProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_monitor_includePath = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_monitor_excludePath = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator158 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_monitor_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->imageList1 = (gcnew System::Windows::Forms::ImageList(this->components));
			this->tp_srcshot = (gcnew System::Windows::Forms::TabPage());
			this->rtb_srcshot = (gcnew System::Windows::Forms::RichTextBox());
			this->cms_srcshot = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_srcshot_undo = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator161 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_srcshot_clear = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator124 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_srcshot_cut = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_srcshot_copy = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_srcshot_paste = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_srcshot_del = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator123 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_srcshot_full = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_srcshot_part = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_srcshot_hide = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator125 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_srcshot_save = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_other = (gcnew System::Windows::Forms::TabPage());
			this->tc_other = (gcnew System::Windows::Forms::TabControl());
			this->tp_other_table = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer12 = (gcnew System::Windows::Forms::SplitContainer());
			this->lv_other_table = (gcnew System::Windows::Forms::ListView());
			this->columnHeader105 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader106 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader107 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader108 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader157 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader158 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_table = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_table_open = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator115 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_table_before = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_table_forward = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator162 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_table_view = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_exportTable = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator175 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_table_infect = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator176 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_table_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->lv_other_table_func = (gcnew System::Windows::Forms::ListView());
			this->columnHeader171 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader175 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader172 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader173 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader174 = (gcnew System::Windows::Forms::ColumnHeader());
			this->tp_other_md5 = (gcnew System::Windows::Forms::TabPage());
			this->lv_other_md5 = (gcnew System::Windows::Forms::ListView());
			this->columnHeader109 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader110 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader167 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader111 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_md5 = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_md5_openFile = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_md5_openFolder = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_md5_openFolder2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator61 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_md5_clear = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator163 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_md5_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_md5_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator70 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_md5_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_md5_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cm_other_md5_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator71 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_md5_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_other_menu = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer5 = (gcnew System::Windows::Forms::SplitContainer());
			this->lv_other_menu = (gcnew System::Windows::Forms::ListView());
			this->columnHeader112 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader113 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader114 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_menu = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_menu_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator63 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_menu_delete1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_menu_delete2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator69 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_menu_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_menu_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator110 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_menu_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_menu_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator111 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_menu_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_menu_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator112 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_menu_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_menu_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_menu_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator113 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_menu_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator114 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_menu_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->groupBox1 = (gcnew System::Windows::Forms::GroupBox());
			this->btn_other_menu_restart = (gcnew System::Windows::Forms::Button());
			this->label6 = (gcnew System::Windows::Forms::Label());
			this->btn_other_menu_clear = (gcnew System::Windows::Forms::Button());
			this->txt_other_menu_param = (gcnew System::Windows::Forms::TextBox());
			this->txt_other_menu_path = (gcnew System::Windows::Forms::TextBox());
			this->txt_other_menu_name = (gcnew System::Windows::Forms::TextBox());
			this->label5 = (gcnew System::Windows::Forms::Label());
			this->label4 = (gcnew System::Windows::Forms::Label());
			this->label3 = (gcnew System::Windows::Forms::Label());
			this->btn_other_menu_browse = (gcnew System::Windows::Forms::Button());
			this->btn_other_menu_ok = (gcnew System::Windows::Forms::Button());
			this->tp_other_proxy = (gcnew System::Windows::Forms::TabPage());
			this->lv_other_proxy = (gcnew System::Windows::Forms::ListView());
			this->columnHeader115 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader116 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader117 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader118 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader119 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_proxy = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_proxy_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator58 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_proxy_http = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_proxy_edu = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator59 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_proxy_check = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_proxy_checkAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator60 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_proxy_use = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_proxy_quit = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator62 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_proxy_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_other_sigverif = (gcnew System::Windows::Forms::TabPage());
			this->lv_other_sigverif = (gcnew System::Windows::Forms::ListView());
			this->columnHeader120 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader121 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader122 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader123 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader124 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_sigverif = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_sigverif_openFile = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_sigverif_openFolder = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_sigverif_openFolder2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator64 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_sigverif_clear = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator164 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_sigverif_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_sigverif_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cm_other_sigverif_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator65 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_sigverif_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_other_mbr = (gcnew System::Windows::Forms::TabPage());
			this->lv_other_mbr = (gcnew System::Windows::Forms::ListView());
			this->columnHeader125 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader126 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader127 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader128 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_mbr = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_mbr_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator55 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_mbr_choose = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator56 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_mbr_save = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_mbr_recover = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator57 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_mbr_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_other_share = (gcnew System::Windows::Forms::TabPage());
			this->lv_other_share = (gcnew System::Windows::Forms::ListView());
			this->columnHeader159 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader160 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader161 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader168 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_share = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_share_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator47 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_share_create = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_share_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator72 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_share_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cm_other_share_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator73 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cm_other_share_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_other_user = (gcnew System::Windows::Forms::TabPage());
			this->lv_other_user = (gcnew System::Windows::Forms::ListView());
			this->columnHeader162 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader163 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader164 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader165 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader166 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader170 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader169 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_other_user = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_user_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator108 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_user_change = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator74 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_user_start = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_user_disable = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator109 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_user_create = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_other_user_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator75 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_other_user_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_other_clean = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer7 = (gcnew System::Windows::Forms::SplitContainer());
			this->splitContainer8 = (gcnew System::Windows::Forms::SplitContainer());
			this->btn_other_clean = (gcnew System::Windows::Forms::Button());
			this->lbl_other_clean_msg = (gcnew System::Windows::Forms::Label());
			this->tv_other_clean = (gcnew System::Windows::Forms::TreeView());
			this->cms_other_clean_trace = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_other_clean_trace_view = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->lbl_other_clean_reset = (gcnew System::Windows::Forms::Label());
			this->lbl_other_clean_set = (gcnew System::Windows::Forms::Label());
			this->lbl_other_clean_recommend = (gcnew System::Windows::Forms::Label());
			this->lbl_other_clean_noall = (gcnew System::Windows::Forms::Label());
			this->lbl_other_clean_all = (gcnew System::Windows::Forms::Label());
			this->tp_other_trace = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer9 = (gcnew System::Windows::Forms::SplitContainer());
			this->splitContainer10 = (gcnew System::Windows::Forms::SplitContainer());
			this->btn_other_trace = (gcnew System::Windows::Forms::Button());
			this->lbl_other_trace_msg = (gcnew System::Windows::Forms::Label());
			this->tv_other_trace = (gcnew System::Windows::Forms::TreeView());
			this->lbl_other_trace_reset = (gcnew System::Windows::Forms::Label());
			this->lbl_other_trace_recommend = (gcnew System::Windows::Forms::Label());
			this->lbl_other_trace_noall = (gcnew System::Windows::Forms::Label());
			this->lbl_other_trace_all = (gcnew System::Windows::Forms::Label());
			this->tp_run = (gcnew System::Windows::Forms::TabPage());
			this->lv_run = (gcnew System::Windows::Forms::ListView());
			this->columnHeader100 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader101 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader102 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader103 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_run = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_run_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator116 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_run_delete1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_run_delete2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator117 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_run_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_run_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator118 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_run_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_run_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator119 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_run_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_run_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator120 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_run_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_run_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_run_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator121 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_run_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator122 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_run_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_win = (gcnew System::Windows::Forms::TabPage());
			this->tv_win = (gcnew System::Windows::Forms::TreeView());
			this->cms_win = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_win_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator31 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_win_view = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator174 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_win_destroy = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator33 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_win_top = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_win_quitTop = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator34 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_win_show = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_win_hide = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator35 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_win_max = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_win_min = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator36 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_win_view_find = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator172 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_win_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_reg = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer3 = (gcnew System::Windows::Forms::SplitContainer());
			this->splitContainer4 = (gcnew System::Windows::Forms::SplitContainer());
			this->tv_reg = (gcnew System::Windows::Forms::TreeView());
			this->cms_tv_reg = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_tv_reg_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator54 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_reg_rename = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator173 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_find = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator190 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_view = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator191 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_snap = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator195 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_copy = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator192 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_new = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_reg_new_item = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator194 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_new_string = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_reg_new_binary = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_reg_new_dword = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_reg_new_multi = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_reg_new_expand = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator193 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator196 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_reg_hive = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->lv_reg = (gcnew System::Windows::Forms::ListView());
			this->columnHeader91 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader92 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader93 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_reg = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_reg_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator83 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_reg_change = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_reg_change_bin = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator84 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_reg_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_reg_rename = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator85 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_reg_new = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_reg_new_item = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator87 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_reg_new_string = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_reg_new_binary = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_reg_new_dword = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_reg_new_multi = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_reg_new_expand = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator86 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_reg_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cbo_reg = (gcnew System::Windows::Forms::ComboBox());
			this->tp_file = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer1 = (gcnew System::Windows::Forms::SplitContainer());
			this->splitContainer2 = (gcnew System::Windows::Forms::SplitContainer());
			this->tv_file = (gcnew System::Windows::Forms::TreeView());
			this->cms_tv_file = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_tv_file_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator167 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_file_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_file_forceDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator168 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_file_rebootDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator169 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_file_rename = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_file_copyTo = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator170 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_file_snap = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator32 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_file_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_file_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator171 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_file_md5 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_tv_file_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator197 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_tv_file_disk = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->lv_file = (gcnew System::Windows::Forms::ListView());
			this->columnHeader85 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader86 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader87 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader88 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader89 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader90 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_file = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_file_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator37 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_unlockView = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator165 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_forceDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator38 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_rebootDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator39 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_rename = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_copyTo = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator40 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_snap = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_view = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator166 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator41 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator42 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_md5 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_md52 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator43 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator44 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_file_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator45 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_file_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cbo_file = (gcnew System::Windows::Forms::ComboBox());
			this->tp_net = (gcnew System::Windows::Forms::TabPage());
			this->tc_net = (gcnew System::Windows::Forms::TabControl());
			this->tp_net_port = (gcnew System::Windows::Forms::TabPage());
			this->lv_net_port = (gcnew System::Windows::Forms::ListView());
			this->columnHeader66 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader67 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader36 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader68 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader69 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader70 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader71 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_net_port = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_net_port_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator80 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_port_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator93 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_port_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_port_force = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator81 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_port_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_port_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_port_process_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator82 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_port_copy = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_port_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator201 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_port_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_net_iePlugin = (gcnew System::Windows::Forms::TabPage());
			this->lv_net_iePlugin = (gcnew System::Windows::Forms::ListView());
			this->columnHeader73 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader72 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader74 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader75 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader76 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_net_iePlugin = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_net_iePlugin_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator101 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_iePlugin_delete1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_iePlugin_delete2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator102 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_iePlugin_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_iePlugin_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator103 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_iePlugin_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_iePlugin_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator104 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_iePlugin_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_iePlugin_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator105 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_iePlugin_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_iePlugin_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_iePlugin_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator106 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_iePlugin_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator107 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_iePlugin_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_net_ieMenu = (gcnew System::Windows::Forms::TabPage());
			this->lv_net_ieMenu = (gcnew System::Windows::Forms::ListView());
			this->columnHeader77 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader78 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader79 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_net_ieMenu = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_net_ieMenu_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator94 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_ieMenu_delete1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_ieMenu_delete2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator95 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_ieMenu_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_ieMenu_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator96 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_ieMenu_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_ieMenu_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator97 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_ieMenu_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_ieMenu_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator98 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_ieMenu_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_ieMenu_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_ieMenu_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator99 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_ieMenu_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator100 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_ieMenu_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_net_lsp = (gcnew System::Windows::Forms::TabPage());
			this->lv_net_lsp = (gcnew System::Windows::Forms::ListView());
			this->columnHeader80 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader81 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader82 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader83 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader84 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_net_lsp = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_net_lsp_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator48 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_lsp_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_lsp_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator49 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_lsp_fix = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator50 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_lsp_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_lsp_onlineAalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator51 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_lsp_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_lsp_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_lsp_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator52 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_lsp_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator53 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_lsp_copy = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_lsp_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator202 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_lsp_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_net_host = (gcnew System::Windows::Forms::TabPage());
			this->txt_net_host = (gcnew System::Windows::Forms::TextBox());
			this->cms_net_host = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_net_host_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator92 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_net_host_save = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_net_host_saveas = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_app = (gcnew System::Windows::Forms::TabPage());
			this->tc_app = (gcnew System::Windows::Forms::TabControl());
			this->tp_app_msg = (gcnew System::Windows::Forms::TabPage());
			this->lv_app_msg = (gcnew System::Windows::Forms::ListView());
			this->columnHeader139 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader140 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader141 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader142 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader143 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader144 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader145 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_app_msg = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_app_msg_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator138 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_app_msg_only = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator155 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_app_msg_unload = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_app_msg_unloadAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator156 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_app_msg_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_app_hook = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer11 = (gcnew System::Windows::Forms::SplitContainer());
			this->lv_app_hook2 = (gcnew System::Windows::Forms::ListView());
			this->columnHeader156 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_app_hook2 = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_app_hook2_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator198 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_app_hook2_check = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_app_hook2_checkAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->lv_app_hook = (gcnew System::Windows::Forms::ListView());
			this->columnHeader151 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader152 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader153 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader154 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader155 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_app_hook = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_app_hook_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator199 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_app_hook_recover = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_app_hook_recoverAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator200 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_app_hook_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_kernel = (gcnew System::Windows::Forms::TabPage());
			this->tc_kernel = (gcnew System::Windows::Forms::TabControl());
			this->tp_kernel_ssdt = (gcnew System::Windows::Forms::TabPage());
			this->lv_kernel_ssdt = (gcnew System::Windows::Forms::ListView());
			this->columnHeader31 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader32 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader33 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader34 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader35 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_kernel_ssdt = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_kernel_ssdt_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator67 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_ssdt_only = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator68 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_ssdt_disasmCur = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_ssdt_disasmOri = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator129 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_ssdt_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_ssdt_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator77 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_ssdt_recovery = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_ssdt_recoveryAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator78 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_ssdt_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_ssdt_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_ssdt_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator79 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_ssdt_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_kernel_shadow = (gcnew System::Windows::Forms::TabPage());
			this->lv_kernel_shadow = (gcnew System::Windows::Forms::ListView());
			this->columnHeader37 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader38 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader39 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader40 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader41 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_kernel_shadow = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_kernel_shadow_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator88 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_shadow_only = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator89 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_shadow_disasmCur = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_shadow_disasmOri = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator130 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_shadow_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_shadow_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator90 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_shadow_recovery = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_shadow_recoveryAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator91 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_shadow_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_shadow_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_shadow_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator126 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_kernel_fsd = (gcnew System::Windows::Forms::TabPage());
			this->lv_kernel_fsd = (gcnew System::Windows::Forms::ListView());
			this->columnHeader49 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader50 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader51 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader52 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader53 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader54 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_kernel_fsd = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_kernel_fsd_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator140 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_fsd_only = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator141 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_fsd_disasmCur = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_fsd_disasmOri = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator142 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_fsd_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_fsd_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator143 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_fsd_recovery = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_fsd_recoveryAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator144 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_fsd_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_fsd_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator145 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_fsd_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_kernel_callback = (gcnew System::Windows::Forms::TabPage());
			this->lv_kernel_callback = (gcnew System::Windows::Forms::ListView());
			this->columnHeader55 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader56 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader57 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader58 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader59 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_kernel_callback = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_kernel_callback_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator25 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_callback_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator133 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_callback_disasm = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator134 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_callback_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_callback_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_callback_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator135 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_callback_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_kernel_filter = (gcnew System::Windows::Forms::TabPage());
			this->lv_kernel_filter = (gcnew System::Windows::Forms::ListView());
			this->columnHeader60 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader61 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader62 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader63 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader64 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader65 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_kernel_filter = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_kernel_filter_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator136 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_filter_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator137 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_filter_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_filter_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_kernel_filter_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator139 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_kernel_filter_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_kernel_hook = (gcnew System::Windows::Forms::TabPage());
			this->lv_kernel_hook = (gcnew System::Windows::Forms::ListView());
			this->columnHeader146 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader147 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader148 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader149 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader150 = (gcnew System::Windows::Forms::ColumnHeader());
			this->tabPage4 = (gcnew System::Windows::Forms::TabPage());
			this->lv_sysmodule = (gcnew System::Windows::Forms::ListView());
			this->columnHeader23 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader24 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader25 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader27 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader28 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader29 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader30 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_sysmodule = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_sysmodule_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator23 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_sysmodule_delete1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_sysmodule_delete2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator24 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_sysmodule_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_sysmodule_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator26 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_sysmodule_copy1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_sysmodule_copy2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator27 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_sysmodule_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_sysmodule_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator28 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_sysmodule_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_sysmodule_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_sysmodule_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator29 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_sysmodule_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator30 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_sysmodule_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_eventlog = (gcnew System::Windows::Forms::TabPage());
			this->lv_eventlog = (gcnew System::Windows::Forms::ListView());
			this->columnHeader14 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader15 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader16 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader17 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader18 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader19 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader20 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader21 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader22 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_eventlog = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_eventlog_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator20 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_eventlog_clearSys = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_eventlog_clearSec = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_eventlog_clearApp = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator22 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_eventlog_clearAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator21 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_eventlog_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_service = (gcnew System::Windows::Forms::TabPage());
			this->lv_service = (gcnew System::Windows::Forms::ListView());
			this->columnHeader7 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader8 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader9 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader10 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader11 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader12 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader13 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_service = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_service_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator12 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_do = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_do_start = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_do_stop = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_do_pause = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_do_resume = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator13 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_do_create = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_do_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator14 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_config = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_config_auto = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_config_manual = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_config_disabled = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator15 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_sigverifDll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator16 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator17 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_explorerDll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_explorerDll2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_service_showPropertyDll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator18 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator19 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_service_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tp_process = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer6 = (gcnew System::Windows::Forms::SplitContainer());
			this->lv_process = (gcnew System::Windows::Forms::ListView());
			this->columnHeader1 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader2 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader3 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader4 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader5 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader6 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_process = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_process_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator1 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_module = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_thread = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_handle = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_win = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator2 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_showModuleForm = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator3 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_findModule = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_findSigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator4 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_do = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_process = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_process_disableCreate = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_process_disableDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_file = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_file_disableCreate = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_file_disableDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_file_disableRead = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_reg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_reg_disableCreate = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_reg_disableDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_do_reg_disableQuery = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator154 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_kill = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_forceKill = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_forceKill2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_killAndDelete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator5 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator6 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_hide = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator128 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_lock = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_unlock = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator7 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_inject = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_injectByHookMsg = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_injectByHookMsg1 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_injectByHookMsg2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator8 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_onlineFind = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_onlineAnalysis = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator9 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_copy = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator10 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_explorer2 = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_process_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator11 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_process_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->lv_module = (gcnew System::Windows::Forms::ListView());
			this->columnHeader26 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader135 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader136 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader138 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader137 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_module = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_module_refresh = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator146 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_module_all = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator147 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_module_unload = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_module_unloadAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator148 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_module_delete = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator149 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_module_sigverif = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_module_sigverifAll = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator150 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_module_copyAddr = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator151 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_module_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_module_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator152 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_module_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tc_main = (gcnew System::Windows::Forms::TabControl());
			this->tp_snap = (gcnew System::Windows::Forms::TabPage());
			this->tc_snap = (gcnew System::Windows::Forms::TabControl());
			this->tabPage1 = (gcnew System::Windows::Forms::TabPage());
			this->lv_snap_file = (gcnew System::Windows::Forms::ListView());
			this->columnHeader42 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader94 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader95 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader96 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader97 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader98 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_snap_file = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_snap_file_choose = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator178 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_file_save = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator179 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_file_clear = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator186 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_file_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_snap_file_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator180 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_file_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tabPage2 = (gcnew System::Windows::Forms::TabPage());
			this->lv_snap_file_analysis = (gcnew System::Windows::Forms::ListView());
			this->columnHeader99 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader176 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader177 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_snap_file_analysis = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_snap_file_analysis_one = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_snap_file_analysis_two = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator177 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_file_analysis_clear = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator187 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_file_analysis_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_snap_file_analysis_showProperty = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator181 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_file_analysis_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->tabPage3 = (gcnew System::Windows::Forms::TabPage());
			this->splitContainer13 = (gcnew System::Windows::Forms::SplitContainer());
			this->splitContainer14 = (gcnew System::Windows::Forms::SplitContainer());
			this->tv_snap_reg = (gcnew System::Windows::Forms::TreeView());
			this->lv_snap_reg = (gcnew System::Windows::Forms::ListView());
			this->columnHeader178 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader182 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader179 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader181 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader180 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_snap_reg = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_snap_reg_save = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator183 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_reg_clear = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator188 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_reg_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator184 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_reg_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cbo_snap_reg = (gcnew System::Windows::Forms::ComboBox());
			this->tabPage5 = (gcnew System::Windows::Forms::TabPage());
			this->lv_snap_reg_analysis = (gcnew System::Windows::Forms::ListView());
			this->columnHeader183 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader184 = (gcnew System::Windows::Forms::ColumnHeader());
			this->columnHeader185 = (gcnew System::Windows::Forms::ColumnHeader());
			this->cms_snap_reg_analysis = (gcnew System::Windows::Forms::ContextMenuStrip(this->components));
			this->cms_snap_reg_analysis_one = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->cms_snap_reg_analysis_two = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator182 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_reg_analysis_clear = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator189 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_reg_analysis_explorer = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->toolStripSeparator185 = (gcnew System::Windows::Forms::ToolStripSeparator());
			this->cms_snap_reg_analysis_export = (gcnew System::Windows::Forms::ToolStripMenuItem());
			this->lblMenu = (gcnew System::Windows::Forms::Label());
			this->lbl_quit = (gcnew System::Windows::Forms::Label());
			this->SFD = (gcnew System::Windows::Forms::SaveFileDialog());
			this->OFD = (gcnew System::Windows::Forms::OpenFileDialog());
			this->FBD = (gcnew System::Windows::Forms::FolderBrowserDialog());
			this->imageList2 = (gcnew System::Windows::Forms::ImageList(this->components));
			this->menuStrip1->SuspendLayout();
			this->statusStrip1->SuspendLayout();
			this->tp_about->SuspendLayout();
			this->groupBox3->SuspendLayout();
			this->groupBox2->SuspendLayout();
			this->tp_monitor->SuspendLayout();
			this->cms_monitor->SuspendLayout();
			this->tp_srcshot->SuspendLayout();
			this->cms_srcshot->SuspendLayout();
			this->tp_other->SuspendLayout();
			this->tc_other->SuspendLayout();
			this->tp_other_table->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer12))->BeginInit();
			this->splitContainer12->Panel1->SuspendLayout();
			this->splitContainer12->Panel2->SuspendLayout();
			this->splitContainer12->SuspendLayout();
			this->cms_other_table->SuspendLayout();
			this->tp_other_md5->SuspendLayout();
			this->cms_other_md5->SuspendLayout();
			this->tp_other_menu->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer5))->BeginInit();
			this->splitContainer5->Panel1->SuspendLayout();
			this->splitContainer5->Panel2->SuspendLayout();
			this->splitContainer5->SuspendLayout();
			this->cms_other_menu->SuspendLayout();
			this->groupBox1->SuspendLayout();
			this->tp_other_proxy->SuspendLayout();
			this->cms_other_proxy->SuspendLayout();
			this->tp_other_sigverif->SuspendLayout();
			this->cms_other_sigverif->SuspendLayout();
			this->tp_other_mbr->SuspendLayout();
			this->cms_other_mbr->SuspendLayout();
			this->tp_other_share->SuspendLayout();
			this->cms_other_share->SuspendLayout();
			this->tp_other_user->SuspendLayout();
			this->cms_other_user->SuspendLayout();
			this->tp_other_clean->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer7))->BeginInit();
			this->splitContainer7->Panel1->SuspendLayout();
			this->splitContainer7->Panel2->SuspendLayout();
			this->splitContainer7->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer8))->BeginInit();
			this->splitContainer8->Panel1->SuspendLayout();
			this->splitContainer8->Panel2->SuspendLayout();
			this->splitContainer8->SuspendLayout();
			this->cms_other_clean_trace->SuspendLayout();
			this->tp_other_trace->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer9))->BeginInit();
			this->splitContainer9->Panel1->SuspendLayout();
			this->splitContainer9->Panel2->SuspendLayout();
			this->splitContainer9->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer10))->BeginInit();
			this->splitContainer10->Panel1->SuspendLayout();
			this->splitContainer10->Panel2->SuspendLayout();
			this->splitContainer10->SuspendLayout();
			this->tp_run->SuspendLayout();
			this->cms_run->SuspendLayout();
			this->tp_win->SuspendLayout();
			this->cms_win->SuspendLayout();
			this->tp_reg->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer3))->BeginInit();
			this->splitContainer3->Panel1->SuspendLayout();
			this->splitContainer3->Panel2->SuspendLayout();
			this->splitContainer3->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer4))->BeginInit();
			this->splitContainer4->Panel1->SuspendLayout();
			this->splitContainer4->Panel2->SuspendLayout();
			this->splitContainer4->SuspendLayout();
			this->cms_tv_reg->SuspendLayout();
			this->cms_reg->SuspendLayout();
			this->tp_file->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer1))->BeginInit();
			this->splitContainer1->Panel1->SuspendLayout();
			this->splitContainer1->Panel2->SuspendLayout();
			this->splitContainer1->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer2))->BeginInit();
			this->splitContainer2->Panel1->SuspendLayout();
			this->splitContainer2->Panel2->SuspendLayout();
			this->splitContainer2->SuspendLayout();
			this->cms_tv_file->SuspendLayout();
			this->cms_file->SuspendLayout();
			this->tp_net->SuspendLayout();
			this->tc_net->SuspendLayout();
			this->tp_net_port->SuspendLayout();
			this->cms_net_port->SuspendLayout();
			this->tp_net_iePlugin->SuspendLayout();
			this->cms_net_iePlugin->SuspendLayout();
			this->tp_net_ieMenu->SuspendLayout();
			this->cms_net_ieMenu->SuspendLayout();
			this->tp_net_lsp->SuspendLayout();
			this->cms_net_lsp->SuspendLayout();
			this->tp_net_host->SuspendLayout();
			this->cms_net_host->SuspendLayout();
			this->tp_app->SuspendLayout();
			this->tc_app->SuspendLayout();
			this->tp_app_msg->SuspendLayout();
			this->cms_app_msg->SuspendLayout();
			this->tp_app_hook->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer11))->BeginInit();
			this->splitContainer11->Panel1->SuspendLayout();
			this->splitContainer11->Panel2->SuspendLayout();
			this->splitContainer11->SuspendLayout();
			this->cms_app_hook2->SuspendLayout();
			this->cms_app_hook->SuspendLayout();
			this->tp_kernel->SuspendLayout();
			this->tc_kernel->SuspendLayout();
			this->tp_kernel_ssdt->SuspendLayout();
			this->cms_kernel_ssdt->SuspendLayout();
			this->tp_kernel_shadow->SuspendLayout();
			this->cms_kernel_shadow->SuspendLayout();
			this->tp_kernel_fsd->SuspendLayout();
			this->cms_kernel_fsd->SuspendLayout();
			this->tp_kernel_callback->SuspendLayout();
			this->cms_kernel_callback->SuspendLayout();
			this->tp_kernel_filter->SuspendLayout();
			this->cms_kernel_filter->SuspendLayout();
			this->tp_kernel_hook->SuspendLayout();
			this->tabPage4->SuspendLayout();
			this->cms_sysmodule->SuspendLayout();
			this->tp_eventlog->SuspendLayout();
			this->cms_eventlog->SuspendLayout();
			this->tp_service->SuspendLayout();
			this->cms_service->SuspendLayout();
			this->tp_process->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer6))->BeginInit();
			this->splitContainer6->Panel1->SuspendLayout();
			this->splitContainer6->Panel2->SuspendLayout();
			this->splitContainer6->SuspendLayout();
			this->cms_process->SuspendLayout();
			this->cms_module->SuspendLayout();
			this->tc_main->SuspendLayout();
			this->tp_snap->SuspendLayout();
			this->tc_snap->SuspendLayout();
			this->tabPage1->SuspendLayout();
			this->cms_snap_file->SuspendLayout();
			this->tabPage2->SuspendLayout();
			this->cms_snap_file_analysis->SuspendLayout();
			this->tabPage3->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer13))->BeginInit();
			this->splitContainer13->Panel1->SuspendLayout();
			this->splitContainer13->Panel2->SuspendLayout();
			this->splitContainer13->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer14))->BeginInit();
			this->splitContainer14->Panel1->SuspendLayout();
			this->splitContainer14->Panel2->SuspendLayout();
			this->splitContainer14->SuspendLayout();
			this->cms_snap_reg->SuspendLayout();
			this->tabPage5->SuspendLayout();
			this->cms_snap_reg_analysis->SuspendLayout();
			this->SuspendLayout();
			// 
			// menuStrip1
			// 
			this->menuStrip1->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(6) {this->文件FToolStripMenuItem, 
				this->查看VToolStripMenuItem, this->工具TToolStripMenuItem, this->tsmibtnPlugin, this->选项ToolStripMenuItem, this->帮助HToolStripMenuItem});
			this->menuStrip1->Location = System::Drawing::Point(0, 0);
			this->menuStrip1->Name = L"menuStrip1";
			this->menuStrip1->Size = System::Drawing::Size(933, 24);
			this->menuStrip1->TabIndex = 0;
			this->menuStrip1->Text = L"menuStrip1";
			// 
			// 文件FToolStripMenuItem
			// 
			this->文件FToolStripMenuItem->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(4) {this->tsmibtnSelfProtectionStart, 
				this->tsmibtnSelfProtectionStop, this->toolStripSeparator127, this->tsmibtnQuit});
			this->文件FToolStripMenuItem->Name = L"文件FToolStripMenuItem";
			this->文件FToolStripMenuItem->Size = System::Drawing::Size(59, 20);
			this->文件FToolStripMenuItem->Text = L"文件(F)";
			// 
			// tsmibtnSelfProtectionStart
			// 
			this->tsmibtnSelfProtectionStart->Name = L"tsmibtnSelfProtectionStart";
			this->tsmibtnSelfProtectionStart->Size = System::Drawing::Size(142, 22);
			this->tsmibtnSelfProtectionStart->Text = L"开启自我保护";
			this->tsmibtnSelfProtectionStart->Click += gcnew System::EventHandler(this, &Form1::tsmibtnSelfProtectionStart_Click);
			// 
			// tsmibtnSelfProtectionStop
			// 
			this->tsmibtnSelfProtectionStop->Name = L"tsmibtnSelfProtectionStop";
			this->tsmibtnSelfProtectionStop->Size = System::Drawing::Size(142, 22);
			this->tsmibtnSelfProtectionStop->Text = L"关闭自我保护";
			this->tsmibtnSelfProtectionStop->Click += gcnew System::EventHandler(this, &Form1::tsmibtnSelfProtectionStop_Click);
			// 
			// toolStripSeparator127
			// 
			this->toolStripSeparator127->Name = L"toolStripSeparator127";
			this->toolStripSeparator127->Size = System::Drawing::Size(139, 6);
			// 
			// tsmibtnQuit
			// 
			this->tsmibtnQuit->Name = L"tsmibtnQuit";
			this->tsmibtnQuit->Size = System::Drawing::Size(142, 22);
			this->tsmibtnQuit->Text = L"退出";
			this->tsmibtnQuit->Click += gcnew System::EventHandler(this, &Form1::tsmibtnQuit_Click);
			// 
			// 查看VToolStripMenuItem
			// 
			this->查看VToolStripMenuItem->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(1) {this->tsmibtnMenu});
			this->查看VToolStripMenuItem->Name = L"查看VToolStripMenuItem";
			this->查看VToolStripMenuItem->Size = System::Drawing::Size(59, 20);
			this->查看VToolStripMenuItem->Text = L"查看(V)";
			// 
			// tsmibtnMenu
			// 
			this->tsmibtnMenu->Name = L"tsmibtnMenu";
			this->tsmibtnMenu->Size = System::Drawing::Size(106, 22);
			this->tsmibtnMenu->Text = L"菜单栏";
			this->tsmibtnMenu->Click += gcnew System::EventHandler(this, &Form1::tsmibtnMenu_Click);
			// 
			// 工具TToolStripMenuItem
			// 
			this->工具TToolStripMenuItem->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(11) {this->tsmibtnFixLSP, 
				this->tsmibtnSecMode, this->toolStripSeparator46, this->tsmibtnCommonFunc, this->tsmibtnCommonURL, this->toolStripSeparator66, 
				this->tsmibtnSecEnv, this->tsmibtnSecEnv2, this->toolStripSeparator132, this->tsmibtnForceShutdown, this->tsmibtnForceReboot});
			this->工具TToolStripMenuItem->Name = L"工具TToolStripMenuItem";
			this->工具TToolStripMenuItem->Size = System::Drawing::Size(59, 20);
			this->工具TToolStripMenuItem->Text = L"工具(T)";
			// 
			// tsmibtnFixLSP
			// 
			this->tsmibtnFixLSP->Name = L"tsmibtnFixLSP";
			this->tsmibtnFixLSP->Size = System::Drawing::Size(226, 22);
			this->tsmibtnFixLSP->Text = L"修复LSP";
			this->tsmibtnFixLSP->Click += gcnew System::EventHandler(this, &Form1::tsmibtnFixLSP_Click);
			// 
			// tsmibtnSecMode
			// 
			this->tsmibtnSecMode->Name = L"tsmibtnSecMode";
			this->tsmibtnSecMode->Size = System::Drawing::Size(226, 22);
			this->tsmibtnSecMode->Text = L"修复安全模式";
			this->tsmibtnSecMode->Click += gcnew System::EventHandler(this, &Form1::tsmibtnSecMode_Click);
			// 
			// toolStripSeparator46
			// 
			this->toolStripSeparator46->Name = L"toolStripSeparator46";
			this->toolStripSeparator46->Size = System::Drawing::Size(223, 6);
			// 
			// tsmibtnCommonFunc
			// 
			this->tsmibtnCommonFunc->Name = L"tsmibtnCommonFunc";
			this->tsmibtnCommonFunc->Size = System::Drawing::Size(226, 22);
			this->tsmibtnCommonFunc->Text = L"常用功能";
			// 
			// tsmibtnCommonURL
			// 
			this->tsmibtnCommonURL->Name = L"tsmibtnCommonURL";
			this->tsmibtnCommonURL->Size = System::Drawing::Size(226, 22);
			this->tsmibtnCommonURL->Text = L"常用网址";
			// 
			// toolStripSeparator66
			// 
			this->toolStripSeparator66->Name = L"toolStripSeparator66";
			this->toolStripSeparator66->Size = System::Drawing::Size(223, 6);
			// 
			// tsmibtnSecEnv
			// 
			this->tsmibtnSecEnv->Name = L"tsmibtnSecEnv";
			this->tsmibtnSecEnv->Size = System::Drawing::Size(226, 22);
			this->tsmibtnSecEnv->Text = L"构造安全环境";
			this->tsmibtnSecEnv->Click += gcnew System::EventHandler(this, &Form1::tsmibtnSecEnv_Click);
			// 
			// tsmibtnSecEnv2
			// 
			this->tsmibtnSecEnv2->Name = L"tsmibtnSecEnv2";
			this->tsmibtnSecEnv2->Size = System::Drawing::Size(226, 22);
			this->tsmibtnSecEnv2->Text = L"构造安全环境(保留外壳程序)";
			this->tsmibtnSecEnv2->Click += gcnew System::EventHandler(this, &Form1::tsmibtnSecEnv2_Click);
			// 
			// toolStripSeparator132
			// 
			this->toolStripSeparator132->Name = L"toolStripSeparator132";
			this->toolStripSeparator132->Size = System::Drawing::Size(223, 6);
			// 
			// tsmibtnForceShutdown
			// 
			this->tsmibtnForceShutdown->Name = L"tsmibtnForceShutdown";
			this->tsmibtnForceShutdown->Size = System::Drawing::Size(226, 22);
			this->tsmibtnForceShutdown->Text = L"强制关机";
			this->tsmibtnForceShutdown->Click += gcnew System::EventHandler(this, &Form1::tsmibtnForceShutdown_Click);
			// 
			// tsmibtnForceReboot
			// 
			this->tsmibtnForceReboot->Name = L"tsmibtnForceReboot";
			this->tsmibtnForceReboot->Size = System::Drawing::Size(226, 22);
			this->tsmibtnForceReboot->Text = L"强制重启计算机";
			this->tsmibtnForceReboot->Click += gcnew System::EventHandler(this, &Form1::tsmibtnForceReboot_Click);
			// 
			// tsmibtnPlugin
			// 
			this->tsmibtnPlugin->Name = L"tsmibtnPlugin";
			this->tsmibtnPlugin->Size = System::Drawing::Size(59, 20);
			this->tsmibtnPlugin->Text = L"插件(P)";
			// 
			// 选项ToolStripMenuItem
			// 
			this->选项ToolStripMenuItem->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(7) {this->tsmibtnTopMost, 
				this->toolStripSeparator131, this->驱动ToolStripMenuItem, this->toolStripSeparator153, this->tsmibtnProcess, this->tsmibtnFile, 
				this->tsmibtnReg});
			this->选项ToolStripMenuItem->Name = L"选项ToolStripMenuItem";
			this->选项ToolStripMenuItem->Size = System::Drawing::Size(59, 20);
			this->选项ToolStripMenuItem->Text = L"选项(C)";
			// 
			// tsmibtnTopMost
			// 
			this->tsmibtnTopMost->Name = L"tsmibtnTopMost";
			this->tsmibtnTopMost->Size = System::Drawing::Size(106, 22);
			this->tsmibtnTopMost->Text = L"置顶";
			this->tsmibtnTopMost->Click += gcnew System::EventHandler(this, &Form1::tsmibtnTopMost_Click);
			// 
			// toolStripSeparator131
			// 
			this->toolStripSeparator131->Name = L"toolStripSeparator131";
			this->toolStripSeparator131->Size = System::Drawing::Size(103, 6);
			// 
			// 驱动ToolStripMenuItem
			// 
			this->驱动ToolStripMenuItem->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(1) {this->tsmibtnDriverDisableLoad});
			this->驱动ToolStripMenuItem->Name = L"驱动ToolStripMenuItem";
			this->驱动ToolStripMenuItem->Size = System::Drawing::Size(106, 22);
			this->驱动ToolStripMenuItem->Text = L"驱动";
			// 
			// tsmibtnDriverDisableLoad
			// 
			this->tsmibtnDriverDisableLoad->Name = L"tsmibtnDriverDisableLoad";
			this->tsmibtnDriverDisableLoad->Size = System::Drawing::Size(118, 22);
			this->tsmibtnDriverDisableLoad->Text = L"禁止加载";
			this->tsmibtnDriverDisableLoad->Click += gcnew System::EventHandler(this, &Form1::tsmibtnDriverDisableLoad_Click);
			// 
			// toolStripSeparator153
			// 
			this->toolStripSeparator153->Name = L"toolStripSeparator153";
			this->toolStripSeparator153->Size = System::Drawing::Size(103, 6);
			// 
			// tsmibtnProcess
			// 
			this->tsmibtnProcess->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(4) {this->tsmibtnProcessDisableCreate, 
				this->tsmibtnProcessDisableKill, this->tsmibtnProcessDisableCreateThread, this->tsmibtnProcessDisableKillThread});
			this->tsmibtnProcess->Name = L"tsmibtnProcess";
			this->tsmibtnProcess->Size = System::Drawing::Size(106, 22);
			this->tsmibtnProcess->Text = L"进程";
			// 
			// tsmibtnProcessDisableCreate
			// 
			this->tsmibtnProcessDisableCreate->Name = L"tsmibtnProcessDisableCreate";
			this->tsmibtnProcessDisableCreate->Size = System::Drawing::Size(142, 22);
			this->tsmibtnProcessDisableCreate->Text = L"禁止创建";
			this->tsmibtnProcessDisableCreate->Click += gcnew System::EventHandler(this, &Form1::tsmibtnProcessDisableCreate_Click);
			// 
			// tsmibtnProcessDisableKill
			// 
			this->tsmibtnProcessDisableKill->Name = L"tsmibtnProcessDisableKill";
			this->tsmibtnProcessDisableKill->Size = System::Drawing::Size(142, 22);
			this->tsmibtnProcessDisableKill->Text = L"禁止结束";
			this->tsmibtnProcessDisableKill->Click += gcnew System::EventHandler(this, &Form1::tsmibtnProcessDisableKill_Click);
			// 
			// tsmibtnProcessDisableCreateThread
			// 
			this->tsmibtnProcessDisableCreateThread->Name = L"tsmibtnProcessDisableCreateThread";
			this->tsmibtnProcessDisableCreateThread->Size = System::Drawing::Size(142, 22);
			this->tsmibtnProcessDisableCreateThread->Text = L"禁止创建线程";
			this->tsmibtnProcessDisableCreateThread->Click += gcnew System::EventHandler(this, &Form1::tsmibtnProcessDisableCreateThread_Click);
			// 
			// tsmibtnProcessDisableKillThread
			// 
			this->tsmibtnProcessDisableKillThread->Name = L"tsmibtnProcessDisableKillThread";
			this->tsmibtnProcessDisableKillThread->Size = System::Drawing::Size(142, 22);
			this->tsmibtnProcessDisableKillThread->Text = L"禁止结束线程";
			this->tsmibtnProcessDisableKillThread->Click += gcnew System::EventHandler(this, &Form1::tsmibtnProcessDisableKillThread_Click);
			// 
			// tsmibtnFile
			// 
			this->tsmibtnFile->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {this->tsmibtnFileDisableCreate, 
				this->tsmibtnFileDisableDelete, this->tsmibtnFileDisableOpenRead});
			this->tsmibtnFile->Name = L"tsmibtnFile";
			this->tsmibtnFile->Size = System::Drawing::Size(106, 22);
			this->tsmibtnFile->Text = L"文件";
			// 
			// tsmibtnFileDisableCreate
			// 
			this->tsmibtnFileDisableCreate->Name = L"tsmibtnFileDisableCreate";
			this->tsmibtnFileDisableCreate->Size = System::Drawing::Size(118, 22);
			this->tsmibtnFileDisableCreate->Text = L"禁止创建";
			this->tsmibtnFileDisableCreate->Click += gcnew System::EventHandler(this, &Form1::tsmibtnFileDisableCreate_Click);
			// 
			// tsmibtnFileDisableDelete
			// 
			this->tsmibtnFileDisableDelete->Name = L"tsmibtnFileDisableDelete";
			this->tsmibtnFileDisableDelete->Size = System::Drawing::Size(118, 22);
			this->tsmibtnFileDisableDelete->Text = L"禁止删除";
			this->tsmibtnFileDisableDelete->Click += gcnew System::EventHandler(this, &Form1::tsmibtnFileDisableDelete_Click);
			// 
			// tsmibtnFileDisableOpenRead
			// 
			this->tsmibtnFileDisableOpenRead->Name = L"tsmibtnFileDisableOpenRead";
			this->tsmibtnFileDisableOpenRead->Size = System::Drawing::Size(118, 22);
			this->tsmibtnFileDisableOpenRead->Text = L"禁止读写";
			this->tsmibtnFileDisableOpenRead->Click += gcnew System::EventHandler(this, &Form1::tsmibtnFileDisableOpenRead_Click);
			// 
			// tsmibtnReg
			// 
			this->tsmibtnReg->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {this->tsmibtnRegDisableCreate, 
				this->tsmibtnRegDisableDelete, this->tsmibtnRegDisableOpenRead});
			this->tsmibtnReg->Name = L"tsmibtnReg";
			this->tsmibtnReg->Size = System::Drawing::Size(106, 22);
			this->tsmibtnReg->Text = L"注册表";
			// 
			// tsmibtnRegDisableCreate
			// 
			this->tsmibtnRegDisableCreate->Name = L"tsmibtnRegDisableCreate";
			this->tsmibtnRegDisableCreate->Size = System::Drawing::Size(154, 22);
			this->tsmibtnRegDisableCreate->Text = L"禁止创建项(值)";
			this->tsmibtnRegDisableCreate->Click += gcnew System::EventHandler(this, &Form1::tsmibtnRegDisableCreate_Click);
			// 
			// tsmibtnRegDisableDelete
			// 
			this->tsmibtnRegDisableDelete->Name = L"tsmibtnRegDisableDelete";
			this->tsmibtnRegDisableDelete->Size = System::Drawing::Size(154, 22);
			this->tsmibtnRegDisableDelete->Text = L"禁止删除项(值)";
			this->tsmibtnRegDisableDelete->Click += gcnew System::EventHandler(this, &Form1::tsmibtnRegDisableDelete_Click);
			// 
			// tsmibtnRegDisableOpenRead
			// 
			this->tsmibtnRegDisableOpenRead->Name = L"tsmibtnRegDisableOpenRead";
			this->tsmibtnRegDisableOpenRead->Size = System::Drawing::Size(154, 22);
			this->tsmibtnRegDisableOpenRead->Text = L"禁止查询";
			this->tsmibtnRegDisableOpenRead->Click += gcnew System::EventHandler(this, &Form1::tsmibtnRegDisableOpenRead_Click);
			// 
			// 帮助HToolStripMenuItem
			// 
			this->帮助HToolStripMenuItem->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(5) {this->tsmibtnAbout, 
				this->tsmibtnReportBug, this->tsmibtnContact, this->tsmibtnUpdate, this->tsmibtnBlog});
			this->帮助HToolStripMenuItem->Name = L"帮助HToolStripMenuItem";
			this->帮助HToolStripMenuItem->Size = System::Drawing::Size(59, 20);
			this->帮助HToolStripMenuItem->Text = L"帮助(H)";
			// 
			// tsmibtnAbout
			// 
			this->tsmibtnAbout->Name = L"tsmibtnAbout";
			this->tsmibtnAbout->Size = System::Drawing::Size(142, 22);
			this->tsmibtnAbout->Text = L"关于";
			this->tsmibtnAbout->Click += gcnew System::EventHandler(this, &Form1::tsmibtnAbout_Click);
			// 
			// tsmibtnReportBug
			// 
			this->tsmibtnReportBug->Name = L"tsmibtnReportBug";
			this->tsmibtnReportBug->Size = System::Drawing::Size(142, 22);
			this->tsmibtnReportBug->Text = L"报告bug";
			this->tsmibtnReportBug->Click += gcnew System::EventHandler(this, &Form1::tsmibtnReportBug_Click);
			// 
			// tsmibtnContact
			// 
			this->tsmibtnContact->Name = L"tsmibtnContact";
			this->tsmibtnContact->Size = System::Drawing::Size(142, 22);
			this->tsmibtnContact->Text = L"联系作者";
			this->tsmibtnContact->Click += gcnew System::EventHandler(this, &Form1::tsmibtnContact_Click);
			// 
			// tsmibtnUpdate
			// 
			this->tsmibtnUpdate->Name = L"tsmibtnUpdate";
			this->tsmibtnUpdate->Size = System::Drawing::Size(142, 22);
			this->tsmibtnUpdate->Text = L"检测新版本";
			this->tsmibtnUpdate->Click += gcnew System::EventHandler(this, &Form1::tsmibtnUpdate_Click);
			// 
			// tsmibtnBlog
			// 
			this->tsmibtnBlog->Name = L"tsmibtnBlog";
			this->tsmibtnBlog->Size = System::Drawing::Size(142, 22);
			this->tsmibtnBlog->Text = L"乱码个人博客";
			this->tsmibtnBlog->Click += gcnew System::EventHandler(this, &Form1::tsmibtnBlog_Click);
			// 
			// statusStrip1
			// 
			this->statusStrip1->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(1) {this->tsp_lbl_msg});
			this->statusStrip1->Location = System::Drawing::Point(0, 534);
			this->statusStrip1->Name = L"statusStrip1";
			this->statusStrip1->Size = System::Drawing::Size(933, 22);
			this->statusStrip1->TabIndex = 1;
			this->statusStrip1->Text = L"statusStrip1";
			// 
			// tsp_lbl_msg
			// 
			this->tsp_lbl_msg->Name = L"tsp_lbl_msg";
			this->tsp_lbl_msg->Size = System::Drawing::Size(0, 17);
			// 
			// columnHeader43
			// 
			this->columnHeader43->Text = L"序号";
			// 
			// columnHeader44
			// 
			this->columnHeader44->Text = L"函数名称";
			this->columnHeader44->Width = 128;
			// 
			// columnHeader45
			// 
			this->columnHeader45->Text = L"当前函数地址";
			this->columnHeader45->Width = 115;
			// 
			// columnHeader46
			// 
			this->columnHeader46->Text = L"原始函数地址";
			this->columnHeader46->Width = 111;
			// 
			// columnHeader47
			// 
			this->columnHeader47->Text = L"当前函数所在模块";
			this->columnHeader47->Width = 247;
			// 
			// columnHeader48
			// 
			this->columnHeader48->Text = L"文件厂商";
			this->columnHeader48->Width = 164;
			// 
			// tp_about
			// 
			this->tp_about->Controls->Add(this->groupBox3);
			this->tp_about->Controls->Add(this->groupBox2);
			this->tp_about->Location = System::Drawing::Point(4, 21);
			this->tp_about->Name = L"tp_about";
			this->tp_about->Padding = System::Windows::Forms::Padding(3);
			this->tp_about->Size = System::Drawing::Size(925, 485);
			this->tp_about->TabIndex = 14;
			this->tp_about->Text = L"关于";
			this->tp_about->UseVisualStyleBackColor = true;
			// 
			// groupBox3
			// 
			this->groupBox3->Controls->Add(this->label2);
			this->groupBox3->Location = System::Drawing::Point(44, 274);
			this->groupBox3->Name = L"groupBox3";
			this->groupBox3->Size = System::Drawing::Size(837, 186);
			this->groupBox3->TabIndex = 2;
			this->groupBox3->TabStop = false;
			this->groupBox3->Text = L"说明和致谢";
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Location = System::Drawing::Point(33, 33);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(683, 132);
			this->label2->TabIndex = 0;
			this->label2->Text = resources->GetString(L"label2.Text");
			// 
			// groupBox2
			// 
			this->groupBox2->Controls->Add(this->label1);
			this->groupBox2->Location = System::Drawing::Point(44, 30);
			this->groupBox2->Name = L"groupBox2";
			this->groupBox2->Size = System::Drawing::Size(837, 212);
			this->groupBox2->TabIndex = 1;
			this->groupBox2->TabStop = false;
			this->groupBox2->Text = L"工具由来";
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(33, 38);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(725, 144);
			this->label1->TabIndex = 0;
			this->label1->Text = resources->GetString(L"label1.Text");
			// 
			// tp_monitor
			// 
			this->tp_monitor->Controls->Add(this->lv_monitor);
			this->tp_monitor->Location = System::Drawing::Point(4, 21);
			this->tp_monitor->Name = L"tp_monitor";
			this->tp_monitor->Padding = System::Windows::Forms::Padding(3);
			this->tp_monitor->Size = System::Drawing::Size(925, 485);
			this->tp_monitor->TabIndex = 13;
			this->tp_monitor->Text = L"监控";
			this->tp_monitor->UseVisualStyleBackColor = true;
			// 
			// lv_monitor
			// 
			this->lv_monitor->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(7) {this->columnHeader129, 
				this->columnHeader130, this->columnHeader131, this->columnHeader132, this->columnHeader104, this->columnHeader133, this->columnHeader134});
			this->lv_monitor->ContextMenuStrip = this->cms_monitor;
			this->lv_monitor->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_monitor->FullRowSelect = true;
			this->lv_monitor->Location = System::Drawing::Point(3, 3);
			this->lv_monitor->MultiSelect = false;
			this->lv_monitor->Name = L"lv_monitor";
			this->lv_monitor->ShowItemToolTips = true;
			this->lv_monitor->Size = System::Drawing::Size(919, 479);
			this->lv_monitor->SmallImageList = this->imageList1;
			this->lv_monitor->TabIndex = 0;
			this->lv_monitor->UseCompatibleStateImageBehavior = false;
			this->lv_monitor->View = System::Windows::Forms::View::Details;
			this->lv_monitor->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_monitor_ColumnClick);
			this->lv_monitor->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_monitor_ItemDrag);
			this->lv_monitor->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_monitor_MouseUp);
			// 
			// columnHeader129
			// 
			this->columnHeader129->Text = L"时间";
			this->columnHeader129->Width = 111;
			// 
			// columnHeader130
			// 
			this->columnHeader130->Text = L"进程名称";
			this->columnHeader130->Width = 106;
			// 
			// columnHeader131
			// 
			this->columnHeader131->Text = L"进程ID";
			this->columnHeader131->Width = 64;
			// 
			// columnHeader132
			// 
			this->columnHeader132->Text = L"操作";
			this->columnHeader132->Width = 98;
			// 
			// columnHeader104
			// 
			this->columnHeader104->Text = L"路径";
			this->columnHeader104->Width = 275;
			// 
			// columnHeader133
			// 
			this->columnHeader133->Text = L"结果";
			this->columnHeader133->Width = 92;
			// 
			// columnHeader134
			// 
			this->columnHeader134->Text = L"详细";
			this->columnHeader134->Width = 111;
			// 
			// cms_monitor
			// 
			this->cms_monitor->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(17) {this->cms_monitor_start, 
				this->cms_monitor_stop, this->toolStripSeparator76, this->cms_monitor_clean, this->toolStripSeparator160, this->cms_monitor_jump, 
				this->cms_monitor_search, this->toolStripSeparator157, this->cms_monitor_processProperty, this->cms_monitor_includeProcess, this->cms_monitor_excludeProcess, 
				this->toolStripSeparator159, this->cms_monitor_pathProperty, this->cms_monitor_includePath, this->cms_monitor_excludePath, this->toolStripSeparator158, 
				this->cms_monitor_export});
			this->cms_monitor->Name = L"cms_monitor";
			this->cms_monitor->Size = System::Drawing::Size(137, 298);
			// 
			// cms_monitor_start
			// 
			this->cms_monitor_start->Name = L"cms_monitor_start";
			this->cms_monitor_start->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_start->Text = L"开始";
			this->cms_monitor_start->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_start_Click);
			// 
			// cms_monitor_stop
			// 
			this->cms_monitor_stop->Enabled = false;
			this->cms_monitor_stop->Name = L"cms_monitor_stop";
			this->cms_monitor_stop->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_stop->Text = L"停止";
			this->cms_monitor_stop->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_stop_Click);
			// 
			// toolStripSeparator76
			// 
			this->toolStripSeparator76->Name = L"toolStripSeparator76";
			this->toolStripSeparator76->Size = System::Drawing::Size(133, 6);
			// 
			// cms_monitor_clean
			// 
			this->cms_monitor_clean->Name = L"cms_monitor_clean";
			this->cms_monitor_clean->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_clean->Text = L"清空";
			this->cms_monitor_clean->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_clean_Click);
			// 
			// toolStripSeparator160
			// 
			this->toolStripSeparator160->Name = L"toolStripSeparator160";
			this->toolStripSeparator160->Size = System::Drawing::Size(133, 6);
			// 
			// cms_monitor_jump
			// 
			this->cms_monitor_jump->Name = L"cms_monitor_jump";
			this->cms_monitor_jump->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_jump->Text = L"跳到...";
			this->cms_monitor_jump->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_jump_Click);
			// 
			// cms_monitor_search
			// 
			this->cms_monitor_search->Name = L"cms_monitor_search";
			this->cms_monitor_search->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_search->Text = L"在线查找...";
			this->cms_monitor_search->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_search_Click);
			// 
			// toolStripSeparator157
			// 
			this->toolStripSeparator157->Name = L"toolStripSeparator157";
			this->toolStripSeparator157->Size = System::Drawing::Size(133, 6);
			// 
			// cms_monitor_processProperty
			// 
			this->cms_monitor_processProperty->Name = L"cms_monitor_processProperty";
			this->cms_monitor_processProperty->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_processProperty->Text = L"进程属性...";
			this->cms_monitor_processProperty->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_processProperty_Click);
			// 
			// cms_monitor_includeProcess
			// 
			this->cms_monitor_includeProcess->Name = L"cms_monitor_includeProcess";
			this->cms_monitor_includeProcess->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_includeProcess->Text = L"包含进程";
			this->cms_monitor_includeProcess->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_includeProcess_Click);
			// 
			// cms_monitor_excludeProcess
			// 
			this->cms_monitor_excludeProcess->Name = L"cms_monitor_excludeProcess";
			this->cms_monitor_excludeProcess->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_excludeProcess->Text = L"排除进程";
			this->cms_monitor_excludeProcess->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_excludeProcess_Click);
			// 
			// toolStripSeparator159
			// 
			this->toolStripSeparator159->Name = L"toolStripSeparator159";
			this->toolStripSeparator159->Size = System::Drawing::Size(133, 6);
			// 
			// cms_monitor_pathProperty
			// 
			this->cms_monitor_pathProperty->Name = L"cms_monitor_pathProperty";
			this->cms_monitor_pathProperty->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_pathProperty->Text = L"路径属性...";
			this->cms_monitor_pathProperty->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_pathProperty_Click);
			// 
			// cms_monitor_includePath
			// 
			this->cms_monitor_includePath->Name = L"cms_monitor_includePath";
			this->cms_monitor_includePath->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_includePath->Text = L"包含路径";
			this->cms_monitor_includePath->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_includePath_Click);
			// 
			// cms_monitor_excludePath
			// 
			this->cms_monitor_excludePath->Name = L"cms_monitor_excludePath";
			this->cms_monitor_excludePath->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_excludePath->Text = L"排除路径";
			this->cms_monitor_excludePath->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_excludePath_Click);
			// 
			// toolStripSeparator158
			// 
			this->toolStripSeparator158->Name = L"toolStripSeparator158";
			this->toolStripSeparator158->Size = System::Drawing::Size(133, 6);
			// 
			// cms_monitor_export
			// 
			this->cms_monitor_export->Name = L"cms_monitor_export";
			this->cms_monitor_export->Size = System::Drawing::Size(136, 22);
			this->cms_monitor_export->Text = L"导出";
			this->cms_monitor_export->Click += gcnew System::EventHandler(this, &Form1::cms_monitor_export_Click);
			// 
			// imageList1
			// 
			this->imageList1->ImageStream = (cli::safe_cast<System::Windows::Forms::ImageListStreamer^  >(resources->GetObject(L"imageList1.ImageStream")));
			this->imageList1->TransparentColor = System::Drawing::Color::Transparent;
			this->imageList1->Images->SetKeyName(0, L"0.ico");
			this->imageList1->Images->SetKeyName(1, L"1.ico");
			this->imageList1->Images->SetKeyName(2, L"2.ico");
			this->imageList1->Images->SetKeyName(3, L"3.ico");
			this->imageList1->Images->SetKeyName(4, L"4.ico");
			this->imageList1->Images->SetKeyName(5, L"5.ico");
			this->imageList1->Images->SetKeyName(6, L"6.ico");
			this->imageList1->Images->SetKeyName(7, L"7.ico");
			this->imageList1->Images->SetKeyName(8, L"10.ico");
			this->imageList1->Images->SetKeyName(9, L"11.ico");
			this->imageList1->Images->SetKeyName(10, L"12.ico");
			this->imageList1->Images->SetKeyName(11, L"13.jpg");
			// 
			// tp_srcshot
			// 
			this->tp_srcshot->Controls->Add(this->rtb_srcshot);
			this->tp_srcshot->Location = System::Drawing::Point(4, 21);
			this->tp_srcshot->Name = L"tp_srcshot";
			this->tp_srcshot->Padding = System::Windows::Forms::Padding(3);
			this->tp_srcshot->Size = System::Drawing::Size(925, 485);
			this->tp_srcshot->TabIndex = 12;
			this->tp_srcshot->Text = L"屏幕截图";
			this->tp_srcshot->UseVisualStyleBackColor = true;
			// 
			// rtb_srcshot
			// 
			this->rtb_srcshot->AllowDrop = true;
			this->rtb_srcshot->ContextMenuStrip = this->cms_srcshot;
			this->rtb_srcshot->Dock = System::Windows::Forms::DockStyle::Fill;
			this->rtb_srcshot->Location = System::Drawing::Point(3, 3);
			this->rtb_srcshot->Name = L"rtb_srcshot";
			this->rtb_srcshot->Size = System::Drawing::Size(919, 479);
			this->rtb_srcshot->TabIndex = 0;
			this->rtb_srcshot->Text = L"";
			this->rtb_srcshot->WordWrap = false;
			this->rtb_srcshot->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::rtb_srcshot_DragDrop);
			this->rtb_srcshot->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::rtb_srcshot_DragEnter);
			this->rtb_srcshot->MouseDown += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::rtb_srcshot_MouseDown);
			this->rtb_srcshot->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::rtb_srcshot_MouseUp);
			// 
			// cms_srcshot
			// 
			this->cms_srcshot->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(14) {this->cms_srcshot_undo, 
				this->toolStripSeparator161, this->cms_srcshot_clear, this->toolStripSeparator124, this->cms_srcshot_cut, this->cms_srcshot_copy, 
				this->cms_srcshot_paste, this->cms_srcshot_del, this->toolStripSeparator123, this->cms_srcshot_full, this->cms_srcshot_part, 
				this->cms_srcshot_hide, this->toolStripSeparator125, this->cms_srcshot_save});
			this->cms_srcshot->Name = L"contextMenuStrip1";
			this->cms_srcshot->Size = System::Drawing::Size(179, 248);
			// 
			// cms_srcshot_undo
			// 
			this->cms_srcshot_undo->Name = L"cms_srcshot_undo";
			this->cms_srcshot_undo->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_undo->Text = L"撤销";
			this->cms_srcshot_undo->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_undo_Click);
			// 
			// toolStripSeparator161
			// 
			this->toolStripSeparator161->Name = L"toolStripSeparator161";
			this->toolStripSeparator161->Size = System::Drawing::Size(175, 6);
			// 
			// cms_srcshot_clear
			// 
			this->cms_srcshot_clear->Name = L"cms_srcshot_clear";
			this->cms_srcshot_clear->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_clear->Text = L"清空";
			this->cms_srcshot_clear->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_clear_Click);
			// 
			// toolStripSeparator124
			// 
			this->toolStripSeparator124->Name = L"toolStripSeparator124";
			this->toolStripSeparator124->Size = System::Drawing::Size(175, 6);
			// 
			// cms_srcshot_cut
			// 
			this->cms_srcshot_cut->Name = L"cms_srcshot_cut";
			this->cms_srcshot_cut->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_cut->Text = L"剪切";
			this->cms_srcshot_cut->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_cut_Click);
			// 
			// cms_srcshot_copy
			// 
			this->cms_srcshot_copy->Name = L"cms_srcshot_copy";
			this->cms_srcshot_copy->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_copy->Text = L"复制";
			this->cms_srcshot_copy->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_copy_Click);
			// 
			// cms_srcshot_paste
			// 
			this->cms_srcshot_paste->Name = L"cms_srcshot_paste";
			this->cms_srcshot_paste->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_paste->Text = L"黏贴";
			this->cms_srcshot_paste->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_paste_Click);
			// 
			// cms_srcshot_del
			// 
			this->cms_srcshot_del->Name = L"cms_srcshot_del";
			this->cms_srcshot_del->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_del->Text = L"删除";
			this->cms_srcshot_del->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_del_Click);
			// 
			// toolStripSeparator123
			// 
			this->toolStripSeparator123->Name = L"toolStripSeparator123";
			this->toolStripSeparator123->Size = System::Drawing::Size(175, 6);
			// 
			// cms_srcshot_full
			// 
			this->cms_srcshot_full->Name = L"cms_srcshot_full";
			this->cms_srcshot_full->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_full->Text = L"截取全屏";
			this->cms_srcshot_full->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_full_Click);
			// 
			// cms_srcshot_part
			// 
			this->cms_srcshot_part->Name = L"cms_srcshot_part";
			this->cms_srcshot_part->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_part->Text = L"截取部分";
			this->cms_srcshot_part->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_part_Click);
			// 
			// cms_srcshot_hide
			// 
			this->cms_srcshot_hide->Checked = true;
			this->cms_srcshot_hide->CheckState = System::Windows::Forms::CheckState::Checked;
			this->cms_srcshot_hide->Name = L"cms_srcshot_hide";
			this->cms_srcshot_hide->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_hide->Text = L"截图时隐藏当前窗口";
			this->cms_srcshot_hide->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_hide_Click);
			// 
			// toolStripSeparator125
			// 
			this->toolStripSeparator125->Name = L"toolStripSeparator125";
			this->toolStripSeparator125->Size = System::Drawing::Size(175, 6);
			// 
			// cms_srcshot_save
			// 
			this->cms_srcshot_save->Name = L"cms_srcshot_save";
			this->cms_srcshot_save->Size = System::Drawing::Size(178, 22);
			this->cms_srcshot_save->Text = L"图片另存为...";
			this->cms_srcshot_save->Click += gcnew System::EventHandler(this, &Form1::cms_srcshot_save_Click);
			// 
			// tp_other
			// 
			this->tp_other->Controls->Add(this->tc_other);
			this->tp_other->Location = System::Drawing::Point(4, 21);
			this->tp_other->Name = L"tp_other";
			this->tp_other->Padding = System::Windows::Forms::Padding(3);
			this->tp_other->Size = System::Drawing::Size(925, 485);
			this->tp_other->TabIndex = 11;
			this->tp_other->Text = L"其他辅助";
			this->tp_other->UseVisualStyleBackColor = true;
			// 
			// tc_other
			// 
			this->tc_other->Controls->Add(this->tp_other_table);
			this->tc_other->Controls->Add(this->tp_other_md5);
			this->tc_other->Controls->Add(this->tp_other_menu);
			this->tc_other->Controls->Add(this->tp_other_proxy);
			this->tc_other->Controls->Add(this->tp_other_sigverif);
			this->tc_other->Controls->Add(this->tp_other_mbr);
			this->tc_other->Controls->Add(this->tp_other_share);
			this->tc_other->Controls->Add(this->tp_other_user);
			this->tc_other->Controls->Add(this->tp_other_clean);
			this->tc_other->Controls->Add(this->tp_other_trace);
			this->tc_other->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tc_other->Location = System::Drawing::Point(3, 3);
			this->tc_other->Name = L"tc_other";
			this->tc_other->SelectedIndex = 0;
			this->tc_other->Size = System::Drawing::Size(919, 479);
			this->tc_other->TabIndex = 0;
			this->tc_other->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::tc_other_SelectedIndexChanged);
			// 
			// tp_other_table
			// 
			this->tp_other_table->Controls->Add(this->splitContainer12);
			this->tp_other_table->Location = System::Drawing::Point(4, 21);
			this->tp_other_table->Name = L"tp_other_table";
			this->tp_other_table->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_table->Size = System::Drawing::Size(911, 454);
			this->tp_other_table->TabIndex = 0;
			this->tp_other_table->Text = L"输入输出表查看";
			this->tp_other_table->UseVisualStyleBackColor = true;
			// 
			// splitContainer12
			// 
			this->splitContainer12->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer12->Location = System::Drawing::Point(3, 3);
			this->splitContainer12->Name = L"splitContainer12";
			this->splitContainer12->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer12.Panel1
			// 
			this->splitContainer12->Panel1->Controls->Add(this->lv_other_table);
			// 
			// splitContainer12.Panel2
			// 
			this->splitContainer12->Panel2->Controls->Add(this->lv_other_table_func);
			this->splitContainer12->Size = System::Drawing::Size(905, 448);
			this->splitContainer12->SplitterDistance = 272;
			this->splitContainer12->TabIndex = 1;
			// 
			// lv_other_table
			// 
			this->lv_other_table->AllowColumnReorder = true;
			this->lv_other_table->AllowDrop = true;
			this->lv_other_table->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(6) {this->columnHeader105, 
				this->columnHeader106, this->columnHeader107, this->columnHeader108, this->columnHeader157, this->columnHeader158});
			this->lv_other_table->ContextMenuStrip = this->cms_other_table;
			this->lv_other_table->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_table->FullRowSelect = true;
			this->lv_other_table->Location = System::Drawing::Point(0, 0);
			this->lv_other_table->MultiSelect = false;
			this->lv_other_table->Name = L"lv_other_table";
			this->lv_other_table->ShowItemToolTips = true;
			this->lv_other_table->Size = System::Drawing::Size(905, 272);
			this->lv_other_table->TabIndex = 1;
			this->lv_other_table->UseCompatibleStateImageBehavior = false;
			this->lv_other_table->View = System::Windows::Forms::View::Details;
			this->lv_other_table->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_table_ItemDrag);
			this->lv_other_table->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_other_table_DragDrop);
			this->lv_other_table->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_other_table_DragEnter);
			this->lv_other_table->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_table_MouseUp);
			// 
			// columnHeader105
			// 
			this->columnHeader105->Text = L"Dll Name";
			this->columnHeader105->Width = 102;
			// 
			// columnHeader106
			// 
			this->columnHeader106->Text = L"OriginalFirstThunk";
			this->columnHeader106->Width = 133;
			// 
			// columnHeader107
			// 
			this->columnHeader107->Text = L"TimeDateStamp";
			this->columnHeader107->Width = 133;
			// 
			// columnHeader108
			// 
			this->columnHeader108->Text = L"ForwarderChain";
			this->columnHeader108->Width = 117;
			// 
			// columnHeader157
			// 
			this->columnHeader157->Text = L"Name";
			this->columnHeader157->Width = 107;
			// 
			// columnHeader158
			// 
			this->columnHeader158->Text = L"FirstThunk";
			this->columnHeader158->Width = 144;
			// 
			// cms_other_table
			// 
			this->cms_other_table->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(11) {this->cms_other_table_open, 
				this->toolStripSeparator115, this->cms_other_table_before, this->cms_other_table_forward, this->toolStripSeparator162, this->cms_other_table_view, 
				this->cms_other_exportTable, this->toolStripSeparator175, this->cms_other_table_infect, this->toolStripSeparator176, this->cms_other_table_export});
			this->cms_other_table->Name = L"contextMenuStrip1";
			this->cms_other_table->Size = System::Drawing::Size(131, 182);
			// 
			// cms_other_table_open
			// 
			this->cms_other_table_open->Name = L"cms_other_table_open";
			this->cms_other_table_open->Size = System::Drawing::Size(130, 22);
			this->cms_other_table_open->Text = L"打开";
			this->cms_other_table_open->Click += gcnew System::EventHandler(this, &Form1::cms_other_table_open_Click);
			// 
			// toolStripSeparator115
			// 
			this->toolStripSeparator115->Name = L"toolStripSeparator115";
			this->toolStripSeparator115->Size = System::Drawing::Size(127, 6);
			// 
			// cms_other_table_before
			// 
			this->cms_other_table_before->Name = L"cms_other_table_before";
			this->cms_other_table_before->Size = System::Drawing::Size(130, 22);
			this->cms_other_table_before->Text = L"前进";
			this->cms_other_table_before->Click += gcnew System::EventHandler(this, &Form1::cms_other_table_before_Click);
			// 
			// cms_other_table_forward
			// 
			this->cms_other_table_forward->Name = L"cms_other_table_forward";
			this->cms_other_table_forward->Size = System::Drawing::Size(130, 22);
			this->cms_other_table_forward->Text = L"后退";
			this->cms_other_table_forward->Click += gcnew System::EventHandler(this, &Form1::cms_other_table_forward_Click);
			// 
			// toolStripSeparator162
			// 
			this->toolStripSeparator162->Name = L"toolStripSeparator162";
			this->toolStripSeparator162->Size = System::Drawing::Size(127, 6);
			// 
			// cms_other_table_view
			// 
			this->cms_other_table_view->Name = L"cms_other_table_view";
			this->cms_other_table_view->Size = System::Drawing::Size(130, 22);
			this->cms_other_table_view->Text = L"详细信息";
			this->cms_other_table_view->Click += gcnew System::EventHandler(this, &Form1::cms_other_table_view_Click);
			// 
			// cms_other_exportTable
			// 
			this->cms_other_exportTable->Name = L"cms_other_exportTable";
			this->cms_other_exportTable->Size = System::Drawing::Size(130, 22);
			this->cms_other_exportTable->Text = L"导出表信息";
			this->cms_other_exportTable->Click += gcnew System::EventHandler(this, &Form1::cms_other_exportTable_Click);
			// 
			// toolStripSeparator175
			// 
			this->toolStripSeparator175->Name = L"toolStripSeparator175";
			this->toolStripSeparator175->Size = System::Drawing::Size(127, 6);
			// 
			// cms_other_table_infect
			// 
			this->cms_other_table_infect->Name = L"cms_other_table_infect";
			this->cms_other_table_infect->Size = System::Drawing::Size(130, 22);
			this->cms_other_table_infect->Text = L"PE感染...";
			this->cms_other_table_infect->Click += gcnew System::EventHandler(this, &Form1::cms_other_table_infect_Click);
			// 
			// toolStripSeparator176
			// 
			this->toolStripSeparator176->Name = L"toolStripSeparator176";
			this->toolStripSeparator176->Size = System::Drawing::Size(127, 6);
			// 
			// cms_other_table_export
			// 
			this->cms_other_table_export->Name = L"cms_other_table_export";
			this->cms_other_table_export->Size = System::Drawing::Size(130, 22);
			this->cms_other_table_export->Text = L"导出";
			this->cms_other_table_export->Click += gcnew System::EventHandler(this, &Form1::cms_other_table_export_Click);
			// 
			// lv_other_table_func
			// 
			this->lv_other_table_func->AllowColumnReorder = true;
			this->lv_other_table_func->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader171, 
				this->columnHeader175, this->columnHeader172, this->columnHeader173, this->columnHeader174});
			this->lv_other_table_func->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_table_func->FullRowSelect = true;
			this->lv_other_table_func->Location = System::Drawing::Point(0, 0);
			this->lv_other_table_func->MultiSelect = false;
			this->lv_other_table_func->Name = L"lv_other_table_func";
			this->lv_other_table_func->ShowItemToolTips = true;
			this->lv_other_table_func->Size = System::Drawing::Size(905, 172);
			this->lv_other_table_func->TabIndex = 1;
			this->lv_other_table_func->UseCompatibleStateImageBehavior = false;
			this->lv_other_table_func->View = System::Windows::Forms::View::Details;
			this->lv_other_table_func->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_table_func_ItemDrag);
			// 
			// columnHeader171
			// 
			this->columnHeader171->Text = L"Thunk RVA";
			this->columnHeader171->Width = 118;
			// 
			// columnHeader175
			// 
			this->columnHeader175->Text = L"Thunk VA";
			this->columnHeader175->Width = 117;
			// 
			// columnHeader172
			// 
			this->columnHeader172->Text = L"Thunk Value";
			this->columnHeader172->Width = 133;
			// 
			// columnHeader173
			// 
			this->columnHeader173->Text = L"Hint";
			this->columnHeader173->Width = 92;
			// 
			// columnHeader174
			// 
			this->columnHeader174->Text = L"Function Name";
			this->columnHeader174->Width = 170;
			// 
			// tp_other_md5
			// 
			this->tp_other_md5->Controls->Add(this->lv_other_md5);
			this->tp_other_md5->Location = System::Drawing::Point(4, 21);
			this->tp_other_md5->Name = L"tp_other_md5";
			this->tp_other_md5->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_md5->Size = System::Drawing::Size(911, 454);
			this->tp_other_md5->TabIndex = 1;
			this->tp_other_md5->Text = L"MD5批校验";
			this->tp_other_md5->UseVisualStyleBackColor = true;
			// 
			// lv_other_md5
			// 
			this->lv_other_md5->AllowColumnReorder = true;
			this->lv_other_md5->AllowDrop = true;
			this->lv_other_md5->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(4) {this->columnHeader109, 
				this->columnHeader110, this->columnHeader167, this->columnHeader111});
			this->lv_other_md5->ContextMenuStrip = this->cms_other_md5;
			this->lv_other_md5->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_md5->FullRowSelect = true;
			this->lv_other_md5->Location = System::Drawing::Point(3, 3);
			this->lv_other_md5->MultiSelect = false;
			this->lv_other_md5->Name = L"lv_other_md5";
			this->lv_other_md5->ShowItemToolTips = true;
			this->lv_other_md5->Size = System::Drawing::Size(905, 448);
			this->lv_other_md5->TabIndex = 1;
			this->lv_other_md5->UseCompatibleStateImageBehavior = false;
			this->lv_other_md5->View = System::Windows::Forms::View::Details;
			this->lv_other_md5->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_other_md5_ColumnClick);
			this->lv_other_md5->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_md5_ItemDrag);
			this->lv_other_md5->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_other_md5_DragDrop);
			this->lv_other_md5->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_other_md5_DragEnter);
			this->lv_other_md5->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_md5_MouseUp);
			// 
			// columnHeader109
			// 
			this->columnHeader109->Text = L"文件名称";
			this->columnHeader109->Width = 163;
			// 
			// columnHeader110
			// 
			this->columnHeader110->Text = L"文件路径";
			this->columnHeader110->Width = 343;
			// 
			// columnHeader167
			// 
			this->columnHeader167->Text = L"文件厂商";
			this->columnHeader167->Width = 176;
			// 
			// columnHeader111
			// 
			this->columnHeader111->Text = L"文件MD5值";
			this->columnHeader111->Width = 198;
			// 
			// cms_other_md5
			// 
			this->cms_other_md5->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(14) {this->cms_other_md5_openFile, 
				this->cms_other_md5_openFolder, this->cms_other_md5_openFolder2, this->toolStripSeparator61, this->cms_other_md5_clear, this->toolStripSeparator163, 
				this->cms_other_md5_copy1, this->cms_other_md5_copy2, this->toolStripSeparator70, this->cms_other_md5_explorer, this->cms_other_md5_explorer2, 
				this->cm_other_md5_showProperty, this->toolStripSeparator71, this->cms_other_md5_export});
			this->cms_other_md5->Name = L"cms_other_sigverif";
			this->cms_other_md5->Size = System::Drawing::Size(215, 248);
			// 
			// cms_other_md5_openFile
			// 
			this->cms_other_md5_openFile->Name = L"cms_other_md5_openFile";
			this->cms_other_md5_openFile->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_openFile->Text = L"打开";
			this->cms_other_md5_openFile->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_openFile_Click);
			// 
			// cms_other_md5_openFolder
			// 
			this->cms_other_md5_openFolder->Name = L"cms_other_md5_openFolder";
			this->cms_other_md5_openFolder->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_openFolder->Text = L"打开文件夹";
			this->cms_other_md5_openFolder->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_openFolder_Click);
			// 
			// cms_other_md5_openFolder2
			// 
			this->cms_other_md5_openFolder2->Name = L"cms_other_md5_openFolder2";
			this->cms_other_md5_openFolder2->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_openFolder2->Text = L"打开文件夹(包括子文件夹)";
			this->cms_other_md5_openFolder2->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_openFolder2_Click);
			// 
			// toolStripSeparator61
			// 
			this->toolStripSeparator61->Name = L"toolStripSeparator61";
			this->toolStripSeparator61->Size = System::Drawing::Size(211, 6);
			// 
			// cms_other_md5_clear
			// 
			this->cms_other_md5_clear->Name = L"cms_other_md5_clear";
			this->cms_other_md5_clear->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_clear->Text = L"清空";
			this->cms_other_md5_clear->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_clear_Click);
			// 
			// toolStripSeparator163
			// 
			this->toolStripSeparator163->Name = L"toolStripSeparator163";
			this->toolStripSeparator163->Size = System::Drawing::Size(211, 6);
			// 
			// cms_other_md5_copy1
			// 
			this->cms_other_md5_copy1->Name = L"cms_other_md5_copy1";
			this->cms_other_md5_copy1->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_copy1->Text = L"复制MD5值";
			this->cms_other_md5_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_copy1_Click);
			// 
			// cms_other_md5_copy2
			// 
			this->cms_other_md5_copy2->Name = L"cms_other_md5_copy2";
			this->cms_other_md5_copy2->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_copy2->Text = L"复制文件名和MD5值";
			this->cms_other_md5_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_copy2_Click);
			// 
			// toolStripSeparator70
			// 
			this->toolStripSeparator70->Name = L"toolStripSeparator70";
			this->toolStripSeparator70->Size = System::Drawing::Size(211, 6);
			// 
			// cms_other_md5_explorer
			// 
			this->cms_other_md5_explorer->Name = L"cms_other_md5_explorer";
			this->cms_other_md5_explorer->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_explorer->Text = L"定位到映像文件";
			this->cms_other_md5_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_explorer_Click);
			// 
			// cms_other_md5_explorer2
			// 
			this->cms_other_md5_explorer2->Name = L"cms_other_md5_explorer2";
			this->cms_other_md5_explorer2->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_explorer2->Text = L"定位到映像文件2";
			this->cms_other_md5_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_explorer2_Click);
			// 
			// cm_other_md5_showProperty
			// 
			this->cm_other_md5_showProperty->Name = L"cm_other_md5_showProperty";
			this->cm_other_md5_showProperty->Size = System::Drawing::Size(214, 22);
			this->cm_other_md5_showProperty->Text = L"查看映像文件属性";
			this->cm_other_md5_showProperty->Click += gcnew System::EventHandler(this, &Form1::cm_other_md5_showProperty_Click);
			// 
			// toolStripSeparator71
			// 
			this->toolStripSeparator71->Name = L"toolStripSeparator71";
			this->toolStripSeparator71->Size = System::Drawing::Size(211, 6);
			// 
			// cms_other_md5_export
			// 
			this->cms_other_md5_export->Name = L"cms_other_md5_export";
			this->cms_other_md5_export->Size = System::Drawing::Size(214, 22);
			this->cms_other_md5_export->Text = L"导出";
			this->cms_other_md5_export->Click += gcnew System::EventHandler(this, &Form1::cms_other_md5_export_Click);
			// 
			// tp_other_menu
			// 
			this->tp_other_menu->Controls->Add(this->splitContainer5);
			this->tp_other_menu->Location = System::Drawing::Point(4, 21);
			this->tp_other_menu->Name = L"tp_other_menu";
			this->tp_other_menu->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_menu->Size = System::Drawing::Size(911, 454);
			this->tp_other_menu->TabIndex = 2;
			this->tp_other_menu->Text = L"右键菜单";
			this->tp_other_menu->UseVisualStyleBackColor = true;
			// 
			// splitContainer5
			// 
			this->splitContainer5->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer5->Location = System::Drawing::Point(3, 3);
			this->splitContainer5->Name = L"splitContainer5";
			// 
			// splitContainer5.Panel1
			// 
			this->splitContainer5->Panel1->Controls->Add(this->lv_other_menu);
			// 
			// splitContainer5.Panel2
			// 
			this->splitContainer5->Panel2->Controls->Add(this->groupBox1);
			this->splitContainer5->Size = System::Drawing::Size(905, 448);
			this->splitContainer5->SplitterDistance = 645;
			this->splitContainer5->TabIndex = 0;
			// 
			// lv_other_menu
			// 
			this->lv_other_menu->AllowColumnReorder = true;
			this->lv_other_menu->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(3) {this->columnHeader112, 
				this->columnHeader113, this->columnHeader114});
			this->lv_other_menu->ContextMenuStrip = this->cms_other_menu;
			this->lv_other_menu->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_menu->FullRowSelect = true;
			this->lv_other_menu->Location = System::Drawing::Point(0, 0);
			this->lv_other_menu->MultiSelect = false;
			this->lv_other_menu->Name = L"lv_other_menu";
			this->lv_other_menu->ShowItemToolTips = true;
			this->lv_other_menu->Size = System::Drawing::Size(645, 448);
			this->lv_other_menu->TabIndex = 1;
			this->lv_other_menu->UseCompatibleStateImageBehavior = false;
			this->lv_other_menu->View = System::Windows::Forms::View::Details;
			this->lv_other_menu->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_other_menu_ColumnClick);
			this->lv_other_menu->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_menu_ItemDrag);
			this->lv_other_menu->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_menu_MouseUp);
			// 
			// columnHeader112
			// 
			this->columnHeader112->Text = L"名称";
			this->columnHeader112->Width = 145;
			// 
			// columnHeader113
			// 
			this->columnHeader113->Text = L"类型";
			this->columnHeader113->Width = 128;
			// 
			// columnHeader114
			// 
			this->columnHeader114->Text = L"数据";
			this->columnHeader114->Width = 316;
			// 
			// cms_other_menu
			// 
			this->cms_other_menu->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(21) {this->cms_other_menu_refresh, 
				this->toolStripSeparator63, this->cms_other_menu_delete1, this->cms_other_menu_delete2, this->toolStripSeparator69, this->cms_other_menu_sigverif, 
				this->cms_other_menu_sigverifAll, this->toolStripSeparator110, this->cms_other_menu_copy1, this->cms_other_menu_copy2, this->toolStripSeparator111, 
				this->cms_other_menu_onlineFind, this->cms_other_menu_onlineAnalysis, this->toolStripSeparator112, this->cms_other_menu_explorer, 
				this->cms_other_menu_explorer2, this->cms_other_menu_showProperty, this->toolStripSeparator113, this->cms_other_menu_reg, this->toolStripSeparator114, 
				this->cms_other_menu_export});
			this->cms_other_menu->Name = L"cms_net_ieMenu";
			this->cms_other_menu->Size = System::Drawing::Size(179, 354);
			// 
			// cms_other_menu_refresh
			// 
			this->cms_other_menu_refresh->Name = L"cms_other_menu_refresh";
			this->cms_other_menu_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_refresh->Text = L"刷新";
			this->cms_other_menu_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_refresh_Click);
			// 
			// toolStripSeparator63
			// 
			this->toolStripSeparator63->Name = L"toolStripSeparator63";
			this->toolStripSeparator63->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_menu_delete1
			// 
			this->cms_other_menu_delete1->Name = L"cms_other_menu_delete1";
			this->cms_other_menu_delete1->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_delete1->Text = L"删除(注册表)";
			this->cms_other_menu_delete1->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_delete1_Click);
			// 
			// cms_other_menu_delete2
			// 
			this->cms_other_menu_delete2->Name = L"cms_other_menu_delete2";
			this->cms_other_menu_delete2->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_delete2->Text = L"删除(注册表和文件)";
			this->cms_other_menu_delete2->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_delete2_Click);
			// 
			// toolStripSeparator69
			// 
			this->toolStripSeparator69->Name = L"toolStripSeparator69";
			this->toolStripSeparator69->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_menu_sigverif
			// 
			this->cms_other_menu_sigverif->Name = L"cms_other_menu_sigverif";
			this->cms_other_menu_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_sigverif->Text = L"校验数字签名";
			this->cms_other_menu_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_sigverif_Click);
			// 
			// cms_other_menu_sigverifAll
			// 
			this->cms_other_menu_sigverifAll->Name = L"cms_other_menu_sigverifAll";
			this->cms_other_menu_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_sigverifAll->Text = L"校验所有数字签名";
			this->cms_other_menu_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_sigverifAll_Click);
			// 
			// toolStripSeparator110
			// 
			this->toolStripSeparator110->Name = L"toolStripSeparator110";
			this->toolStripSeparator110->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_menu_copy1
			// 
			this->cms_other_menu_copy1->Name = L"cms_other_menu_copy1";
			this->cms_other_menu_copy1->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_copy1->Text = L"复制插件名称";
			this->cms_other_menu_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_copy1_Click);
			// 
			// cms_other_menu_copy2
			// 
			this->cms_other_menu_copy2->Name = L"cms_other_menu_copy2";
			this->cms_other_menu_copy2->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_copy2->Text = L"复制插件路径";
			this->cms_other_menu_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_copy2_Click);
			// 
			// toolStripSeparator111
			// 
			this->toolStripSeparator111->Name = L"toolStripSeparator111";
			this->toolStripSeparator111->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_menu_onlineFind
			// 
			this->cms_other_menu_onlineFind->Name = L"cms_other_menu_onlineFind";
			this->cms_other_menu_onlineFind->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_onlineFind->Text = L"在线搜索插件名";
			this->cms_other_menu_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_onlineFind_Click);
			// 
			// cms_other_menu_onlineAnalysis
			// 
			this->cms_other_menu_onlineAnalysis->Name = L"cms_other_menu_onlineAnalysis";
			this->cms_other_menu_onlineAnalysis->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_onlineAnalysis->Text = L"在线分析";
			this->cms_other_menu_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_onlineAnalysis_Click);
			// 
			// toolStripSeparator112
			// 
			this->toolStripSeparator112->Name = L"toolStripSeparator112";
			this->toolStripSeparator112->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_menu_explorer
			// 
			this->cms_other_menu_explorer->Name = L"cms_other_menu_explorer";
			this->cms_other_menu_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_explorer->Text = L"定位到插件文件";
			this->cms_other_menu_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_explorer_Click);
			// 
			// cms_other_menu_explorer2
			// 
			this->cms_other_menu_explorer2->Name = L"cms_other_menu_explorer2";
			this->cms_other_menu_explorer2->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_explorer2->Text = L"定位到插件文件2";
			this->cms_other_menu_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_explorer2_Click);
			// 
			// cms_other_menu_showProperty
			// 
			this->cms_other_menu_showProperty->Name = L"cms_other_menu_showProperty";
			this->cms_other_menu_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_showProperty->Text = L"查看插件文件属性";
			this->cms_other_menu_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_showProperty_Click);
			// 
			// toolStripSeparator113
			// 
			this->toolStripSeparator113->Name = L"toolStripSeparator113";
			this->toolStripSeparator113->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_menu_reg
			// 
			this->cms_other_menu_reg->Name = L"cms_other_menu_reg";
			this->cms_other_menu_reg->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_reg->Text = L"定位到注册表";
			this->cms_other_menu_reg->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_reg_Click);
			// 
			// toolStripSeparator114
			// 
			this->toolStripSeparator114->Name = L"toolStripSeparator114";
			this->toolStripSeparator114->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_menu_export
			// 
			this->cms_other_menu_export->Name = L"cms_other_menu_export";
			this->cms_other_menu_export->Size = System::Drawing::Size(178, 22);
			this->cms_other_menu_export->Text = L"导出";
			this->cms_other_menu_export->Click += gcnew System::EventHandler(this, &Form1::cms_other_menu_export_Click);
			// 
			// groupBox1
			// 
			this->groupBox1->Controls->Add(this->btn_other_menu_restart);
			this->groupBox1->Controls->Add(this->label6);
			this->groupBox1->Controls->Add(this->btn_other_menu_clear);
			this->groupBox1->Controls->Add(this->txt_other_menu_param);
			this->groupBox1->Controls->Add(this->txt_other_menu_path);
			this->groupBox1->Controls->Add(this->txt_other_menu_name);
			this->groupBox1->Controls->Add(this->label5);
			this->groupBox1->Controls->Add(this->label4);
			this->groupBox1->Controls->Add(this->label3);
			this->groupBox1->Controls->Add(this->btn_other_menu_browse);
			this->groupBox1->Controls->Add(this->btn_other_menu_ok);
			this->groupBox1->Dock = System::Windows::Forms::DockStyle::Fill;
			this->groupBox1->Location = System::Drawing::Point(0, 0);
			this->groupBox1->Name = L"groupBox1";
			this->groupBox1->Size = System::Drawing::Size(256, 448);
			this->groupBox1->TabIndex = 0;
			this->groupBox1->TabStop = false;
			this->groupBox1->Text = L"右键菜单修改";
			// 
			// btn_other_menu_restart
			// 
			this->btn_other_menu_restart->Location = System::Drawing::Point(146, 346);
			this->btn_other_menu_restart->Name = L"btn_other_menu_restart";
			this->btn_other_menu_restart->Size = System::Drawing::Size(75, 23);
			this->btn_other_menu_restart->TabIndex = 6;
			this->btn_other_menu_restart->Text = L"重新启动";
			this->btn_other_menu_restart->UseVisualStyleBackColor = true;
			this->btn_other_menu_restart->Click += gcnew System::EventHandler(this, &Form1::btn_other_menu_restart_Click);
			// 
			// label6
			// 
			this->label6->Location = System::Drawing::Point(25, 243);
			this->label6->Name = L"label6";
			this->label6->Size = System::Drawing::Size(191, 91);
			this->label6->TabIndex = 4;
			this->label6->Text = L"请注意:\r\n\r\n要使新增右键菜单生效,需要重新启\r\n\r\n动外壳程序,你可以点击下面的按钮\r\n\r\n以便快速重新启动.";
			// 
			// btn_other_menu_clear
			// 
			this->btn_other_menu_clear->Location = System::Drawing::Point(59, 185);
			this->btn_other_menu_clear->Name = L"btn_other_menu_clear";
			this->btn_other_menu_clear->Size = System::Drawing::Size(75, 23);
			this->btn_other_menu_clear->TabIndex = 5;
			this->btn_other_menu_clear->Text = L"清空";
			this->btn_other_menu_clear->UseVisualStyleBackColor = true;
			this->btn_other_menu_clear->Click += gcnew System::EventHandler(this, &Form1::btn_other_menu_clear_Click);
			// 
			// txt_other_menu_param
			// 
			this->txt_other_menu_param->Location = System::Drawing::Point(15, 148);
			this->txt_other_menu_param->Name = L"txt_other_menu_param";
			this->txt_other_menu_param->Size = System::Drawing::Size(185, 21);
			this->txt_other_menu_param->TabIndex = 3;
			this->txt_other_menu_param->Text = L"如\"%1\"";
			// 
			// txt_other_menu_path
			// 
			this->txt_other_menu_path->Location = System::Drawing::Point(15, 99);
			this->txt_other_menu_path->Name = L"txt_other_menu_path";
			this->txt_other_menu_path->Size = System::Drawing::Size(185, 21);
			this->txt_other_menu_path->TabIndex = 1;
			this->txt_other_menu_path->Text = L"如\"c:\\windows\\notepad.exe\"";
			// 
			// txt_other_menu_name
			// 
			this->txt_other_menu_name->Location = System::Drawing::Point(15, 50);
			this->txt_other_menu_name->Name = L"txt_other_menu_name";
			this->txt_other_menu_name->Size = System::Drawing::Size(119, 21);
			this->txt_other_menu_name->TabIndex = 0;
			this->txt_other_menu_name->Text = L"如“用记事本打开”";
			// 
			// label5
			// 
			this->label5->AutoSize = true;
			this->label5->Location = System::Drawing::Point(13, 133);
			this->label5->Name = L"label5";
			this->label5->Size = System::Drawing::Size(65, 12);
			this->label5->TabIndex = 1;
			this->label5->Text = L"传入参数：";
			// 
			// label4
			// 
			this->label4->AutoSize = true;
			this->label4->Location = System::Drawing::Point(13, 84);
			this->label4->Name = L"label4";
			this->label4->Size = System::Drawing::Size(89, 12);
			this->label4->TabIndex = 1;
			this->label4->Text = L"应用程序路径：";
			// 
			// label3
			// 
			this->label3->AutoSize = true;
			this->label3->Location = System::Drawing::Point(13, 35);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(77, 12);
			this->label3->TabIndex = 1;
			this->label3->Text = L"新增字段名：";
			// 
			// btn_other_menu_browse
			// 
			this->btn_other_menu_browse->Location = System::Drawing::Point(201, 98);
			this->btn_other_menu_browse->Name = L"btn_other_menu_browse";
			this->btn_other_menu_browse->Size = System::Drawing::Size(31, 23);
			this->btn_other_menu_browse->TabIndex = 2;
			this->btn_other_menu_browse->Text = L"...";
			this->btn_other_menu_browse->UseVisualStyleBackColor = true;
			this->btn_other_menu_browse->Click += gcnew System::EventHandler(this, &Form1::btn_other_menu_browse_Click);
			// 
			// btn_other_menu_ok
			// 
			this->btn_other_menu_ok->Location = System::Drawing::Point(157, 185);
			this->btn_other_menu_ok->Name = L"btn_other_menu_ok";
			this->btn_other_menu_ok->Size = System::Drawing::Size(75, 23);
			this->btn_other_menu_ok->TabIndex = 4;
			this->btn_other_menu_ok->Text = L"确定";
			this->btn_other_menu_ok->UseVisualStyleBackColor = true;
			this->btn_other_menu_ok->Click += gcnew System::EventHandler(this, &Form1::btn_other_menu_ok_Click);
			// 
			// tp_other_proxy
			// 
			this->tp_other_proxy->Controls->Add(this->lv_other_proxy);
			this->tp_other_proxy->Location = System::Drawing::Point(4, 21);
			this->tp_other_proxy->Name = L"tp_other_proxy";
			this->tp_other_proxy->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_proxy->Size = System::Drawing::Size(911, 454);
			this->tp_other_proxy->TabIndex = 3;
			this->tp_other_proxy->Text = L"IE代理";
			this->tp_other_proxy->UseVisualStyleBackColor = true;
			// 
			// lv_other_proxy
			// 
			this->lv_other_proxy->AllowColumnReorder = true;
			this->lv_other_proxy->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader115, 
				this->columnHeader116, this->columnHeader117, this->columnHeader118, this->columnHeader119});
			this->lv_other_proxy->ContextMenuStrip = this->cms_other_proxy;
			this->lv_other_proxy->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_proxy->FullRowSelect = true;
			this->lv_other_proxy->Location = System::Drawing::Point(3, 3);
			this->lv_other_proxy->MultiSelect = false;
			this->lv_other_proxy->Name = L"lv_other_proxy";
			this->lv_other_proxy->ShowItemToolTips = true;
			this->lv_other_proxy->Size = System::Drawing::Size(905, 448);
			this->lv_other_proxy->TabIndex = 2;
			this->lv_other_proxy->UseCompatibleStateImageBehavior = false;
			this->lv_other_proxy->View = System::Windows::Forms::View::Details;
			this->lv_other_proxy->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_other_proxy_ColumnClick);
			this->lv_other_proxy->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_proxy_ItemDrag);
			this->lv_other_proxy->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_proxy_MouseUp);
			// 
			// columnHeader115
			// 
			this->columnHeader115->Text = L"地址";
			this->columnHeader115->Width = 187;
			// 
			// columnHeader116
			// 
			this->columnHeader116->Text = L"类型";
			this->columnHeader116->Width = 87;
			// 
			// columnHeader117
			// 
			this->columnHeader117->Text = L"速度";
			this->columnHeader117->Width = 153;
			// 
			// columnHeader118
			// 
			this->columnHeader118->Text = L"所在地";
			this->columnHeader118->Width = 284;
			// 
			// columnHeader119
			// 
			this->columnHeader119->Text = L"可用性";
			this->columnHeader119->Width = 113;
			// 
			// cms_other_proxy
			// 
			this->cms_other_proxy->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(12) {this->cms_other_proxy_refresh, 
				this->toolStripSeparator58, this->cms_other_proxy_http, this->cms_other_proxy_edu, this->toolStripSeparator59, this->cms_other_proxy_check, 
				this->cms_other_proxy_checkAll, this->toolStripSeparator60, this->cms_other_proxy_use, this->cms_other_proxy_quit, this->toolStripSeparator62, 
				this->cms_other_proxy_export});
			this->cms_other_proxy->Name = L"cms_other_proxy";
			this->cms_other_proxy->Size = System::Drawing::Size(179, 204);
			// 
			// cms_other_proxy_refresh
			// 
			this->cms_other_proxy_refresh->Name = L"cms_other_proxy_refresh";
			this->cms_other_proxy_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_refresh->Text = L"刷新";
			this->cms_other_proxy_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_refresh_Click);
			// 
			// toolStripSeparator58
			// 
			this->toolStripSeparator58->Name = L"toolStripSeparator58";
			this->toolStripSeparator58->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_proxy_http
			// 
			this->cms_other_proxy_http->Name = L"cms_other_proxy_http";
			this->cms_other_proxy_http->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_http->Text = L"http代理";
			this->cms_other_proxy_http->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_http_Click);
			// 
			// cms_other_proxy_edu
			// 
			this->cms_other_proxy_edu->Name = L"cms_other_proxy_edu";
			this->cms_other_proxy_edu->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_edu->Text = L"教育网代理";
			this->cms_other_proxy_edu->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_edu_Click);
			// 
			// toolStripSeparator59
			// 
			this->toolStripSeparator59->Name = L"toolStripSeparator59";
			this->toolStripSeparator59->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_proxy_check
			// 
			this->cms_other_proxy_check->Name = L"cms_other_proxy_check";
			this->cms_other_proxy_check->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_check->Text = L"检测代理可用性";
			this->cms_other_proxy_check->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_check_Click);
			// 
			// cms_other_proxy_checkAll
			// 
			this->cms_other_proxy_checkAll->Name = L"cms_other_proxy_checkAll";
			this->cms_other_proxy_checkAll->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_checkAll->Text = L"检测所用代理可用性";
			this->cms_other_proxy_checkAll->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_checkAll_Click);
			// 
			// toolStripSeparator60
			// 
			this->toolStripSeparator60->Name = L"toolStripSeparator60";
			this->toolStripSeparator60->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_proxy_use
			// 
			this->cms_other_proxy_use->Name = L"cms_other_proxy_use";
			this->cms_other_proxy_use->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_use->Text = L"使用此代理";
			this->cms_other_proxy_use->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_use_Click);
			// 
			// cms_other_proxy_quit
			// 
			this->cms_other_proxy_quit->Name = L"cms_other_proxy_quit";
			this->cms_other_proxy_quit->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_quit->Text = L"取消代理";
			this->cms_other_proxy_quit->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_quit_Click);
			// 
			// toolStripSeparator62
			// 
			this->toolStripSeparator62->Name = L"toolStripSeparator62";
			this->toolStripSeparator62->Size = System::Drawing::Size(175, 6);
			// 
			// cms_other_proxy_export
			// 
			this->cms_other_proxy_export->Name = L"cms_other_proxy_export";
			this->cms_other_proxy_export->Size = System::Drawing::Size(178, 22);
			this->cms_other_proxy_export->Text = L"导出";
			this->cms_other_proxy_export->Click += gcnew System::EventHandler(this, &Form1::cms_other_proxy_export_Click);
			// 
			// tp_other_sigverif
			// 
			this->tp_other_sigverif->Controls->Add(this->lv_other_sigverif);
			this->tp_other_sigverif->Location = System::Drawing::Point(4, 21);
			this->tp_other_sigverif->Name = L"tp_other_sigverif";
			this->tp_other_sigverif->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_sigverif->Size = System::Drawing::Size(911, 454);
			this->tp_other_sigverif->TabIndex = 4;
			this->tp_other_sigverif->Text = L"数字签名";
			this->tp_other_sigverif->UseVisualStyleBackColor = true;
			// 
			// lv_other_sigverif
			// 
			this->lv_other_sigverif->AllowColumnReorder = true;
			this->lv_other_sigverif->AllowDrop = true;
			this->lv_other_sigverif->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader120, 
				this->columnHeader121, this->columnHeader122, this->columnHeader123, this->columnHeader124});
			this->lv_other_sigverif->ContextMenuStrip = this->cms_other_sigverif;
			this->lv_other_sigverif->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_sigverif->FullRowSelect = true;
			this->lv_other_sigverif->Location = System::Drawing::Point(3, 3);
			this->lv_other_sigverif->MultiSelect = false;
			this->lv_other_sigverif->Name = L"lv_other_sigverif";
			this->lv_other_sigverif->ShowItemToolTips = true;
			this->lv_other_sigverif->Size = System::Drawing::Size(905, 448);
			this->lv_other_sigverif->TabIndex = 2;
			this->lv_other_sigverif->UseCompatibleStateImageBehavior = false;
			this->lv_other_sigverif->View = System::Windows::Forms::View::Details;
			this->lv_other_sigverif->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_other_sigverif_ColumnClick);
			this->lv_other_sigverif->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_sigverif_ItemDrag);
			this->lv_other_sigverif->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_other_sigverif_DragDrop);
			this->lv_other_sigverif->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_other_sigverif_DragEnter);
			this->lv_other_sigverif->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_sigverif_MouseUp);
			// 
			// columnHeader120
			// 
			this->columnHeader120->Text = L"文件名";
			this->columnHeader120->Width = 157;
			// 
			// columnHeader121
			// 
			this->columnHeader121->Text = L"文件路径";
			this->columnHeader121->Width = 263;
			// 
			// columnHeader122
			// 
			this->columnHeader122->Text = L"是否签名";
			this->columnHeader122->Width = 86;
			// 
			// columnHeader123
			// 
			this->columnHeader123->Text = L"文件厂商";
			this->columnHeader123->Width = 171;
			// 
			// columnHeader124
			// 
			this->columnHeader124->Text = L"数字签名厂商";
			this->columnHeader124->Width = 200;
			// 
			// cms_other_sigverif
			// 
			this->cms_other_sigverif->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(11) {this->cms_other_sigverif_openFile, 
				this->cms_other_sigverif_openFolder, this->cms_other_sigverif_openFolder2, this->toolStripSeparator64, this->cms_other_sigverif_clear, 
				this->toolStripSeparator164, this->cms_other_sigverif_explorer, this->cms_other_sigverif_explorer2, this->cm_other_sigverif_showProperty, 
				this->toolStripSeparator65, this->cms_other_sigverif_export});
			this->cms_other_sigverif->Name = L"cms_other_sigverif";
			this->cms_other_sigverif->Size = System::Drawing::Size(215, 198);
			// 
			// cms_other_sigverif_openFile
			// 
			this->cms_other_sigverif_openFile->Name = L"cms_other_sigverif_openFile";
			this->cms_other_sigverif_openFile->Size = System::Drawing::Size(214, 22);
			this->cms_other_sigverif_openFile->Text = L"打开";
			this->cms_other_sigverif_openFile->Click += gcnew System::EventHandler(this, &Form1::cms_other_sigverif_openFile_Click);
			// 
			// cms_other_sigverif_openFolder
			// 
			this->cms_other_sigverif_openFolder->Name = L"cms_other_sigverif_openFolder";
			this->cms_other_sigverif_openFolder->Size = System::Drawing::Size(214, 22);
			this->cms_other_sigverif_openFolder->Text = L"打开文件夹";
			this->cms_other_sigverif_openFolder->Click += gcnew System::EventHandler(this, &Form1::cms_other_sigverif_openFolder_Click);
			// 
			// cms_other_sigverif_openFolder2
			// 
			this->cms_other_sigverif_openFolder2->Name = L"cms_other_sigverif_openFolder2";
			this->cms_other_sigverif_openFolder2->Size = System::Drawing::Size(214, 22);
			this->cms_other_sigverif_openFolder2->Text = L"打开文件夹(包括子文件夹)";
			this->cms_other_sigverif_openFolder2->Click += gcnew System::EventHandler(this, &Form1::cms_other_sigverif_openFolder2_Click);
			// 
			// toolStripSeparator64
			// 
			this->toolStripSeparator64->Name = L"toolStripSeparator64";
			this->toolStripSeparator64->Size = System::Drawing::Size(211, 6);
			// 
			// cms_other_sigverif_clear
			// 
			this->cms_other_sigverif_clear->Name = L"cms_other_sigverif_clear";
			this->cms_other_sigverif_clear->Size = System::Drawing::Size(214, 22);
			this->cms_other_sigverif_clear->Text = L"清空";
			this->cms_other_sigverif_clear->Click += gcnew System::EventHandler(this, &Form1::cms_other_sigverif_clear_Click);
			// 
			// toolStripSeparator164
			// 
			this->toolStripSeparator164->Name = L"toolStripSeparator164";
			this->toolStripSeparator164->Size = System::Drawing::Size(211, 6);
			// 
			// cms_other_sigverif_explorer
			// 
			this->cms_other_sigverif_explorer->Name = L"cms_other_sigverif_explorer";
			this->cms_other_sigverif_explorer->Size = System::Drawing::Size(214, 22);
			this->cms_other_sigverif_explorer->Text = L"定位到映像文件";
			this->cms_other_sigverif_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_other_sigverif_explorer_Click);
			// 
			// cms_other_sigverif_explorer2
			// 
			this->cms_other_sigverif_explorer2->Name = L"cms_other_sigverif_explorer2";
			this->cms_other_sigverif_explorer2->Size = System::Drawing::Size(214, 22);
			this->cms_other_sigverif_explorer2->Text = L"定位到映像文件2";
			this->cms_other_sigverif_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_other_sigverif_explorer2_Click);
			// 
			// cm_other_sigverif_showProperty
			// 
			this->cm_other_sigverif_showProperty->Name = L"cm_other_sigverif_showProperty";
			this->cm_other_sigverif_showProperty->Size = System::Drawing::Size(214, 22);
			this->cm_other_sigverif_showProperty->Text = L"查看映像文件属性";
			this->cm_other_sigverif_showProperty->Click += gcnew System::EventHandler(this, &Form1::cm_other_sigverif_showProperty_Click);
			// 
			// toolStripSeparator65
			// 
			this->toolStripSeparator65->Name = L"toolStripSeparator65";
			this->toolStripSeparator65->Size = System::Drawing::Size(211, 6);
			// 
			// cms_other_sigverif_export
			// 
			this->cms_other_sigverif_export->Name = L"cms_other_sigverif_export";
			this->cms_other_sigverif_export->Size = System::Drawing::Size(214, 22);
			this->cms_other_sigverif_export->Text = L"导出";
			this->cms_other_sigverif_export->Click += gcnew System::EventHandler(this, &Form1::cms_other_sigverif_export_Click);
			// 
			// tp_other_mbr
			// 
			this->tp_other_mbr->Controls->Add(this->lv_other_mbr);
			this->tp_other_mbr->Location = System::Drawing::Point(4, 21);
			this->tp_other_mbr->Name = L"tp_other_mbr";
			this->tp_other_mbr->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_mbr->Size = System::Drawing::Size(911, 454);
			this->tp_other_mbr->TabIndex = 5;
			this->tp_other_mbr->Text = L"MBR备份与恢复";
			this->tp_other_mbr->UseVisualStyleBackColor = true;
			// 
			// lv_other_mbr
			// 
			this->lv_other_mbr->AllowColumnReorder = true;
			this->lv_other_mbr->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(4) {this->columnHeader125, 
				this->columnHeader126, this->columnHeader127, this->columnHeader128});
			this->lv_other_mbr->ContextMenuStrip = this->cms_other_mbr;
			this->lv_other_mbr->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_mbr->FullRowSelect = true;
			this->lv_other_mbr->Location = System::Drawing::Point(3, 3);
			this->lv_other_mbr->MultiSelect = false;
			this->lv_other_mbr->Name = L"lv_other_mbr";
			this->lv_other_mbr->ShowItemToolTips = true;
			this->lv_other_mbr->Size = System::Drawing::Size(905, 448);
			this->lv_other_mbr->TabIndex = 2;
			this->lv_other_mbr->UseCompatibleStateImageBehavior = false;
			this->lv_other_mbr->View = System::Windows::Forms::View::Details;
			this->lv_other_mbr->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_other_mbr_ColumnClick);
			this->lv_other_mbr->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_mbr_ItemDrag);
			this->lv_other_mbr->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_mbr_MouseUp);
			// 
			// columnHeader125
			// 
			this->columnHeader125->Text = L"地址";
			this->columnHeader125->Width = 112;
			// 
			// columnHeader126
			// 
			this->columnHeader126->Text = L"二进制";
			this->columnHeader126->Width = 202;
			// 
			// columnHeader127
			// 
			this->columnHeader127->Text = L"反汇编";
			this->columnHeader127->Width = 302;
			// 
			// columnHeader128
			// 
			this->columnHeader128->Text = L"备注";
			this->columnHeader128->Width = 232;
			// 
			// cms_other_mbr
			// 
			this->cms_other_mbr->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(8) {this->cms_other_mbr_refresh, 
				this->toolStripSeparator55, this->cms_other_mbr_choose, this->toolStripSeparator56, this->cms_other_mbr_save, this->cms_other_mbr_recover, 
				this->toolStripSeparator57, this->cms_other_mbr_export});
			this->cms_other_mbr->Name = L"cms_other_mbr";
			this->cms_other_mbr->Size = System::Drawing::Size(149, 132);
			// 
			// cms_other_mbr_refresh
			// 
			this->cms_other_mbr_refresh->Name = L"cms_other_mbr_refresh";
			this->cms_other_mbr_refresh->Size = System::Drawing::Size(148, 22);
			this->cms_other_mbr_refresh->Text = L"刷新";
			this->cms_other_mbr_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_other_mbr_refresh_Click);
			// 
			// toolStripSeparator55
			// 
			this->toolStripSeparator55->Name = L"toolStripSeparator55";
			this->toolStripSeparator55->Size = System::Drawing::Size(145, 6);
			// 
			// cms_other_mbr_choose
			// 
			this->cms_other_mbr_choose->Name = L"cms_other_mbr_choose";
			this->cms_other_mbr_choose->Size = System::Drawing::Size(148, 22);
			this->cms_other_mbr_choose->Text = L"选择磁盘";
			// 
			// toolStripSeparator56
			// 
			this->toolStripSeparator56->Name = L"toolStripSeparator56";
			this->toolStripSeparator56->Size = System::Drawing::Size(145, 6);
			// 
			// cms_other_mbr_save
			// 
			this->cms_other_mbr_save->Name = L"cms_other_mbr_save";
			this->cms_other_mbr_save->Size = System::Drawing::Size(148, 22);
			this->cms_other_mbr_save->Text = L"备份MBR";
			this->cms_other_mbr_save->Click += gcnew System::EventHandler(this, &Form1::cms_other_mbr_save_Click);
			// 
			// cms_other_mbr_recover
			// 
			this->cms_other_mbr_recover->Name = L"cms_other_mbr_recover";
			this->cms_other_mbr_recover->Size = System::Drawing::Size(148, 22);
			this->cms_other_mbr_recover->Text = L"恢复MBR(慎重)";
			this->cms_other_mbr_recover->Click += gcnew System::EventHandler(this, &Form1::cms_other_mbr_recover_Click);
			// 
			// toolStripSeparator57
			// 
			this->toolStripSeparator57->Name = L"toolStripSeparator57";
			this->toolStripSeparator57->Size = System::Drawing::Size(145, 6);
			// 
			// cms_other_mbr_export
			// 
			this->cms_other_mbr_export->Name = L"cms_other_mbr_export";
			this->cms_other_mbr_export->Size = System::Drawing::Size(148, 22);
			this->cms_other_mbr_export->Text = L"导出";
			this->cms_other_mbr_export->Click += gcnew System::EventHandler(this, &Form1::cms_other_mbr_export_Click);
			// 
			// tp_other_share
			// 
			this->tp_other_share->Controls->Add(this->lv_other_share);
			this->tp_other_share->Location = System::Drawing::Point(4, 21);
			this->tp_other_share->Name = L"tp_other_share";
			this->tp_other_share->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_share->Size = System::Drawing::Size(911, 454);
			this->tp_other_share->TabIndex = 6;
			this->tp_other_share->Text = L"共享";
			this->tp_other_share->UseVisualStyleBackColor = true;
			// 
			// lv_other_share
			// 
			this->lv_other_share->AllowColumnReorder = true;
			this->lv_other_share->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(4) {this->columnHeader159, 
				this->columnHeader160, this->columnHeader161, this->columnHeader168});
			this->lv_other_share->ContextMenuStrip = this->cms_other_share;
			this->lv_other_share->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_share->FullRowSelect = true;
			this->lv_other_share->Location = System::Drawing::Point(3, 3);
			this->lv_other_share->MultiSelect = false;
			this->lv_other_share->Name = L"lv_other_share";
			this->lv_other_share->ShowItemToolTips = true;
			this->lv_other_share->Size = System::Drawing::Size(905, 448);
			this->lv_other_share->TabIndex = 1;
			this->lv_other_share->UseCompatibleStateImageBehavior = false;
			this->lv_other_share->View = System::Windows::Forms::View::Details;
			this->lv_other_share->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_other_share_ColumnClick);
			this->lv_other_share->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_share_ItemDrag);
			this->lv_other_share->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_share_MouseUp);
			// 
			// columnHeader159
			// 
			this->columnHeader159->Text = L"名称";
			this->columnHeader159->Width = 148;
			// 
			// columnHeader160
			// 
			this->columnHeader160->Text = L"描述";
			this->columnHeader160->Width = 194;
			// 
			// columnHeader161
			// 
			this->columnHeader161->Text = L"映像路径";
			this->columnHeader161->Width = 417;
			// 
			// columnHeader168
			// 
			this->columnHeader168->Text = L"状态";
			this->columnHeader168->Width = 106;
			// 
			// cms_other_share
			// 
			this->cms_other_share->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(9) {this->cms_other_share_refresh, 
				this->toolStripSeparator47, this->cms_other_share_create, this->cms_other_share_delete, this->toolStripSeparator72, this->cms_other_share_explorer, 
				this->cm_other_share_showProperty, this->toolStripSeparator73, this->cm_other_share_export});
			this->cms_other_share->Name = L"cms_other_sigverif";
			this->cms_other_share->Size = System::Drawing::Size(167, 154);
			// 
			// cms_other_share_refresh
			// 
			this->cms_other_share_refresh->Name = L"cms_other_share_refresh";
			this->cms_other_share_refresh->Size = System::Drawing::Size(166, 22);
			this->cms_other_share_refresh->Text = L"刷新";
			this->cms_other_share_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_other_share_refresh_Click);
			// 
			// toolStripSeparator47
			// 
			this->toolStripSeparator47->Name = L"toolStripSeparator47";
			this->toolStripSeparator47->Size = System::Drawing::Size(163, 6);
			// 
			// cms_other_share_create
			// 
			this->cms_other_share_create->Name = L"cms_other_share_create";
			this->cms_other_share_create->Size = System::Drawing::Size(166, 22);
			this->cms_other_share_create->Text = L"创建";
			this->cms_other_share_create->Click += gcnew System::EventHandler(this, &Form1::cms_other_share_create_Click);
			// 
			// cms_other_share_delete
			// 
			this->cms_other_share_delete->Name = L"cms_other_share_delete";
			this->cms_other_share_delete->Size = System::Drawing::Size(166, 22);
			this->cms_other_share_delete->Text = L"删除";
			this->cms_other_share_delete->Click += gcnew System::EventHandler(this, &Form1::cms_other_share_delete_Click);
			// 
			// toolStripSeparator72
			// 
			this->toolStripSeparator72->Name = L"toolStripSeparator72";
			this->toolStripSeparator72->Size = System::Drawing::Size(163, 6);
			// 
			// cms_other_share_explorer
			// 
			this->cms_other_share_explorer->Name = L"cms_other_share_explorer";
			this->cms_other_share_explorer->Size = System::Drawing::Size(166, 22);
			this->cms_other_share_explorer->Text = L"定位到共享目录";
			this->cms_other_share_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_other_share_explorer_Click);
			// 
			// cm_other_share_showProperty
			// 
			this->cm_other_share_showProperty->Name = L"cm_other_share_showProperty";
			this->cm_other_share_showProperty->Size = System::Drawing::Size(166, 22);
			this->cm_other_share_showProperty->Text = L"查看共享目录属性";
			this->cm_other_share_showProperty->Click += gcnew System::EventHandler(this, &Form1::cm_other_share_showProperty_Click);
			// 
			// toolStripSeparator73
			// 
			this->toolStripSeparator73->Name = L"toolStripSeparator73";
			this->toolStripSeparator73->Size = System::Drawing::Size(163, 6);
			// 
			// cm_other_share_export
			// 
			this->cm_other_share_export->Name = L"cm_other_share_export";
			this->cm_other_share_export->Size = System::Drawing::Size(166, 22);
			this->cm_other_share_export->Text = L"导出";
			this->cm_other_share_export->Click += gcnew System::EventHandler(this, &Form1::cm_other_share_export_Click);
			// 
			// tp_other_user
			// 
			this->tp_other_user->Controls->Add(this->lv_other_user);
			this->tp_other_user->Location = System::Drawing::Point(4, 21);
			this->tp_other_user->Name = L"tp_other_user";
			this->tp_other_user->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_user->Size = System::Drawing::Size(911, 454);
			this->tp_other_user->TabIndex = 7;
			this->tp_other_user->Text = L"用户";
			this->tp_other_user->UseVisualStyleBackColor = true;
			// 
			// lv_other_user
			// 
			this->lv_other_user->AllowColumnReorder = true;
			this->lv_other_user->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(7) {this->columnHeader162, 
				this->columnHeader163, this->columnHeader164, this->columnHeader165, this->columnHeader166, this->columnHeader170, this->columnHeader169});
			this->lv_other_user->ContextMenuStrip = this->cms_other_user;
			this->lv_other_user->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_other_user->FullRowSelect = true;
			this->lv_other_user->Location = System::Drawing::Point(3, 3);
			this->lv_other_user->MultiSelect = false;
			this->lv_other_user->Name = L"lv_other_user";
			this->lv_other_user->ShowItemToolTips = true;
			this->lv_other_user->Size = System::Drawing::Size(905, 448);
			this->lv_other_user->TabIndex = 2;
			this->lv_other_user->UseCompatibleStateImageBehavior = false;
			this->lv_other_user->View = System::Windows::Forms::View::Details;
			this->lv_other_user->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_other_user_ColumnClick);
			this->lv_other_user->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_other_user_ItemDrag);
			this->lv_other_user->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_other_user_MouseUp);
			// 
			// columnHeader162
			// 
			this->columnHeader162->Text = L"用户";
			this->columnHeader162->Width = 129;
			// 
			// columnHeader163
			// 
			this->columnHeader163->Text = L"描述";
			this->columnHeader163->Width = 229;
			// 
			// columnHeader164
			// 
			this->columnHeader164->Text = L"组";
			this->columnHeader164->Width = 136;
			// 
			// columnHeader165
			// 
			this->columnHeader165->Text = L"域";
			this->columnHeader165->Width = 135;
			// 
			// columnHeader166
			// 
			this->columnHeader166->Text = L"禁用(Y/N)";
			this->columnHeader166->Width = 79;
			// 
			// columnHeader170
			// 
			this->columnHeader170->Text = L"锁定(Y/N)";
			this->columnHeader170->Width = 77;
			// 
			// columnHeader169
			// 
			this->columnHeader169->Text = L"状态";
			this->columnHeader169->Width = 86;
			// 
			// cms_other_user
			// 
			this->cms_other_user->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(11) {this->cms_other_user_refresh, 
				this->toolStripSeparator108, this->cms_other_user_change, this->toolStripSeparator74, this->cms_other_user_start, this->cms_other_user_disable, 
				this->toolStripSeparator109, this->cms_other_user_create, this->cms_other_user_delete, this->toolStripSeparator75, this->cms_other_user_export});
			this->cms_other_user->Name = L"cms_other_sigverif";
			this->cms_other_user->Size = System::Drawing::Size(119, 182);
			// 
			// cms_other_user_refresh
			// 
			this->cms_other_user_refresh->Name = L"cms_other_user_refresh";
			this->cms_other_user_refresh->Size = System::Drawing::Size(118, 22);
			this->cms_other_user_refresh->Text = L"刷新";
			this->cms_other_user_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_other_user_refresh_Click);
			// 
			// toolStripSeparator108
			// 
			this->toolStripSeparator108->Name = L"toolStripSeparator108";
			this->toolStripSeparator108->Size = System::Drawing::Size(115, 6);
			// 
			// cms_other_user_change
			// 
			this->cms_other_user_change->Name = L"cms_other_user_change";
			this->cms_other_user_change->Size = System::Drawing::Size(118, 22);
			this->cms_other_user_change->Text = L"更改密码";
			this->cms_other_user_change->Click += gcnew System::EventHandler(this, &Form1::cms_other_user_change_Click);
			// 
			// toolStripSeparator74
			// 
			this->toolStripSeparator74->Name = L"toolStripSeparator74";
			this->toolStripSeparator74->Size = System::Drawing::Size(115, 6);
			// 
			// cms_other_user_start
			// 
			this->cms_other_user_start->Name = L"cms_other_user_start";
			this->cms_other_user_start->Size = System::Drawing::Size(118, 22);
			this->cms_other_user_start->Text = L"启用";
			this->cms_other_user_start->Click += gcnew System::EventHandler(this, &Form1::cms_other_user_start_Click);
			// 
			// cms_other_user_disable
			// 
			this->cms_other_user_disable->Name = L"cms_other_user_disable";
			this->cms_other_user_disable->Size = System::Drawing::Size(118, 22);
			this->cms_other_user_disable->Text = L"禁用";
			this->cms_other_user_disable->Click += gcnew System::EventHandler(this, &Form1::cms_other_user_disable_Click);
			// 
			// toolStripSeparator109
			// 
			this->toolStripSeparator109->Name = L"toolStripSeparator109";
			this->toolStripSeparator109->Size = System::Drawing::Size(115, 6);
			// 
			// cms_other_user_create
			// 
			this->cms_other_user_create->Name = L"cms_other_user_create";
			this->cms_other_user_create->Size = System::Drawing::Size(118, 22);
			this->cms_other_user_create->Text = L"创建";
			this->cms_other_user_create->Click += gcnew System::EventHandler(this, &Form1::cms_other_user_create_Click);
			// 
			// cms_other_user_delete
			// 
			this->cms_other_user_delete->Name = L"cms_other_user_delete";
			this->cms_other_user_delete->Size = System::Drawing::Size(118, 22);
			this->cms_other_user_delete->Text = L"删除";
			this->cms_other_user_delete->Click += gcnew System::EventHandler(this, &Form1::cms_other_user_delete_Click);
			// 
			// toolStripSeparator75
			// 
			this->toolStripSeparator75->Name = L"toolStripSeparator75";
			this->toolStripSeparator75->Size = System::Drawing::Size(115, 6);
			// 
			// cms_other_user_export
			// 
			this->cms_other_user_export->Name = L"cms_other_user_export";
			this->cms_other_user_export->Size = System::Drawing::Size(118, 22);
			this->cms_other_user_export->Text = L"导出";
			this->cms_other_user_export->Click += gcnew System::EventHandler(this, &Form1::cms_other_user_export_Click);
			// 
			// tp_other_clean
			// 
			this->tp_other_clean->Controls->Add(this->splitContainer7);
			this->tp_other_clean->Location = System::Drawing::Point(4, 21);
			this->tp_other_clean->Name = L"tp_other_clean";
			this->tp_other_clean->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_clean->Size = System::Drawing::Size(911, 454);
			this->tp_other_clean->TabIndex = 8;
			this->tp_other_clean->Text = L"垃圾清理";
			this->tp_other_clean->UseVisualStyleBackColor = true;
			// 
			// splitContainer7
			// 
			this->splitContainer7->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer7->Location = System::Drawing::Point(3, 3);
			this->splitContainer7->Name = L"splitContainer7";
			this->splitContainer7->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer7.Panel1
			// 
			this->splitContainer7->Panel1->Controls->Add(this->splitContainer8);
			// 
			// splitContainer7.Panel2
			// 
			this->splitContainer7->Panel2->Controls->Add(this->lbl_other_clean_reset);
			this->splitContainer7->Panel2->Controls->Add(this->lbl_other_clean_set);
			this->splitContainer7->Panel2->Controls->Add(this->lbl_other_clean_recommend);
			this->splitContainer7->Panel2->Controls->Add(this->lbl_other_clean_noall);
			this->splitContainer7->Panel2->Controls->Add(this->lbl_other_clean_all);
			this->splitContainer7->Size = System::Drawing::Size(905, 448);
			this->splitContainer7->SplitterDistance = 403;
			this->splitContainer7->TabIndex = 1;
			// 
			// splitContainer8
			// 
			this->splitContainer8->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer8->Location = System::Drawing::Point(0, 0);
			this->splitContainer8->Name = L"splitContainer8";
			this->splitContainer8->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer8.Panel1
			// 
			this->splitContainer8->Panel1->Controls->Add(this->btn_other_clean);
			this->splitContainer8->Panel1->Controls->Add(this->lbl_other_clean_msg);
			// 
			// splitContainer8.Panel2
			// 
			this->splitContainer8->Panel2->Controls->Add(this->tv_other_clean);
			this->splitContainer8->Size = System::Drawing::Size(905, 403);
			this->splitContainer8->SplitterDistance = 43;
			this->splitContainer8->TabIndex = 0;
			// 
			// btn_other_clean
			// 
			this->btn_other_clean->Location = System::Drawing::Point(726, 9);
			this->btn_other_clean->Name = L"btn_other_clean";
			this->btn_other_clean->Size = System::Drawing::Size(75, 23);
			this->btn_other_clean->TabIndex = 2;
			this->btn_other_clean->Text = L"开始扫描";
			this->btn_other_clean->UseVisualStyleBackColor = true;
			this->btn_other_clean->Click += gcnew System::EventHandler(this, &Form1::btn_other_clean_Click);
			// 
			// lbl_other_clean_msg
			// 
			this->lbl_other_clean_msg->Location = System::Drawing::Point(40, 14);
			this->lbl_other_clean_msg->Name = L"lbl_other_clean_msg";
			this->lbl_other_clean_msg->Size = System::Drawing::Size(653, 12);
			this->lbl_other_clean_msg->TabIndex = 1;
			this->lbl_other_clean_msg->Text = L"清理垃圾，提升系统性能；信不信由你，反正我信了";
			// 
			// tv_other_clean
			// 
			this->tv_other_clean->CheckBoxes = true;
			this->tv_other_clean->ContextMenuStrip = this->cms_other_clean_trace;
			this->tv_other_clean->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tv_other_clean->Indent = 19;
			this->tv_other_clean->ItemHeight = 18;
			this->tv_other_clean->Location = System::Drawing::Point(0, 0);
			this->tv_other_clean->Name = L"tv_other_clean";
			treeNode1->Name = L"系统临时文件";
			treeNode1->Tag = L"";
			treeNode1->Text = L"系统临时文件";
			treeNode2->Name = L"无效的快捷方式";
			treeNode2->Tag = L"";
			treeNode2->Text = L"无效的快捷方式";
			treeNode3->Name = L"缩略图缓存文件";
			treeNode3->Tag = L"";
			treeNode3->Text = L"缩略图缓存文件";
			treeNode4->Name = L"内存转储文件";
			treeNode4->Tag = L"";
			treeNode4->Text = L"内存转储文件";
			treeNode5->Name = L"Windows错误报告";
			treeNode5->Tag = L"";
			treeNode5->Text = L"Windows错误报告";
			treeNode6->Name = L"系统自动更新时留下的补丁";
			treeNode6->Tag = L"";
			treeNode6->Text = L"系统自动更新时留下的补丁";
			treeNode7->Name = L"系统打补丁时留下的卸载信息(谨慎)";
			treeNode7->Tag = L"";
			treeNode7->Text = L"系统打补丁时留下的卸载信息(谨慎)";
			treeNode8->Name = L"Windows预读取文件";
			treeNode8->Tag = L"";
			treeNode8->Text = L"Windows预读取文件";
			treeNode9->Name = L"已下载的程序文件";
			treeNode9->Tag = L"";
			treeNode9->Text = L"已下载的程序文件";
			treeNode10->Name = L"日志文件";
			treeNode10->Tag = L"";
			treeNode10->Text = L"日志文件";
			treeNode11->Name = L"清理回收站";
			treeNode11->Tag = L"";
			treeNode11->Text = L"清理回收站";
			treeNode12->Name = L"清理指定文件夹中指定类型的垃圾文件";
			treeNode12->Tag = L"";
			treeNode12->Text = L"清理指定文件夹中指定类型的垃圾文件";
			treeNode13->Name = L"tv_other_clean_windows";
			treeNode13->Text = L"Windows系统垃圾文件";
			treeNode13->ToolTipText = L"定期清理系统中垃圾文件，让系统运行更流畅。";
			treeNode14->Name = L"IE浏览器缓存文件";
			treeNode14->Tag = L"";
			treeNode14->Text = L"IE浏览器缓存文件";
			treeNode15->Name = L"Chrome浏览器缓存文件";
			treeNode15->Tag = L"";
			treeNode15->Text = L"Chrome浏览器缓存文件";
			treeNode16->Name = L"FireFox浏览器缓存文件";
			treeNode16->Tag = L"";
			treeNode16->Text = L"FireFox浏览器缓存文件";
			treeNode17->Name = L"Opera浏览器缓存文件";
			treeNode17->Tag = L"";
			treeNode17->Text = L"Opera浏览器缓存文件";
			treeNode18->Name = L"tv_other_clean_net";
			treeNode18->Text = L"上网浏览产生的垃圾文件";
			treeNode18->ToolTipText = L"清理上网浏览时产生的垃圾文件，可以加快上网速度。";
			treeNode19->Name = L"Office安装文件";
			treeNode19->Tag = L"";
			treeNode19->Text = L"Office安装文件";
			treeNode20->Name = L"tv_other_clean_app";
			treeNode20->Text = L"应用程序垃圾文件";
			treeNode20->ToolTipText = L"清理系统第三方软件产生的垃圾文件，节约磁盘空间。";
			this->tv_other_clean->Nodes->AddRange(gcnew cli::array< System::Windows::Forms::TreeNode^  >(3) {treeNode13, treeNode18, 
				treeNode20});
			this->tv_other_clean->ShowLines = false;
			this->tv_other_clean->ShowNodeToolTips = true;
			this->tv_other_clean->Size = System::Drawing::Size(905, 356);
			this->tv_other_clean->TabIndex = 0;
			this->tv_other_clean->NodeMouseClick += gcnew System::Windows::Forms::TreeNodeMouseClickEventHandler(this, &Form1::tv_other_clean_NodeMouseClick);
			this->tv_other_clean->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::tv_other_clean_MouseUp);
			// 
			// cms_other_clean_trace
			// 
			this->cms_other_clean_trace->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(1) {this->cms_other_clean_trace_view});
			this->cms_other_clean_trace->Name = L"cms_other_clean_trace";
			this->cms_other_clean_trace->Size = System::Drawing::Size(119, 26);
			// 
			// cms_other_clean_trace_view
			// 
			this->cms_other_clean_trace_view->Name = L"cms_other_clean_trace_view";
			this->cms_other_clean_trace_view->Size = System::Drawing::Size(118, 22);
			this->cms_other_clean_trace_view->Text = L"查看详细";
			this->cms_other_clean_trace_view->Click += gcnew System::EventHandler(this, &Form1::cms_other_clean_trace_view_Click);
			// 
			// lbl_other_clean_reset
			// 
			this->lbl_other_clean_reset->AutoSize = true;
			this->lbl_other_clean_reset->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_clean_reset->Location = System::Drawing::Point(314, 12);
			this->lbl_other_clean_reset->Name = L"lbl_other_clean_reset";
			this->lbl_other_clean_reset->Size = System::Drawing::Size(101, 12);
			this->lbl_other_clean_reset->TabIndex = 4;
			this->lbl_other_clean_reset->Text = L"重新选择扫描项目";
			this->lbl_other_clean_reset->Visible = false;
			this->lbl_other_clean_reset->Click += gcnew System::EventHandler(this, &Form1::lbl_other_clean_reset_Click);
			// 
			// lbl_other_clean_set
			// 
			this->lbl_other_clean_set->AutoSize = true;
			this->lbl_other_clean_set->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_clean_set->Location = System::Drawing::Point(245, 12);
			this->lbl_other_clean_set->Name = L"lbl_other_clean_set";
			this->lbl_other_clean_set->Size = System::Drawing::Size(29, 12);
			this->lbl_other_clean_set->TabIndex = 0;
			this->lbl_other_clean_set->Text = L"设置";
			this->lbl_other_clean_set->Click += gcnew System::EventHandler(this, &Form1::lbl_other_clean_set_Click);
			// 
			// lbl_other_clean_recommend
			// 
			this->lbl_other_clean_recommend->AutoSize = true;
			this->lbl_other_clean_recommend->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_clean_recommend->Location = System::Drawing::Point(131, 12);
			this->lbl_other_clean_recommend->Name = L"lbl_other_clean_recommend";
			this->lbl_other_clean_recommend->Size = System::Drawing::Size(53, 12);
			this->lbl_other_clean_recommend->TabIndex = 0;
			this->lbl_other_clean_recommend->Text = L"推荐选项";
			this->lbl_other_clean_recommend->Click += gcnew System::EventHandler(this, &Form1::lbl_other_clean_recommend_Click);
			// 
			// lbl_other_clean_noall
			// 
			this->lbl_other_clean_noall->AutoSize = true;
			this->lbl_other_clean_noall->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_clean_noall->Location = System::Drawing::Point(69, 12);
			this->lbl_other_clean_noall->Name = L"lbl_other_clean_noall";
			this->lbl_other_clean_noall->Size = System::Drawing::Size(41, 12);
			this->lbl_other_clean_noall->TabIndex = 0;
			this->lbl_other_clean_noall->Text = L"全不选";
			this->lbl_other_clean_noall->Click += gcnew System::EventHandler(this, &Form1::lbl_other_clean_noall_Click);
			// 
			// lbl_other_clean_all
			// 
			this->lbl_other_clean_all->AutoSize = true;
			this->lbl_other_clean_all->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_clean_all->Location = System::Drawing::Point(19, 12);
			this->lbl_other_clean_all->Name = L"lbl_other_clean_all";
			this->lbl_other_clean_all->Size = System::Drawing::Size(29, 12);
			this->lbl_other_clean_all->TabIndex = 0;
			this->lbl_other_clean_all->Text = L"全选";
			this->lbl_other_clean_all->Click += gcnew System::EventHandler(this, &Form1::lbl_other_clean_all_Click);
			// 
			// tp_other_trace
			// 
			this->tp_other_trace->Controls->Add(this->splitContainer9);
			this->tp_other_trace->Location = System::Drawing::Point(4, 21);
			this->tp_other_trace->Name = L"tp_other_trace";
			this->tp_other_trace->Padding = System::Windows::Forms::Padding(3);
			this->tp_other_trace->Size = System::Drawing::Size(911, 454);
			this->tp_other_trace->TabIndex = 9;
			this->tp_other_trace->Text = L"清理痕迹";
			this->tp_other_trace->UseVisualStyleBackColor = true;
			// 
			// splitContainer9
			// 
			this->splitContainer9->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer9->Location = System::Drawing::Point(3, 3);
			this->splitContainer9->Name = L"splitContainer9";
			this->splitContainer9->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer9.Panel1
			// 
			this->splitContainer9->Panel1->Controls->Add(this->splitContainer10);
			// 
			// splitContainer9.Panel2
			// 
			this->splitContainer9->Panel2->Controls->Add(this->lbl_other_trace_reset);
			this->splitContainer9->Panel2->Controls->Add(this->lbl_other_trace_recommend);
			this->splitContainer9->Panel2->Controls->Add(this->lbl_other_trace_noall);
			this->splitContainer9->Panel2->Controls->Add(this->lbl_other_trace_all);
			this->splitContainer9->Size = System::Drawing::Size(905, 448);
			this->splitContainer9->SplitterDistance = 403;
			this->splitContainer9->TabIndex = 2;
			// 
			// splitContainer10
			// 
			this->splitContainer10->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer10->Location = System::Drawing::Point(0, 0);
			this->splitContainer10->Name = L"splitContainer10";
			this->splitContainer10->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer10.Panel1
			// 
			this->splitContainer10->Panel1->Controls->Add(this->btn_other_trace);
			this->splitContainer10->Panel1->Controls->Add(this->lbl_other_trace_msg);
			// 
			// splitContainer10.Panel2
			// 
			this->splitContainer10->Panel2->Controls->Add(this->tv_other_trace);
			this->splitContainer10->Size = System::Drawing::Size(905, 403);
			this->splitContainer10->SplitterDistance = 43;
			this->splitContainer10->TabIndex = 0;
			// 
			// btn_other_trace
			// 
			this->btn_other_trace->Location = System::Drawing::Point(726, 9);
			this->btn_other_trace->Name = L"btn_other_trace";
			this->btn_other_trace->Size = System::Drawing::Size(75, 23);
			this->btn_other_trace->TabIndex = 2;
			this->btn_other_trace->Text = L"开始扫描";
			this->btn_other_trace->UseVisualStyleBackColor = true;
			this->btn_other_trace->Click += gcnew System::EventHandler(this, &Form1::btn_other_trace_Click);
			// 
			// lbl_other_trace_msg
			// 
			this->lbl_other_trace_msg->Location = System::Drawing::Point(40, 14);
			this->lbl_other_trace_msg->Name = L"lbl_other_trace_msg";
			this->lbl_other_trace_msg->Size = System::Drawing::Size(653, 12);
			this->lbl_other_trace_msg->TabIndex = 1;
			this->lbl_other_trace_msg->Text = L"清理痕迹，保障隐私安全；信不信由你，反正我信了";
			// 
			// tv_other_trace
			// 
			this->tv_other_trace->CheckBoxes = true;
			this->tv_other_trace->ContextMenuStrip = this->cms_other_clean_trace;
			this->tv_other_trace->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tv_other_trace->Indent = 19;
			this->tv_other_trace->ItemHeight = 18;
			this->tv_other_trace->Location = System::Drawing::Point(0, 0);
			this->tv_other_trace->Name = L"tv_other_trace";
			treeNode21->Name = L"节点5";
			treeNode21->Text = L"Internet Explorer 清理";
			treeNode22->Name = L"节点6";
			treeNode22->Text = L"Internet Explorer 地址栏网址历史";
			treeNode23->Name = L"节点7";
			treeNode23->Text = L"Internet Explorer Cookie";
			treeNode24->Name = L"节点8";
			treeNode24->Text = L"Internet Explorer 自动保存的表单";
			treeNode25->Name = L"节点9";
			treeNode25->Text = L"Internet Explorer 自动保存的密码";
			treeNode26->Name = L"节点0";
			treeNode26->Text = L"上网浏览痕迹";
			treeNode27->Name = L"运行(开始菜单中，重启后生效)";
			treeNode27->Tag = L"";
			treeNode27->Text = L"运行(开始菜单中，重启后生效)";
			treeNode28->Name = L"最近运行的程序历史记录";
			treeNode28->Tag = L"";
			treeNode28->Text = L"最近运行的程序历史记录";
			treeNode29->Name = L"文件打开与保存历史记录";
			treeNode29->Tag = L"";
			treeNode29->Text = L"文件打开与保存历史记录";
			treeNode30->Name = L"最近打开的文件";
			treeNode30->Tag = L"";
			treeNode30->Text = L"最近打开的文件";
			treeNode31->Name = L"Windows收藏夹";
			treeNode31->Tag = L"";
			treeNode31->Text = L"Windows收藏夹";
			treeNode32->Name = L"Windows模板";
			treeNode32->Tag = L"";
			treeNode32->Text = L"Windows模板";
			treeNode33->Name = L"Windows搜索历史";
			treeNode33->Tag = L"";
			treeNode33->Text = L"Windows搜索历史";
			treeNode34->Name = L"Windows画图";
			treeNode34->Tag = L"";
			treeNode34->Text = L"Windows画图";
			treeNode35->Name = L"tv_other_trace_windows";
			treeNode35->Text = L"Windows使用痕迹";
			treeNode36->Name = L"Acrobat Reader";
			treeNode36->Tag = L"";
			treeNode36->Text = L"Acrobat Reader";
			treeNode37->Name = L"Office 清理";
			treeNode37->Tag = L"";
			treeNode37->Text = L"Office 清理";
			treeNode38->Name = L"Office Access";
			treeNode38->Tag = L"";
			treeNode38->Text = L"Office Access";
			treeNode39->Name = L"Office Excel";
			treeNode39->Tag = L"";
			treeNode39->Text = L"Office Excel";
			treeNode40->Name = L"Office PowerPoint";
			treeNode40->Tag = L"";
			treeNode40->Text = L"Office PowerPoint";
			treeNode41->Name = L"Office Word";
			treeNode41->Tag = L"";
			treeNode41->Text = L"Office Word";
			treeNode42->Name = L"WPS表格历史记录";
			treeNode42->Tag = L"";
			treeNode42->Text = L"WPS表格历史记录";
			treeNode43->Name = L"WPS文字历史记录";
			treeNode43->Tag = L"";
			treeNode43->Text = L"WPS文字历史记录";
			treeNode44->Name = L"WPS演示历史记录";
			treeNode44->Tag = L"";
			treeNode44->Text = L"WPS演示历史记录";
			treeNode45->Name = L"tv_other_trace_office";
			treeNode45->Text = L"办公软件使用痕迹";
			treeNode46->Name = L"PPS网络电视";
			treeNode46->Tag = L"";
			treeNode46->Text = L"PPS网络电视";
			treeNode47->Name = L"PPTV网络电视";
			treeNode47->Tag = L"";
			treeNode47->Text = L"PPTV网络电视";
			treeNode48->Name = L"QQLIVE网络电视";
			treeNode48->Tag = L"";
			treeNode48->Text = L"QQLIVE网络电视";
			treeNode49->Name = L"快播播放器";
			treeNode49->Tag = L"";
			treeNode49->Text = L"快播播放器";
			treeNode50->Name = L"百度影音";
			treeNode50->Tag = L"";
			treeNode50->Text = L"百度影音";
			treeNode51->Name = L"暴风影音";
			treeNode51->Tag = L"";
			treeNode51->Text = L"暴风影音";
			treeNode52->Name = L"皮皮影视";
			treeNode52->Tag = L"";
			treeNode52->Text = L"皮皮影视";
			treeNode53->Name = L"迅雷看看";
			treeNode53->Tag = L"";
			treeNode53->Text = L"迅雷看看";
			treeNode54->Name = L"Windows媒体播放器";
			treeNode54->Tag = L"";
			treeNode54->Text = L"Windows媒体播放器";
			treeNode55->Name = L"tv_other_trace_video";
			treeNode55->Text = L"最近看过的视频";
			treeNode56->Name = L"迅雷";
			treeNode56->Tag = L"";
			treeNode56->Text = L"迅雷";
			treeNode57->Name = L"快车";
			treeNode57->Tag = L"";
			treeNode57->Text = L"快车";
			treeNode58->Name = L"QQ旋风";
			treeNode58->Tag = L"";
			treeNode58->Text = L"QQ旋风";
			treeNode59->Name = L"BitComet";
			treeNode59->Tag = L"";
			treeNode59->Text = L"BitComet";
			treeNode60->Name = L"tv_other_trace_download";
			treeNode60->Text = L"下载工具";
			treeNode61->Name = L"7ZIP";
			treeNode61->Text = L"7ZIP";
			treeNode62->Name = L"WinRAR";
			treeNode62->Text = L"WinRAR";
			treeNode63->Name = L"tv_other_trace_other";
			treeNode63->Text = L"其他应用程序使用痕迹";
			this->tv_other_trace->Nodes->AddRange(gcnew cli::array< System::Windows::Forms::TreeNode^  >(6) {treeNode26, treeNode35, 
				treeNode45, treeNode55, treeNode60, treeNode63});
			this->tv_other_trace->ShowLines = false;
			this->tv_other_trace->ShowNodeToolTips = true;
			this->tv_other_trace->Size = System::Drawing::Size(905, 356);
			this->tv_other_trace->TabIndex = 0;
			this->tv_other_trace->NodeMouseClick += gcnew System::Windows::Forms::TreeNodeMouseClickEventHandler(this, &Form1::tv_other_trace_NodeMouseClick);
			this->tv_other_trace->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::tv_other_trace_MouseUp);
			// 
			// lbl_other_trace_reset
			// 
			this->lbl_other_trace_reset->AutoSize = true;
			this->lbl_other_trace_reset->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_trace_reset->Location = System::Drawing::Point(314, 12);
			this->lbl_other_trace_reset->Name = L"lbl_other_trace_reset";
			this->lbl_other_trace_reset->Size = System::Drawing::Size(101, 12);
			this->lbl_other_trace_reset->TabIndex = 4;
			this->lbl_other_trace_reset->Text = L"重新选择扫描项目";
			this->lbl_other_trace_reset->Visible = false;
			this->lbl_other_trace_reset->Click += gcnew System::EventHandler(this, &Form1::lbl_other_trace_reset_Click);
			// 
			// lbl_other_trace_recommend
			// 
			this->lbl_other_trace_recommend->AutoSize = true;
			this->lbl_other_trace_recommend->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_trace_recommend->Location = System::Drawing::Point(131, 12);
			this->lbl_other_trace_recommend->Name = L"lbl_other_trace_recommend";
			this->lbl_other_trace_recommend->Size = System::Drawing::Size(53, 12);
			this->lbl_other_trace_recommend->TabIndex = 0;
			this->lbl_other_trace_recommend->Text = L"推荐选项";
			this->lbl_other_trace_recommend->Click += gcnew System::EventHandler(this, &Form1::lbl_other_trace_recommend_Click);
			// 
			// lbl_other_trace_noall
			// 
			this->lbl_other_trace_noall->AutoSize = true;
			this->lbl_other_trace_noall->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_trace_noall->Location = System::Drawing::Point(69, 12);
			this->lbl_other_trace_noall->Name = L"lbl_other_trace_noall";
			this->lbl_other_trace_noall->Size = System::Drawing::Size(41, 12);
			this->lbl_other_trace_noall->TabIndex = 0;
			this->lbl_other_trace_noall->Text = L"全不选";
			this->lbl_other_trace_noall->Click += gcnew System::EventHandler(this, &Form1::lbl_other_trace_noall_Click);
			// 
			// lbl_other_trace_all
			// 
			this->lbl_other_trace_all->AutoSize = true;
			this->lbl_other_trace_all->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_other_trace_all->Location = System::Drawing::Point(19, 12);
			this->lbl_other_trace_all->Name = L"lbl_other_trace_all";
			this->lbl_other_trace_all->Size = System::Drawing::Size(29, 12);
			this->lbl_other_trace_all->TabIndex = 0;
			this->lbl_other_trace_all->Text = L"全选";
			this->lbl_other_trace_all->Click += gcnew System::EventHandler(this, &Form1::lbl_other_trace_all_Click);
			// 
			// tp_run
			// 
			this->tp_run->Controls->Add(this->lv_run);
			this->tp_run->Location = System::Drawing::Point(4, 21);
			this->tp_run->Name = L"tp_run";
			this->tp_run->Padding = System::Windows::Forms::Padding(3);
			this->tp_run->Size = System::Drawing::Size(925, 485);
			this->tp_run->TabIndex = 10;
			this->tp_run->Text = L"启动项";
			this->tp_run->UseVisualStyleBackColor = true;
			// 
			// lv_run
			// 
			this->lv_run->AllowColumnReorder = true;
			this->lv_run->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(4) {this->columnHeader100, this->columnHeader101, 
				this->columnHeader102, this->columnHeader103});
			this->lv_run->ContextMenuStrip = this->cms_run;
			this->lv_run->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_run->FullRowSelect = true;
			this->lv_run->Location = System::Drawing::Point(3, 3);
			this->lv_run->MultiSelect = false;
			this->lv_run->Name = L"lv_run";
			this->lv_run->ShowItemToolTips = true;
			this->lv_run->Size = System::Drawing::Size(919, 479);
			this->lv_run->TabIndex = 0;
			this->lv_run->UseCompatibleStateImageBehavior = false;
			this->lv_run->View = System::Windows::Forms::View::Details;
			this->lv_run->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_run_ColumnClick);
			this->lv_run->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_run_ItemDrag);
			this->lv_run->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_run_MouseUp);
			// 
			// columnHeader100
			// 
			this->columnHeader100->Text = L"名称";
			this->columnHeader100->Width = 135;
			// 
			// columnHeader101
			// 
			this->columnHeader101->Text = L"类型";
			this->columnHeader101->Width = 182;
			// 
			// columnHeader102
			// 
			this->columnHeader102->Text = L"启动路径";
			this->columnHeader102->Width = 351;
			// 
			// columnHeader103
			// 
			this->columnHeader103->Text = L"文件厂商";
			this->columnHeader103->Width = 211;
			// 
			// cms_run
			// 
			this->cms_run->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(21) {this->cms_run_refresh, this->toolStripSeparator116, 
				this->cms_run_delete1, this->cms_run_delete2, this->toolStripSeparator117, this->cms_run_sigverif, this->cms_run_sigverifAll, 
				this->toolStripSeparator118, this->cms_run_copy1, this->cms_run_copy2, this->toolStripSeparator119, this->cms_run_onlineFind, 
				this->cms_run_onlineAnalysis, this->toolStripSeparator120, this->cms_run_explorer, this->cms_run_explorer2, this->cms_run_showProperty, 
				this->toolStripSeparator121, this->cms_run_reg, this->toolStripSeparator122, this->cms_run_export});
			this->cms_run->Name = L"cms_net_ieMenu";
			this->cms_run->Size = System::Drawing::Size(179, 354);
			// 
			// cms_run_refresh
			// 
			this->cms_run_refresh->Name = L"cms_run_refresh";
			this->cms_run_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_run_refresh->Text = L"刷新";
			this->cms_run_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_run_refresh_Click);
			// 
			// toolStripSeparator116
			// 
			this->toolStripSeparator116->Name = L"toolStripSeparator116";
			this->toolStripSeparator116->Size = System::Drawing::Size(175, 6);
			// 
			// cms_run_delete1
			// 
			this->cms_run_delete1->Name = L"cms_run_delete1";
			this->cms_run_delete1->Size = System::Drawing::Size(178, 22);
			this->cms_run_delete1->Text = L"删除(注册表)";
			this->cms_run_delete1->Click += gcnew System::EventHandler(this, &Form1::cms_run_delete1_Click);
			// 
			// cms_run_delete2
			// 
			this->cms_run_delete2->Name = L"cms_run_delete2";
			this->cms_run_delete2->Size = System::Drawing::Size(178, 22);
			this->cms_run_delete2->Text = L"删除(注册表和文件)";
			this->cms_run_delete2->Click += gcnew System::EventHandler(this, &Form1::cms_run_delete2_Click);
			// 
			// toolStripSeparator117
			// 
			this->toolStripSeparator117->Name = L"toolStripSeparator117";
			this->toolStripSeparator117->Size = System::Drawing::Size(175, 6);
			// 
			// cms_run_sigverif
			// 
			this->cms_run_sigverif->Name = L"cms_run_sigverif";
			this->cms_run_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_run_sigverif->Text = L"校验数字签名";
			this->cms_run_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_run_sigverif_Click);
			// 
			// cms_run_sigverifAll
			// 
			this->cms_run_sigverifAll->Name = L"cms_run_sigverifAll";
			this->cms_run_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_run_sigverifAll->Text = L"校验所有数字签名";
			this->cms_run_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_run_sigverifAll_Click);
			// 
			// toolStripSeparator118
			// 
			this->toolStripSeparator118->Name = L"toolStripSeparator118";
			this->toolStripSeparator118->Size = System::Drawing::Size(175, 6);
			// 
			// cms_run_copy1
			// 
			this->cms_run_copy1->Name = L"cms_run_copy1";
			this->cms_run_copy1->Size = System::Drawing::Size(178, 22);
			this->cms_run_copy1->Text = L"复制插件名称";
			this->cms_run_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_run_copy1_Click);
			// 
			// cms_run_copy2
			// 
			this->cms_run_copy2->Name = L"cms_run_copy2";
			this->cms_run_copy2->Size = System::Drawing::Size(178, 22);
			this->cms_run_copy2->Text = L"复制插件路径";
			this->cms_run_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_run_copy2_Click);
			// 
			// toolStripSeparator119
			// 
			this->toolStripSeparator119->Name = L"toolStripSeparator119";
			this->toolStripSeparator119->Size = System::Drawing::Size(175, 6);
			// 
			// cms_run_onlineFind
			// 
			this->cms_run_onlineFind->Name = L"cms_run_onlineFind";
			this->cms_run_onlineFind->Size = System::Drawing::Size(178, 22);
			this->cms_run_onlineFind->Text = L"在线搜索插件名";
			this->cms_run_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_run_onlineFind_Click);
			// 
			// cms_run_onlineAnalysis
			// 
			this->cms_run_onlineAnalysis->Name = L"cms_run_onlineAnalysis";
			this->cms_run_onlineAnalysis->Size = System::Drawing::Size(178, 22);
			this->cms_run_onlineAnalysis->Text = L"在线分析";
			this->cms_run_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_run_onlineAnalysis_Click);
			// 
			// toolStripSeparator120
			// 
			this->toolStripSeparator120->Name = L"toolStripSeparator120";
			this->toolStripSeparator120->Size = System::Drawing::Size(175, 6);
			// 
			// cms_run_explorer
			// 
			this->cms_run_explorer->Name = L"cms_run_explorer";
			this->cms_run_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_run_explorer->Text = L"定位到映像文件";
			this->cms_run_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_run_explorer_Click);
			// 
			// cms_run_explorer2
			// 
			this->cms_run_explorer2->Name = L"cms_run_explorer2";
			this->cms_run_explorer2->Size = System::Drawing::Size(178, 22);
			this->cms_run_explorer2->Text = L"定位到映像文件2";
			this->cms_run_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_run_explorer2_Click);
			// 
			// cms_run_showProperty
			// 
			this->cms_run_showProperty->Name = L"cms_run_showProperty";
			this->cms_run_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_run_showProperty->Text = L"查看插件文件属性";
			this->cms_run_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_run_showProperty_Click);
			// 
			// toolStripSeparator121
			// 
			this->toolStripSeparator121->Name = L"toolStripSeparator121";
			this->toolStripSeparator121->Size = System::Drawing::Size(175, 6);
			// 
			// cms_run_reg
			// 
			this->cms_run_reg->Name = L"cms_run_reg";
			this->cms_run_reg->Size = System::Drawing::Size(178, 22);
			this->cms_run_reg->Text = L"定位到注册表";
			this->cms_run_reg->Click += gcnew System::EventHandler(this, &Form1::cms_run_reg_Click);
			// 
			// toolStripSeparator122
			// 
			this->toolStripSeparator122->Name = L"toolStripSeparator122";
			this->toolStripSeparator122->Size = System::Drawing::Size(175, 6);
			// 
			// cms_run_export
			// 
			this->cms_run_export->Name = L"cms_run_export";
			this->cms_run_export->Size = System::Drawing::Size(178, 22);
			this->cms_run_export->Text = L"导出";
			this->cms_run_export->Click += gcnew System::EventHandler(this, &Form1::cms_run_export_Click);
			// 
			// tp_win
			// 
			this->tp_win->Controls->Add(this->tv_win);
			this->tp_win->Location = System::Drawing::Point(4, 21);
			this->tp_win->Name = L"tp_win";
			this->tp_win->Padding = System::Windows::Forms::Padding(3);
			this->tp_win->Size = System::Drawing::Size(925, 485);
			this->tp_win->TabIndex = 9;
			this->tp_win->Text = L"窗体管理";
			this->tp_win->UseVisualStyleBackColor = true;
			// 
			// tv_win
			// 
			this->tv_win->ContextMenuStrip = this->cms_win;
			this->tv_win->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tv_win->FullRowSelect = true;
			this->tv_win->ImageIndex = 0;
			this->tv_win->ImageList = this->imageList1;
			this->tv_win->Location = System::Drawing::Point(3, 3);
			this->tv_win->Name = L"tv_win";
			this->tv_win->SelectedImageIndex = 0;
			this->tv_win->Size = System::Drawing::Size(919, 479);
			this->tv_win->TabIndex = 0;
			this->tv_win->BeforeExpand += gcnew System::Windows::Forms::TreeViewCancelEventHandler(this, &Form1::tv_win_BeforeExpand);
			this->tv_win->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::tv_win_MouseUp);
			// 
			// cms_win
			// 
			this->cms_win->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(18) {this->cms_win_refresh, this->toolStripSeparator31, 
				this->cms_win_view, this->toolStripSeparator174, this->cms_win_destroy, this->toolStripSeparator33, this->cms_win_top, this->cms_win_quitTop, 
				this->toolStripSeparator34, this->cms_win_show, this->cms_win_hide, this->toolStripSeparator35, this->cms_win_max, this->cms_win_min, 
				this->toolStripSeparator36, this->cms_win_view_find, this->toolStripSeparator172, this->cms_win_export});
			this->cms_win->Name = L"cms_win";
			this->cms_win->Size = System::Drawing::Size(137, 288);
			// 
			// cms_win_refresh
			// 
			this->cms_win_refresh->Name = L"cms_win_refresh";
			this->cms_win_refresh->Size = System::Drawing::Size(136, 22);
			this->cms_win_refresh->Text = L"刷新";
			this->cms_win_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_win_refresh_Click);
			// 
			// toolStripSeparator31
			// 
			this->toolStripSeparator31->Name = L"toolStripSeparator31";
			this->toolStripSeparator31->Size = System::Drawing::Size(133, 6);
			// 
			// cms_win_view
			// 
			this->cms_win_view->Name = L"cms_win_view";
			this->cms_win_view->Size = System::Drawing::Size(136, 22);
			this->cms_win_view->Text = L"详细信息";
			this->cms_win_view->Click += gcnew System::EventHandler(this, &Form1::cms_win_view_Click);
			// 
			// toolStripSeparator174
			// 
			this->toolStripSeparator174->Name = L"toolStripSeparator174";
			this->toolStripSeparator174->Size = System::Drawing::Size(133, 6);
			// 
			// cms_win_destroy
			// 
			this->cms_win_destroy->Name = L"cms_win_destroy";
			this->cms_win_destroy->Size = System::Drawing::Size(136, 22);
			this->cms_win_destroy->Text = L"销毁";
			this->cms_win_destroy->Click += gcnew System::EventHandler(this, &Form1::cms_win_destroy_Click);
			// 
			// toolStripSeparator33
			// 
			this->toolStripSeparator33->Name = L"toolStripSeparator33";
			this->toolStripSeparator33->Size = System::Drawing::Size(133, 6);
			// 
			// cms_win_top
			// 
			this->cms_win_top->Name = L"cms_win_top";
			this->cms_win_top->Size = System::Drawing::Size(136, 22);
			this->cms_win_top->Text = L"置顶";
			this->cms_win_top->Click += gcnew System::EventHandler(this, &Form1::cms_win_top_Click);
			// 
			// cms_win_quitTop
			// 
			this->cms_win_quitTop->Name = L"cms_win_quitTop";
			this->cms_win_quitTop->Size = System::Drawing::Size(136, 22);
			this->cms_win_quitTop->Text = L"取消置顶";
			this->cms_win_quitTop->Click += gcnew System::EventHandler(this, &Form1::cms_win_quitTop_Click);
			// 
			// toolStripSeparator34
			// 
			this->toolStripSeparator34->Name = L"toolStripSeparator34";
			this->toolStripSeparator34->Size = System::Drawing::Size(133, 6);
			// 
			// cms_win_show
			// 
			this->cms_win_show->Name = L"cms_win_show";
			this->cms_win_show->Size = System::Drawing::Size(136, 22);
			this->cms_win_show->Text = L"显现";
			this->cms_win_show->Click += gcnew System::EventHandler(this, &Form1::cms_win_show_Click);
			// 
			// cms_win_hide
			// 
			this->cms_win_hide->Name = L"cms_win_hide";
			this->cms_win_hide->Size = System::Drawing::Size(136, 22);
			this->cms_win_hide->Text = L"隐藏";
			this->cms_win_hide->Click += gcnew System::EventHandler(this, &Form1::cms_win_hide_Click);
			// 
			// toolStripSeparator35
			// 
			this->toolStripSeparator35->Name = L"toolStripSeparator35";
			this->toolStripSeparator35->Size = System::Drawing::Size(133, 6);
			// 
			// cms_win_max
			// 
			this->cms_win_max->Name = L"cms_win_max";
			this->cms_win_max->Size = System::Drawing::Size(136, 22);
			this->cms_win_max->Text = L"最大化";
			this->cms_win_max->Click += gcnew System::EventHandler(this, &Form1::cms_win_max_Click);
			// 
			// cms_win_min
			// 
			this->cms_win_min->Name = L"cms_win_min";
			this->cms_win_min->Size = System::Drawing::Size(136, 22);
			this->cms_win_min->Text = L"最小化";
			this->cms_win_min->Click += gcnew System::EventHandler(this, &Form1::cms_win_min_Click);
			// 
			// toolStripSeparator36
			// 
			this->toolStripSeparator36->Name = L"toolStripSeparator36";
			this->toolStripSeparator36->Size = System::Drawing::Size(133, 6);
			// 
			// cms_win_view_find
			// 
			this->cms_win_view_find->Name = L"cms_win_view_find";
			this->cms_win_view_find->Size = System::Drawing::Size(136, 22);
			this->cms_win_view_find->Text = L"查找窗口...";
			this->cms_win_view_find->Click += gcnew System::EventHandler(this, &Form1::cms_win_view_find_Click);
			// 
			// toolStripSeparator172
			// 
			this->toolStripSeparator172->Name = L"toolStripSeparator172";
			this->toolStripSeparator172->Size = System::Drawing::Size(133, 6);
			// 
			// cms_win_export
			// 
			this->cms_win_export->Name = L"cms_win_export";
			this->cms_win_export->Size = System::Drawing::Size(136, 22);
			this->cms_win_export->Text = L"导出";
			this->cms_win_export->Click += gcnew System::EventHandler(this, &Form1::cms_win_export_Click);
			// 
			// tp_reg
			// 
			this->tp_reg->Controls->Add(this->splitContainer3);
			this->tp_reg->Location = System::Drawing::Point(4, 21);
			this->tp_reg->Name = L"tp_reg";
			this->tp_reg->Padding = System::Windows::Forms::Padding(3);
			this->tp_reg->Size = System::Drawing::Size(925, 485);
			this->tp_reg->TabIndex = 8;
			this->tp_reg->Text = L"注册表";
			this->tp_reg->UseVisualStyleBackColor = true;
			// 
			// splitContainer3
			// 
			this->splitContainer3->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer3->Location = System::Drawing::Point(3, 3);
			this->splitContainer3->Name = L"splitContainer3";
			this->splitContainer3->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer3.Panel1
			// 
			this->splitContainer3->Panel1->Controls->Add(this->splitContainer4);
			// 
			// splitContainer3.Panel2
			// 
			this->splitContainer3->Panel2->Controls->Add(this->cbo_reg);
			this->splitContainer3->Size = System::Drawing::Size(919, 479);
			this->splitContainer3->SplitterDistance = 449;
			this->splitContainer3->TabIndex = 1;
			// 
			// splitContainer4
			// 
			this->splitContainer4->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer4->Location = System::Drawing::Point(0, 0);
			this->splitContainer4->Name = L"splitContainer4";
			// 
			// splitContainer4.Panel1
			// 
			this->splitContainer4->Panel1->Controls->Add(this->tv_reg);
			// 
			// splitContainer4.Panel2
			// 
			this->splitContainer4->Panel2->Controls->Add(this->lv_reg);
			this->splitContainer4->Size = System::Drawing::Size(919, 449);
			this->splitContainer4->SplitterDistance = 242;
			this->splitContainer4->TabIndex = 0;
			// 
			// tv_reg
			// 
			this->tv_reg->ContextMenuStrip = this->cms_tv_reg;
			this->tv_reg->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tv_reg->ImageIndex = 0;
			this->tv_reg->ImageList = this->imageList1;
			this->tv_reg->LabelEdit = true;
			this->tv_reg->Location = System::Drawing::Point(0, 0);
			this->tv_reg->Name = L"tv_reg";
			this->tv_reg->SelectedImageIndex = 0;
			this->tv_reg->Size = System::Drawing::Size(242, 449);
			this->tv_reg->TabIndex = 0;
			this->tv_reg->BeforeLabelEdit += gcnew System::Windows::Forms::NodeLabelEditEventHandler(this, &Form1::tv_reg_BeforeLabelEdit);
			this->tv_reg->AfterLabelEdit += gcnew System::Windows::Forms::NodeLabelEditEventHandler(this, &Form1::tv_reg_AfterLabelEdit);
			this->tv_reg->BeforeExpand += gcnew System::Windows::Forms::TreeViewCancelEventHandler(this, &Form1::tv_reg_BeforeExpand);
			this->tv_reg->AfterSelect += gcnew System::Windows::Forms::TreeViewEventHandler(this, &Form1::tv_reg_AfterSelect);
			this->tv_reg->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::tv_reg_MouseUp);
			// 
			// cms_tv_reg
			// 
			this->cms_tv_reg->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(18) {this->cms_tv_reg_refresh, 
				this->toolStripSeparator54, this->cms_tv_reg_delete, this->cms_tv_reg_rename, this->toolStripSeparator173, this->cms_tv_reg_find, 
				this->toolStripSeparator190, this->cms_tv_reg_view, this->toolStripSeparator191, this->cms_tv_reg_snap, this->toolStripSeparator195, 
				this->cms_tv_reg_copy, this->toolStripSeparator192, this->cms_tv_reg_new, this->toolStripSeparator193, this->cms_tv_reg_export, 
				this->toolStripSeparator196, this->cms_tv_reg_hive});
			this->cms_tv_reg->Name = L"cms_tv_reg";
			this->cms_tv_reg->Size = System::Drawing::Size(143, 272);
			// 
			// cms_tv_reg_refresh
			// 
			this->cms_tv_reg_refresh->Name = L"cms_tv_reg_refresh";
			this->cms_tv_reg_refresh->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_refresh->Text = L"刷新";
			this->cms_tv_reg_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_refresh_Click);
			// 
			// toolStripSeparator54
			// 
			this->toolStripSeparator54->Name = L"toolStripSeparator54";
			this->toolStripSeparator54->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_delete
			// 
			this->cms_tv_reg_delete->Name = L"cms_tv_reg_delete";
			this->cms_tv_reg_delete->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_delete->Text = L"删除";
			this->cms_tv_reg_delete->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_delete_Click);
			// 
			// cms_tv_reg_rename
			// 
			this->cms_tv_reg_rename->Name = L"cms_tv_reg_rename";
			this->cms_tv_reg_rename->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_rename->Text = L"重命名";
			this->cms_tv_reg_rename->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_rename_Click);
			// 
			// toolStripSeparator173
			// 
			this->toolStripSeparator173->Name = L"toolStripSeparator173";
			this->toolStripSeparator173->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_find
			// 
			this->cms_tv_reg_find->Name = L"cms_tv_reg_find";
			this->cms_tv_reg_find->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_find->Text = L"查找...";
			this->cms_tv_reg_find->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_find_Click);
			// 
			// toolStripSeparator190
			// 
			this->toolStripSeparator190->Name = L"toolStripSeparator190";
			this->toolStripSeparator190->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_view
			// 
			this->cms_tv_reg_view->Name = L"cms_tv_reg_view";
			this->cms_tv_reg_view->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_view->Text = L"查看锁定情况";
			this->cms_tv_reg_view->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_view_Click);
			// 
			// toolStripSeparator191
			// 
			this->toolStripSeparator191->Name = L"toolStripSeparator191";
			this->toolStripSeparator191->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_snap
			// 
			this->cms_tv_reg_snap->Name = L"cms_tv_reg_snap";
			this->cms_tv_reg_snap->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_snap->Text = L"注册表快照";
			this->cms_tv_reg_snap->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_snap_Click);
			// 
			// toolStripSeparator195
			// 
			this->toolStripSeparator195->Name = L"toolStripSeparator195";
			this->toolStripSeparator195->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_copy
			// 
			this->cms_tv_reg_copy->Name = L"cms_tv_reg_copy";
			this->cms_tv_reg_copy->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_copy->Text = L"复制项名称";
			this->cms_tv_reg_copy->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_copy_Click);
			// 
			// toolStripSeparator192
			// 
			this->toolStripSeparator192->Name = L"toolStripSeparator192";
			this->toolStripSeparator192->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_new
			// 
			this->cms_tv_reg_new->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(7) {this->cms_tv_reg_new_item, 
				this->toolStripSeparator194, this->cms_tv_reg_new_string, this->cms_tv_reg_new_binary, this->cms_tv_reg_new_dword, this->cms_tv_reg_new_multi, 
				this->cms_tv_reg_new_expand});
			this->cms_tv_reg_new->Name = L"cms_tv_reg_new";
			this->cms_tv_reg_new->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_new->Text = L"新建";
			// 
			// cms_tv_reg_new_item
			// 
			this->cms_tv_reg_new_item->Name = L"cms_tv_reg_new_item";
			this->cms_tv_reg_new_item->Size = System::Drawing::Size(154, 22);
			this->cms_tv_reg_new_item->Text = L"项";
			this->cms_tv_reg_new_item->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_new_item_Click);
			// 
			// toolStripSeparator194
			// 
			this->toolStripSeparator194->Name = L"toolStripSeparator194";
			this->toolStripSeparator194->Size = System::Drawing::Size(151, 6);
			// 
			// cms_tv_reg_new_string
			// 
			this->cms_tv_reg_new_string->Name = L"cms_tv_reg_new_string";
			this->cms_tv_reg_new_string->Size = System::Drawing::Size(154, 22);
			this->cms_tv_reg_new_string->Text = L"字符串值";
			this->cms_tv_reg_new_string->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_new_string_Click);
			// 
			// cms_tv_reg_new_binary
			// 
			this->cms_tv_reg_new_binary->Name = L"cms_tv_reg_new_binary";
			this->cms_tv_reg_new_binary->Size = System::Drawing::Size(154, 22);
			this->cms_tv_reg_new_binary->Text = L"二进制值";
			this->cms_tv_reg_new_binary->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_new_binary_Click);
			// 
			// cms_tv_reg_new_dword
			// 
			this->cms_tv_reg_new_dword->Name = L"cms_tv_reg_new_dword";
			this->cms_tv_reg_new_dword->Size = System::Drawing::Size(154, 22);
			this->cms_tv_reg_new_dword->Text = L"DWORD值";
			this->cms_tv_reg_new_dword->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_new_dword_Click);
			// 
			// cms_tv_reg_new_multi
			// 
			this->cms_tv_reg_new_multi->Name = L"cms_tv_reg_new_multi";
			this->cms_tv_reg_new_multi->Size = System::Drawing::Size(154, 22);
			this->cms_tv_reg_new_multi->Text = L"多字符串值";
			this->cms_tv_reg_new_multi->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_new_multi_Click);
			// 
			// cms_tv_reg_new_expand
			// 
			this->cms_tv_reg_new_expand->Name = L"cms_tv_reg_new_expand";
			this->cms_tv_reg_new_expand->Size = System::Drawing::Size(154, 22);
			this->cms_tv_reg_new_expand->Text = L"可扩充字符串值";
			this->cms_tv_reg_new_expand->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_new_expand_Click);
			// 
			// toolStripSeparator193
			// 
			this->toolStripSeparator193->Name = L"toolStripSeparator193";
			this->toolStripSeparator193->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_export
			// 
			this->cms_tv_reg_export->Name = L"cms_tv_reg_export";
			this->cms_tv_reg_export->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_export->Text = L"导出";
			this->cms_tv_reg_export->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_export_Click);
			// 
			// toolStripSeparator196
			// 
			this->toolStripSeparator196->Name = L"toolStripSeparator196";
			this->toolStripSeparator196->Size = System::Drawing::Size(139, 6);
			// 
			// cms_tv_reg_hive
			// 
			this->cms_tv_reg_hive->Name = L"cms_tv_reg_hive";
			this->cms_tv_reg_hive->Size = System::Drawing::Size(142, 22);
			this->cms_tv_reg_hive->Text = L"使用Hive分析";
			this->cms_tv_reg_hive->Click += gcnew System::EventHandler(this, &Form1::cms_tv_reg_hive_Click);
			// 
			// lv_reg
			// 
			this->lv_reg->AllowColumnReorder = true;
			this->lv_reg->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(3) {this->columnHeader91, this->columnHeader92, 
				this->columnHeader93});
			this->lv_reg->ContextMenuStrip = this->cms_reg;
			this->lv_reg->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_reg->FullRowSelect = true;
			this->lv_reg->LabelEdit = true;
			this->lv_reg->Location = System::Drawing::Point(0, 0);
			this->lv_reg->MultiSelect = false;
			this->lv_reg->Name = L"lv_reg";
			this->lv_reg->ShowItemToolTips = true;
			this->lv_reg->Size = System::Drawing::Size(673, 449);
			this->lv_reg->SmallImageList = this->imageList1;
			this->lv_reg->TabIndex = 0;
			this->lv_reg->UseCompatibleStateImageBehavior = false;
			this->lv_reg->View = System::Windows::Forms::View::Details;
			this->lv_reg->AfterLabelEdit += gcnew System::Windows::Forms::LabelEditEventHandler(this, &Form1::lv_reg_AfterLabelEdit);
			this->lv_reg->BeforeLabelEdit += gcnew System::Windows::Forms::LabelEditEventHandler(this, &Form1::lv_reg_BeforeLabelEdit);
			this->lv_reg->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_reg_ColumnClick);
			this->lv_reg->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_reg_ItemDrag);
			this->lv_reg->MouseDoubleClick += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_reg_MouseDoubleClick);
			this->lv_reg->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_reg_MouseUp);
			// 
			// columnHeader91
			// 
			this->columnHeader91->Text = L"名称";
			this->columnHeader91->Width = 151;
			// 
			// columnHeader92
			// 
			this->columnHeader92->Text = L"类型";
			this->columnHeader92->Width = 120;
			// 
			// columnHeader93
			// 
			this->columnHeader93->Text = L"数据";
			this->columnHeader93->Width = 368;
			// 
			// cms_reg
			// 
			this->cms_reg->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(11) {this->cms_reg_refresh, this->toolStripSeparator83, 
				this->cms_reg_change, this->cms_reg_change_bin, this->toolStripSeparator84, this->cms_reg_delete, this->cms_reg_rename, this->toolStripSeparator85, 
				this->cms_reg_new, this->toolStripSeparator86, this->cms_reg_export});
			this->cms_reg->Name = L"cms_reg";
			this->cms_reg->Size = System::Drawing::Size(155, 182);
			// 
			// cms_reg_refresh
			// 
			this->cms_reg_refresh->Name = L"cms_reg_refresh";
			this->cms_reg_refresh->Size = System::Drawing::Size(154, 22);
			this->cms_reg_refresh->Text = L"刷新";
			this->cms_reg_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_reg_refresh_Click);
			// 
			// toolStripSeparator83
			// 
			this->toolStripSeparator83->Name = L"toolStripSeparator83";
			this->toolStripSeparator83->Size = System::Drawing::Size(151, 6);
			// 
			// cms_reg_change
			// 
			this->cms_reg_change->Name = L"cms_reg_change";
			this->cms_reg_change->Size = System::Drawing::Size(154, 22);
			this->cms_reg_change->Text = L"修改";
			this->cms_reg_change->Click += gcnew System::EventHandler(this, &Form1::cms_reg_change_Click);
			// 
			// cms_reg_change_bin
			// 
			this->cms_reg_change_bin->Name = L"cms_reg_change_bin";
			this->cms_reg_change_bin->Size = System::Drawing::Size(154, 22);
			this->cms_reg_change_bin->Text = L"修改二进制数据";
			this->cms_reg_change_bin->Click += gcnew System::EventHandler(this, &Form1::cms_reg_change_bin_Click);
			// 
			// toolStripSeparator84
			// 
			this->toolStripSeparator84->Name = L"toolStripSeparator84";
			this->toolStripSeparator84->Size = System::Drawing::Size(151, 6);
			// 
			// cms_reg_delete
			// 
			this->cms_reg_delete->Name = L"cms_reg_delete";
			this->cms_reg_delete->Size = System::Drawing::Size(154, 22);
			this->cms_reg_delete->Text = L"删除";
			this->cms_reg_delete->Click += gcnew System::EventHandler(this, &Form1::cms_reg_delete_Click);
			// 
			// cms_reg_rename
			// 
			this->cms_reg_rename->Name = L"cms_reg_rename";
			this->cms_reg_rename->Size = System::Drawing::Size(154, 22);
			this->cms_reg_rename->Text = L"重命名";
			this->cms_reg_rename->Click += gcnew System::EventHandler(this, &Form1::cms_reg_rename_Click);
			// 
			// toolStripSeparator85
			// 
			this->toolStripSeparator85->Name = L"toolStripSeparator85";
			this->toolStripSeparator85->Size = System::Drawing::Size(151, 6);
			// 
			// cms_reg_new
			// 
			this->cms_reg_new->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(7) {this->cms_reg_new_item, 
				this->toolStripSeparator87, this->cms_reg_new_string, this->cms_reg_new_binary, this->cms_reg_new_dword, this->cms_reg_new_multi, 
				this->cms_reg_new_expand});
			this->cms_reg_new->Name = L"cms_reg_new";
			this->cms_reg_new->Size = System::Drawing::Size(154, 22);
			this->cms_reg_new->Text = L"新建";
			// 
			// cms_reg_new_item
			// 
			this->cms_reg_new_item->Name = L"cms_reg_new_item";
			this->cms_reg_new_item->Size = System::Drawing::Size(154, 22);
			this->cms_reg_new_item->Text = L"项";
			this->cms_reg_new_item->Click += gcnew System::EventHandler(this, &Form1::cms_reg_new_item_Click);
			// 
			// toolStripSeparator87
			// 
			this->toolStripSeparator87->Name = L"toolStripSeparator87";
			this->toolStripSeparator87->Size = System::Drawing::Size(151, 6);
			// 
			// cms_reg_new_string
			// 
			this->cms_reg_new_string->Name = L"cms_reg_new_string";
			this->cms_reg_new_string->Size = System::Drawing::Size(154, 22);
			this->cms_reg_new_string->Text = L"字符串值";
			this->cms_reg_new_string->Click += gcnew System::EventHandler(this, &Form1::cms_reg_new_string_Click);
			// 
			// cms_reg_new_binary
			// 
			this->cms_reg_new_binary->Name = L"cms_reg_new_binary";
			this->cms_reg_new_binary->Size = System::Drawing::Size(154, 22);
			this->cms_reg_new_binary->Text = L"二进制值";
			this->cms_reg_new_binary->Click += gcnew System::EventHandler(this, &Form1::cms_reg_new_binary_Click);
			// 
			// cms_reg_new_dword
			// 
			this->cms_reg_new_dword->Name = L"cms_reg_new_dword";
			this->cms_reg_new_dword->Size = System::Drawing::Size(154, 22);
			this->cms_reg_new_dword->Text = L"DWORD值";
			this->cms_reg_new_dword->Click += gcnew System::EventHandler(this, &Form1::cms_reg_new_dword_Click);
			// 
			// cms_reg_new_multi
			// 
			this->cms_reg_new_multi->Name = L"cms_reg_new_multi";
			this->cms_reg_new_multi->Size = System::Drawing::Size(154, 22);
			this->cms_reg_new_multi->Text = L"多字符串值";
			this->cms_reg_new_multi->Click += gcnew System::EventHandler(this, &Form1::cms_reg_new_multi_Click);
			// 
			// cms_reg_new_expand
			// 
			this->cms_reg_new_expand->Name = L"cms_reg_new_expand";
			this->cms_reg_new_expand->Size = System::Drawing::Size(154, 22);
			this->cms_reg_new_expand->Text = L"可扩充字符串值";
			this->cms_reg_new_expand->Click += gcnew System::EventHandler(this, &Form1::cms_reg_new_expand_Click);
			// 
			// toolStripSeparator86
			// 
			this->toolStripSeparator86->Name = L"toolStripSeparator86";
			this->toolStripSeparator86->Size = System::Drawing::Size(151, 6);
			// 
			// cms_reg_export
			// 
			this->cms_reg_export->Name = L"cms_reg_export";
			this->cms_reg_export->Size = System::Drawing::Size(154, 22);
			this->cms_reg_export->Text = L"导出";
			this->cms_reg_export->Click += gcnew System::EventHandler(this, &Form1::cms_reg_export_Click);
			// 
			// cbo_reg
			// 
			this->cbo_reg->Dock = System::Windows::Forms::DockStyle::Fill;
			this->cbo_reg->FormattingEnabled = true;
			this->cbo_reg->Location = System::Drawing::Point(0, 0);
			this->cbo_reg->Name = L"cbo_reg";
			this->cbo_reg->Size = System::Drawing::Size(919, 20);
			this->cbo_reg->TabIndex = 0;
			this->cbo_reg->KeyPress += gcnew System::Windows::Forms::KeyPressEventHandler(this, &Form1::cbo_reg_KeyPress);
			// 
			// tp_file
			// 
			this->tp_file->Controls->Add(this->splitContainer1);
			this->tp_file->Location = System::Drawing::Point(4, 21);
			this->tp_file->Name = L"tp_file";
			this->tp_file->Padding = System::Windows::Forms::Padding(3);
			this->tp_file->Size = System::Drawing::Size(925, 485);
			this->tp_file->TabIndex = 7;
			this->tp_file->Text = L"文件";
			this->tp_file->UseVisualStyleBackColor = true;
			// 
			// splitContainer1
			// 
			this->splitContainer1->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer1->Location = System::Drawing::Point(3, 3);
			this->splitContainer1->Name = L"splitContainer1";
			this->splitContainer1->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer1.Panel1
			// 
			this->splitContainer1->Panel1->Controls->Add(this->splitContainer2);
			// 
			// splitContainer1.Panel2
			// 
			this->splitContainer1->Panel2->Controls->Add(this->cbo_file);
			this->splitContainer1->Size = System::Drawing::Size(919, 479);
			this->splitContainer1->SplitterDistance = 449;
			this->splitContainer1->TabIndex = 0;
			// 
			// splitContainer2
			// 
			this->splitContainer2->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer2->Location = System::Drawing::Point(0, 0);
			this->splitContainer2->Name = L"splitContainer2";
			// 
			// splitContainer2.Panel1
			// 
			this->splitContainer2->Panel1->Controls->Add(this->tv_file);
			// 
			// splitContainer2.Panel2
			// 
			this->splitContainer2->Panel2->Controls->Add(this->lv_file);
			this->splitContainer2->Size = System::Drawing::Size(919, 449);
			this->splitContainer2->SplitterDistance = 242;
			this->splitContainer2->TabIndex = 0;
			// 
			// tv_file
			// 
			this->tv_file->ContextMenuStrip = this->cms_tv_file;
			this->tv_file->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tv_file->ImageIndex = 0;
			this->tv_file->ImageList = this->imageList1;
			this->tv_file->Location = System::Drawing::Point(0, 0);
			this->tv_file->Name = L"tv_file";
			this->tv_file->SelectedImageIndex = 0;
			this->tv_file->Size = System::Drawing::Size(242, 449);
			this->tv_file->TabIndex = 0;
			this->tv_file->AfterCollapse += gcnew System::Windows::Forms::TreeViewEventHandler(this, &Form1::tv_file_AfterCollapse);
			this->tv_file->BeforeExpand += gcnew System::Windows::Forms::TreeViewCancelEventHandler(this, &Form1::tv_file_BeforeExpand);
			this->tv_file->BeforeSelect += gcnew System::Windows::Forms::TreeViewCancelEventHandler(this, &Form1::tv_file_BeforeSelect);
			this->tv_file->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::tv_file_MouseUp);
			// 
			// cms_tv_file
			// 
			this->cms_tv_file->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(19) {this->cms_tv_file_refresh, 
				this->toolStripSeparator167, this->cms_tv_file_delete, this->cms_tv_file_forceDelete, this->toolStripSeparator168, this->cms_tv_file_rebootDelete, 
				this->toolStripSeparator169, this->cms_tv_file_rename, this->cms_tv_file_copyTo, this->toolStripSeparator170, this->cms_tv_file_snap, 
				this->toolStripSeparator32, this->cms_tv_file_copy1, this->cms_tv_file_copy2, this->toolStripSeparator171, this->cms_tv_file_md5, 
				this->cms_tv_file_sigverif, this->toolStripSeparator197, this->cms_tv_file_disk});
			this->cms_tv_file->Name = L"cms_tv_file";
			this->cms_tv_file->Size = System::Drawing::Size(167, 310);
			// 
			// cms_tv_file_refresh
			// 
			this->cms_tv_file_refresh->Name = L"cms_tv_file_refresh";
			this->cms_tv_file_refresh->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_refresh->Text = L"刷新";
			this->cms_tv_file_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_refresh_Click);
			// 
			// toolStripSeparator167
			// 
			this->toolStripSeparator167->Name = L"toolStripSeparator167";
			this->toolStripSeparator167->Size = System::Drawing::Size(163, 6);
			// 
			// cms_tv_file_delete
			// 
			this->cms_tv_file_delete->Name = L"cms_tv_file_delete";
			this->cms_tv_file_delete->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_delete->Text = L"删除";
			this->cms_tv_file_delete->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_delete_Click);
			// 
			// cms_tv_file_forceDelete
			// 
			this->cms_tv_file_forceDelete->Name = L"cms_tv_file_forceDelete";
			this->cms_tv_file_forceDelete->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_forceDelete->Text = L"强制删除";
			this->cms_tv_file_forceDelete->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_forceDelete_Click);
			// 
			// toolStripSeparator168
			// 
			this->toolStripSeparator168->Name = L"toolStripSeparator168";
			this->toolStripSeparator168->Size = System::Drawing::Size(163, 6);
			// 
			// cms_tv_file_rebootDelete
			// 
			this->cms_tv_file_rebootDelete->Name = L"cms_tv_file_rebootDelete";
			this->cms_tv_file_rebootDelete->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_rebootDelete->Text = L"添加到重启删除";
			this->cms_tv_file_rebootDelete->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_rebootDelete_Click);
			// 
			// toolStripSeparator169
			// 
			this->toolStripSeparator169->Name = L"toolStripSeparator169";
			this->toolStripSeparator169->Size = System::Drawing::Size(163, 6);
			// 
			// cms_tv_file_rename
			// 
			this->cms_tv_file_rename->Name = L"cms_tv_file_rename";
			this->cms_tv_file_rename->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_rename->Text = L"重命名";
			this->cms_tv_file_rename->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_rename_Click);
			// 
			// cms_tv_file_copyTo
			// 
			this->cms_tv_file_copyTo->Name = L"cms_tv_file_copyTo";
			this->cms_tv_file_copyTo->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_copyTo->Text = L"拷贝到...";
			this->cms_tv_file_copyTo->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_copyTo_Click);
			// 
			// toolStripSeparator170
			// 
			this->toolStripSeparator170->Name = L"toolStripSeparator170";
			this->toolStripSeparator170->Size = System::Drawing::Size(163, 6);
			// 
			// cms_tv_file_snap
			// 
			this->cms_tv_file_snap->Name = L"cms_tv_file_snap";
			this->cms_tv_file_snap->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_snap->Text = L"文件快照";
			this->cms_tv_file_snap->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_snap_Click);
			// 
			// toolStripSeparator32
			// 
			this->toolStripSeparator32->Name = L"toolStripSeparator32";
			this->toolStripSeparator32->Size = System::Drawing::Size(163, 6);
			// 
			// cms_tv_file_copy1
			// 
			this->cms_tv_file_copy1->Name = L"cms_tv_file_copy1";
			this->cms_tv_file_copy1->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_copy1->Text = L"复制文件夹名";
			this->cms_tv_file_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_copy1_Click);
			// 
			// cms_tv_file_copy2
			// 
			this->cms_tv_file_copy2->Name = L"cms_tv_file_copy2";
			this->cms_tv_file_copy2->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_copy2->Text = L"复制文件夹路径";
			this->cms_tv_file_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_copy2_Click);
			// 
			// toolStripSeparator171
			// 
			this->toolStripSeparator171->Name = L"toolStripSeparator171";
			this->toolStripSeparator171->Size = System::Drawing::Size(163, 6);
			// 
			// cms_tv_file_md5
			// 
			this->cms_tv_file_md5->Name = L"cms_tv_file_md5";
			this->cms_tv_file_md5->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_md5->Text = L"计算md5";
			this->cms_tv_file_md5->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_md5_Click);
			// 
			// cms_tv_file_sigverif
			// 
			this->cms_tv_file_sigverif->Name = L"cms_tv_file_sigverif";
			this->cms_tv_file_sigverif->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_sigverif->Text = L"校验数字签名";
			this->cms_tv_file_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_sigverif_Click);
			// 
			// toolStripSeparator197
			// 
			this->toolStripSeparator197->Name = L"toolStripSeparator197";
			this->toolStripSeparator197->Size = System::Drawing::Size(163, 6);
			// 
			// cms_tv_file_disk
			// 
			this->cms_tv_file_disk->Name = L"cms_tv_file_disk";
			this->cms_tv_file_disk->Size = System::Drawing::Size(166, 22);
			this->cms_tv_file_disk->Text = L"直接物理磁盘分析";
			this->cms_tv_file_disk->Click += gcnew System::EventHandler(this, &Form1::cms_tv_file_disk_Click);
			// 
			// lv_file
			// 
			this->lv_file->AllowColumnReorder = true;
			this->lv_file->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(6) {this->columnHeader85, this->columnHeader86, 
				this->columnHeader87, this->columnHeader88, this->columnHeader89, this->columnHeader90});
			this->lv_file->ContextMenuStrip = this->cms_file;
			this->lv_file->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_file->FullRowSelect = true;
			this->lv_file->Location = System::Drawing::Point(0, 0);
			this->lv_file->MultiSelect = false;
			this->lv_file->Name = L"lv_file";
			this->lv_file->ShowItemToolTips = true;
			this->lv_file->Size = System::Drawing::Size(673, 449);
			this->lv_file->TabIndex = 0;
			this->lv_file->UseCompatibleStateImageBehavior = false;
			this->lv_file->View = System::Windows::Forms::View::Details;
			this->lv_file->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_file_ColumnClick);
			this->lv_file->ItemActivate += gcnew System::EventHandler(this, &Form1::lv_file_ItemActivate);
			this->lv_file->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_file_ItemDrag);
			this->lv_file->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_file_MouseUp);
			// 
			// columnHeader85
			// 
			this->columnHeader85->Text = L"名称";
			this->columnHeader85->Width = 103;
			// 
			// columnHeader86
			// 
			this->columnHeader86->Text = L"大小";
			this->columnHeader86->Width = 96;
			// 
			// columnHeader87
			// 
			this->columnHeader87->Text = L"类型";
			this->columnHeader87->Width = 82;
			// 
			// columnHeader88
			// 
			this->columnHeader88->Text = L"创建时间";
			this->columnHeader88->Width = 98;
			// 
			// columnHeader89
			// 
			this->columnHeader89->Text = L"上次访问时间";
			this->columnHeader89->Width = 104;
			// 
			// columnHeader90
			// 
			this->columnHeader90->Text = L"常规属性";
			this->columnHeader90->Width = 160;
			// 
			// cms_file
			// 
			this->cms_file->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(31) {this->cms_file_refresh, this->toolStripSeparator37, 
				this->cms_file_unlockView, this->toolStripSeparator165, this->cms_file_delete, this->cms_file_forceDelete, this->toolStripSeparator38, 
				this->cms_file_rebootDelete, this->toolStripSeparator39, this->cms_file_rename, this->cms_file_copyTo, this->toolStripSeparator40, 
				this->cms_file_snap, this->cms_file_view, this->toolStripSeparator166, this->cms_file_copy1, this->cms_file_copy2, this->toolStripSeparator41, 
				this->cms_file_sigverif, this->cms_file_sigverifAll, this->toolStripSeparator42, this->cms_file_md5, this->cms_file_md52, this->toolStripSeparator43, 
				this->cms_file_onlineFind, this->cms_file_onlineAnalysis, this->toolStripSeparator44, this->cms_file_explorer, this->cms_file_showProperty, 
				this->toolStripSeparator45, this->cms_file_export});
			this->cms_file->Name = L"cms_file";
			this->cms_file->Size = System::Drawing::Size(197, 510);
			// 
			// cms_file_refresh
			// 
			this->cms_file_refresh->Name = L"cms_file_refresh";
			this->cms_file_refresh->Size = System::Drawing::Size(196, 22);
			this->cms_file_refresh->Text = L"刷新";
			this->cms_file_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_file_refresh_Click);
			// 
			// toolStripSeparator37
			// 
			this->toolStripSeparator37->Name = L"toolStripSeparator37";
			this->toolStripSeparator37->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_unlockView
			// 
			this->cms_file_unlockView->Name = L"cms_file_unlockView";
			this->cms_file_unlockView->Size = System::Drawing::Size(196, 22);
			this->cms_file_unlockView->Text = L"查看锁定情况";
			this->cms_file_unlockView->Click += gcnew System::EventHandler(this, &Form1::cms_file_unlockView_Click);
			// 
			// toolStripSeparator165
			// 
			this->toolStripSeparator165->Name = L"toolStripSeparator165";
			this->toolStripSeparator165->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_delete
			// 
			this->cms_file_delete->Name = L"cms_file_delete";
			this->cms_file_delete->Size = System::Drawing::Size(196, 22);
			this->cms_file_delete->Text = L"删除";
			this->cms_file_delete->Click += gcnew System::EventHandler(this, &Form1::cms_file_delete_Click);
			// 
			// cms_file_forceDelete
			// 
			this->cms_file_forceDelete->Name = L"cms_file_forceDelete";
			this->cms_file_forceDelete->Size = System::Drawing::Size(196, 22);
			this->cms_file_forceDelete->Text = L"强制删除";
			this->cms_file_forceDelete->Click += gcnew System::EventHandler(this, &Form1::cms_file_forceDelete_Click);
			// 
			// toolStripSeparator38
			// 
			this->toolStripSeparator38->Name = L"toolStripSeparator38";
			this->toolStripSeparator38->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_rebootDelete
			// 
			this->cms_file_rebootDelete->Name = L"cms_file_rebootDelete";
			this->cms_file_rebootDelete->Size = System::Drawing::Size(196, 22);
			this->cms_file_rebootDelete->Text = L"添加到重启删除";
			this->cms_file_rebootDelete->Click += gcnew System::EventHandler(this, &Form1::cms_file_rebootDelete_Click);
			// 
			// toolStripSeparator39
			// 
			this->toolStripSeparator39->Name = L"toolStripSeparator39";
			this->toolStripSeparator39->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_rename
			// 
			this->cms_file_rename->Name = L"cms_file_rename";
			this->cms_file_rename->Size = System::Drawing::Size(196, 22);
			this->cms_file_rename->Text = L"重命名";
			this->cms_file_rename->Click += gcnew System::EventHandler(this, &Form1::cms_file_rename_Click);
			// 
			// cms_file_copyTo
			// 
			this->cms_file_copyTo->Name = L"cms_file_copyTo";
			this->cms_file_copyTo->Size = System::Drawing::Size(196, 22);
			this->cms_file_copyTo->Text = L"拷贝到...";
			this->cms_file_copyTo->Click += gcnew System::EventHandler(this, &Form1::cms_file_copyTo_Click);
			// 
			// toolStripSeparator40
			// 
			this->toolStripSeparator40->Name = L"toolStripSeparator40";
			this->toolStripSeparator40->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_snap
			// 
			this->cms_file_snap->Name = L"cms_file_snap";
			this->cms_file_snap->Size = System::Drawing::Size(196, 22);
			this->cms_file_snap->Text = L"文件快照";
			this->cms_file_snap->Click += gcnew System::EventHandler(this, &Form1::cms_file_snap_Click);
			// 
			// cms_file_view
			// 
			this->cms_file_view->Name = L"cms_file_view";
			this->cms_file_view->Size = System::Drawing::Size(196, 22);
			this->cms_file_view->Text = L"查看输入输出表信息";
			this->cms_file_view->Click += gcnew System::EventHandler(this, &Form1::cms_file_view_Click);
			// 
			// toolStripSeparator166
			// 
			this->toolStripSeparator166->Name = L"toolStripSeparator166";
			this->toolStripSeparator166->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_copy1
			// 
			this->cms_file_copy1->Name = L"cms_file_copy1";
			this->cms_file_copy1->Size = System::Drawing::Size(196, 22);
			this->cms_file_copy1->Text = L"复制文件名";
			this->cms_file_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_file_copy1_Click);
			// 
			// cms_file_copy2
			// 
			this->cms_file_copy2->Name = L"cms_file_copy2";
			this->cms_file_copy2->Size = System::Drawing::Size(196, 22);
			this->cms_file_copy2->Text = L"复制文件路径";
			this->cms_file_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_file_copy2_Click);
			// 
			// toolStripSeparator41
			// 
			this->toolStripSeparator41->Name = L"toolStripSeparator41";
			this->toolStripSeparator41->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_sigverif
			// 
			this->cms_file_sigverif->Name = L"cms_file_sigverif";
			this->cms_file_sigverif->Size = System::Drawing::Size(196, 22);
			this->cms_file_sigverif->Text = L"校验数字签名";
			this->cms_file_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_file_sigverif_Click);
			// 
			// cms_file_sigverifAll
			// 
			this->cms_file_sigverifAll->Name = L"cms_file_sigverifAll";
			this->cms_file_sigverifAll->Size = System::Drawing::Size(196, 22);
			this->cms_file_sigverifAll->Text = L"校验所有数字签名";
			this->cms_file_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_file_sigverifAll_Click);
			// 
			// toolStripSeparator42
			// 
			this->toolStripSeparator42->Name = L"toolStripSeparator42";
			this->toolStripSeparator42->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_md5
			// 
			this->cms_file_md5->Name = L"cms_file_md5";
			this->cms_file_md5->Size = System::Drawing::Size(196, 22);
			this->cms_file_md5->Text = L"计算md5";
			this->cms_file_md5->Click += gcnew System::EventHandler(this, &Form1::cms_file_md5_Click);
			// 
			// cms_file_md52
			// 
			this->cms_file_md52->Name = L"cms_file_md52";
			this->cms_file_md52->Size = System::Drawing::Size(196, 22);
			this->cms_file_md52->Text = L"计算md5并复制到剪切板";
			this->cms_file_md52->Click += gcnew System::EventHandler(this, &Form1::cms_file_md52_Click);
			// 
			// toolStripSeparator43
			// 
			this->toolStripSeparator43->Name = L"toolStripSeparator43";
			this->toolStripSeparator43->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_onlineFind
			// 
			this->cms_file_onlineFind->Name = L"cms_file_onlineFind";
			this->cms_file_onlineFind->Size = System::Drawing::Size(196, 22);
			this->cms_file_onlineFind->Text = L"在线搜索文件名";
			this->cms_file_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_file_onlineFind_Click);
			// 
			// cms_file_onlineAnalysis
			// 
			this->cms_file_onlineAnalysis->Name = L"cms_file_onlineAnalysis";
			this->cms_file_onlineAnalysis->Size = System::Drawing::Size(196, 22);
			this->cms_file_onlineAnalysis->Text = L"在线分析";
			this->cms_file_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_file_onlineAnalysis_Click);
			// 
			// toolStripSeparator44
			// 
			this->toolStripSeparator44->Name = L"toolStripSeparator44";
			this->toolStripSeparator44->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_explorer
			// 
			this->cms_file_explorer->Name = L"cms_file_explorer";
			this->cms_file_explorer->Size = System::Drawing::Size(196, 22);
			this->cms_file_explorer->Text = L"定位到文件";
			this->cms_file_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_file_explorer_Click);
			// 
			// cms_file_showProperty
			// 
			this->cms_file_showProperty->Name = L"cms_file_showProperty";
			this->cms_file_showProperty->Size = System::Drawing::Size(196, 22);
			this->cms_file_showProperty->Text = L"查看文件属性";
			this->cms_file_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_file_showProperty_Click);
			// 
			// toolStripSeparator45
			// 
			this->toolStripSeparator45->Name = L"toolStripSeparator45";
			this->toolStripSeparator45->Size = System::Drawing::Size(193, 6);
			// 
			// cms_file_export
			// 
			this->cms_file_export->Name = L"cms_file_export";
			this->cms_file_export->Size = System::Drawing::Size(196, 22);
			this->cms_file_export->Text = L"导出";
			this->cms_file_export->Click += gcnew System::EventHandler(this, &Form1::cms_file_export_Click);
			// 
			// cbo_file
			// 
			this->cbo_file->Dock = System::Windows::Forms::DockStyle::Fill;
			this->cbo_file->FormattingEnabled = true;
			this->cbo_file->Location = System::Drawing::Point(0, 0);
			this->cbo_file->Name = L"cbo_file";
			this->cbo_file->Size = System::Drawing::Size(919, 20);
			this->cbo_file->TabIndex = 0;
			this->cbo_file->KeyPress += gcnew System::Windows::Forms::KeyPressEventHandler(this, &Form1::cbo_file_KeyPress);
			// 
			// tp_net
			// 
			this->tp_net->Controls->Add(this->tc_net);
			this->tp_net->Location = System::Drawing::Point(4, 21);
			this->tp_net->Name = L"tp_net";
			this->tp_net->Padding = System::Windows::Forms::Padding(3);
			this->tp_net->Size = System::Drawing::Size(925, 485);
			this->tp_net->TabIndex = 6;
			this->tp_net->Text = L"网络连接";
			this->tp_net->UseVisualStyleBackColor = true;
			// 
			// tc_net
			// 
			this->tc_net->Controls->Add(this->tp_net_port);
			this->tc_net->Controls->Add(this->tp_net_iePlugin);
			this->tc_net->Controls->Add(this->tp_net_ieMenu);
			this->tc_net->Controls->Add(this->tp_net_lsp);
			this->tc_net->Controls->Add(this->tp_net_host);
			this->tc_net->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tc_net->Location = System::Drawing::Point(3, 3);
			this->tc_net->Name = L"tc_net";
			this->tc_net->SelectedIndex = 0;
			this->tc_net->Size = System::Drawing::Size(919, 479);
			this->tc_net->TabIndex = 0;
			this->tc_net->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::tc_net_SelectedIndexChanged);
			// 
			// tp_net_port
			// 
			this->tp_net_port->Controls->Add(this->lv_net_port);
			this->tp_net_port->Location = System::Drawing::Point(4, 21);
			this->tp_net_port->Name = L"tp_net_port";
			this->tp_net_port->Padding = System::Windows::Forms::Padding(3);
			this->tp_net_port->Size = System::Drawing::Size(911, 454);
			this->tp_net_port->TabIndex = 0;
			this->tp_net_port->Text = L"端口";
			this->tp_net_port->UseVisualStyleBackColor = true;
			// 
			// lv_net_port
			// 
			this->lv_net_port->AllowColumnReorder = true;
			this->lv_net_port->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(7) {this->columnHeader66, 
				this->columnHeader67, this->columnHeader36, this->columnHeader68, this->columnHeader69, this->columnHeader70, this->columnHeader71});
			this->lv_net_port->ContextMenuStrip = this->cms_net_port;
			this->lv_net_port->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_net_port->FullRowSelect = true;
			this->lv_net_port->Location = System::Drawing::Point(3, 3);
			this->lv_net_port->MultiSelect = false;
			this->lv_net_port->Name = L"lv_net_port";
			this->lv_net_port->ShowItemToolTips = true;
			this->lv_net_port->Size = System::Drawing::Size(905, 448);
			this->lv_net_port->TabIndex = 0;
			this->lv_net_port->UseCompatibleStateImageBehavior = false;
			this->lv_net_port->View = System::Windows::Forms::View::Details;
			this->lv_net_port->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_net_port_ColumnClick);
			this->lv_net_port->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_net_port_ItemDrag);
			this->lv_net_port->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_net_port_MouseUp);
			// 
			// columnHeader66
			// 
			this->columnHeader66->Text = L"协议";
			// 
			// columnHeader67
			// 
			this->columnHeader67->Text = L"PID";
			this->columnHeader67->Width = 65;
			// 
			// columnHeader36
			// 
			this->columnHeader36->Text = L"进程名称";
			this->columnHeader36->Width = 92;
			// 
			// columnHeader68
			// 
			this->columnHeader68->Text = L"本地地址";
			this->columnHeader68->Width = 140;
			// 
			// columnHeader69
			// 
			this->columnHeader69->Text = L"远程地址[物理地址]";
			this->columnHeader69->Width = 196;
			// 
			// columnHeader70
			// 
			this->columnHeader70->Text = L"状态";
			this->columnHeader70->Width = 91;
			// 
			// columnHeader71
			// 
			this->columnHeader71->Text = L"映像路径";
			this->columnHeader71->Width = 240;
			// 
			// cms_net_port
			// 
			this->cms_net_port->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(15) {this->cms_net_port_refresh, 
				this->toolStripSeparator80, this->cms_net_port_sigverif, this->toolStripSeparator93, this->cms_net_port_delete, this->cms_net_port_force, 
				this->toolStripSeparator81, this->cms_net_port_explorer, this->cms_net_port_explorer2, this->cms_net_port_process_showProperty, 
				this->toolStripSeparator82, this->cms_net_port_copy, this->cms_net_port_copy2, this->toolStripSeparator201, this->cms_net_port_export});
			this->cms_net_port->Name = L"cms_net_port";
			this->cms_net_port->Size = System::Drawing::Size(191, 254);
			// 
			// cms_net_port_refresh
			// 
			this->cms_net_port_refresh->Name = L"cms_net_port_refresh";
			this->cms_net_port_refresh->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_refresh->Text = L"刷新";
			this->cms_net_port_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_refresh_Click);
			// 
			// toolStripSeparator80
			// 
			this->toolStripSeparator80->Name = L"toolStripSeparator80";
			this->toolStripSeparator80->Size = System::Drawing::Size(187, 6);
			// 
			// cms_net_port_sigverif
			// 
			this->cms_net_port_sigverif->Name = L"cms_net_port_sigverif";
			this->cms_net_port_sigverif->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_sigverif->Text = L"校验数字签名";
			this->cms_net_port_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_sigverif_Click);
			// 
			// toolStripSeparator93
			// 
			this->toolStripSeparator93->Name = L"toolStripSeparator93";
			this->toolStripSeparator93->Size = System::Drawing::Size(187, 6);
			// 
			// cms_net_port_delete
			// 
			this->cms_net_port_delete->Name = L"cms_net_port_delete";
			this->cms_net_port_delete->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_delete->Text = L"结束进程";
			this->cms_net_port_delete->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_delete_Click);
			// 
			// cms_net_port_force
			// 
			this->cms_net_port_force->Name = L"cms_net_port_force";
			this->cms_net_port_force->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_force->Text = L"强制结束进程";
			this->cms_net_port_force->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_force_Click);
			// 
			// toolStripSeparator81
			// 
			this->toolStripSeparator81->Name = L"toolStripSeparator81";
			this->toolStripSeparator81->Size = System::Drawing::Size(187, 6);
			// 
			// cms_net_port_explorer
			// 
			this->cms_net_port_explorer->Name = L"cms_net_port_explorer";
			this->cms_net_port_explorer->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_explorer->Text = L"定位到映像文件";
			this->cms_net_port_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_explorer_Click);
			// 
			// cms_net_port_explorer2
			// 
			this->cms_net_port_explorer2->Name = L"cms_net_port_explorer2";
			this->cms_net_port_explorer2->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_explorer2->Text = L"定位到映像文件2";
			this->cms_net_port_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_explorer2_Click);
			// 
			// cms_net_port_process_showProperty
			// 
			this->cms_net_port_process_showProperty->Name = L"cms_net_port_process_showProperty";
			this->cms_net_port_process_showProperty->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_process_showProperty->Text = L"查看进程映像文件属性";
			this->cms_net_port_process_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_process_showProperty_Click);
			// 
			// toolStripSeparator82
			// 
			this->toolStripSeparator82->Name = L"toolStripSeparator82";
			this->toolStripSeparator82->Size = System::Drawing::Size(187, 6);
			// 
			// cms_net_port_copy
			// 
			this->cms_net_port_copy->Name = L"cms_net_port_copy";
			this->cms_net_port_copy->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_copy->Text = L"复制";
			this->cms_net_port_copy->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_copy_Click);
			// 
			// cms_net_port_copy2
			// 
			this->cms_net_port_copy2->Name = L"cms_net_port_copy2";
			this->cms_net_port_copy2->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_copy2->Text = L"复制此处";
			this->cms_net_port_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_copy2_Click);
			// 
			// toolStripSeparator201
			// 
			this->toolStripSeparator201->Name = L"toolStripSeparator201";
			this->toolStripSeparator201->Size = System::Drawing::Size(187, 6);
			// 
			// cms_net_port_export
			// 
			this->cms_net_port_export->Name = L"cms_net_port_export";
			this->cms_net_port_export->Size = System::Drawing::Size(190, 22);
			this->cms_net_port_export->Text = L"导出";
			this->cms_net_port_export->Click += gcnew System::EventHandler(this, &Form1::cms_net_port_export_Click);
			// 
			// tp_net_iePlugin
			// 
			this->tp_net_iePlugin->Controls->Add(this->lv_net_iePlugin);
			this->tp_net_iePlugin->Location = System::Drawing::Point(4, 21);
			this->tp_net_iePlugin->Name = L"tp_net_iePlugin";
			this->tp_net_iePlugin->Padding = System::Windows::Forms::Padding(3);
			this->tp_net_iePlugin->Size = System::Drawing::Size(911, 454);
			this->tp_net_iePlugin->TabIndex = 1;
			this->tp_net_iePlugin->Text = L"IE插件";
			this->tp_net_iePlugin->UseVisualStyleBackColor = true;
			// 
			// lv_net_iePlugin
			// 
			this->lv_net_iePlugin->AllowColumnReorder = true;
			this->lv_net_iePlugin->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader73, 
				this->columnHeader72, this->columnHeader74, this->columnHeader75, this->columnHeader76});
			this->lv_net_iePlugin->ContextMenuStrip = this->cms_net_iePlugin;
			this->lv_net_iePlugin->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_net_iePlugin->FullRowSelect = true;
			this->lv_net_iePlugin->Location = System::Drawing::Point(3, 3);
			this->lv_net_iePlugin->MultiSelect = false;
			this->lv_net_iePlugin->Name = L"lv_net_iePlugin";
			this->lv_net_iePlugin->ShowItemToolTips = true;
			this->lv_net_iePlugin->Size = System::Drawing::Size(905, 448);
			this->lv_net_iePlugin->TabIndex = 0;
			this->lv_net_iePlugin->UseCompatibleStateImageBehavior = false;
			this->lv_net_iePlugin->View = System::Windows::Forms::View::Details;
			this->lv_net_iePlugin->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_net_iePlugin_ColumnClick);
			this->lv_net_iePlugin->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_net_iePlugin_ItemDrag);
			this->lv_net_iePlugin->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_net_iePlugin_MouseUp);
			// 
			// columnHeader73
			// 
			this->columnHeader73->Text = L"名称";
			this->columnHeader73->Width = 111;
			// 
			// columnHeader72
			// 
			this->columnHeader72->Text = L"类型";
			this->columnHeader72->Width = 110;
			// 
			// columnHeader74
			// 
			this->columnHeader74->Text = L"模块路径";
			this->columnHeader74->Width = 250;
			// 
			// columnHeader75
			// 
			this->columnHeader75->Text = L"文件厂商";
			this->columnHeader75->Width = 151;
			// 
			// columnHeader76
			// 
			this->columnHeader76->Text = L"CLSID";
			this->columnHeader76->Width = 260;
			// 
			// cms_net_iePlugin
			// 
			this->cms_net_iePlugin->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(21) {this->cms_net_iePlugin_refresh, 
				this->toolStripSeparator101, this->cms_net_iePlugin_delete1, this->cms_net_iePlugin_delete2, this->toolStripSeparator102, this->cms_net_iePlugin_sigverif, 
				this->cms_net_iePlugin_sigverifAll, this->toolStripSeparator103, this->cms_net_iePlugin_copy1, this->cms_net_iePlugin_copy2, 
				this->toolStripSeparator104, this->cms_net_iePlugin_onlineFind, this->cms_net_iePlugin_onlineAnalysis, this->toolStripSeparator105, 
				this->cms_net_iePlugin_explorer, this->cms_net_iePlugin_explorer2, this->cms_net_iePlugin_showProperty, this->toolStripSeparator106, 
				this->cms_net_iePlugin_reg, this->toolStripSeparator107, this->cms_net_iePlugin_export});
			this->cms_net_iePlugin->Name = L"cms_net_ieMenu";
			this->cms_net_iePlugin->Size = System::Drawing::Size(179, 354);
			// 
			// cms_net_iePlugin_refresh
			// 
			this->cms_net_iePlugin_refresh->Name = L"cms_net_iePlugin_refresh";
			this->cms_net_iePlugin_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_refresh->Text = L"刷新";
			this->cms_net_iePlugin_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_refresh_Click);
			// 
			// toolStripSeparator101
			// 
			this->toolStripSeparator101->Name = L"toolStripSeparator101";
			this->toolStripSeparator101->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_iePlugin_delete1
			// 
			this->cms_net_iePlugin_delete1->Name = L"cms_net_iePlugin_delete1";
			this->cms_net_iePlugin_delete1->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_delete1->Text = L"删除(注册表)";
			this->cms_net_iePlugin_delete1->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_delete1_Click);
			// 
			// cms_net_iePlugin_delete2
			// 
			this->cms_net_iePlugin_delete2->Name = L"cms_net_iePlugin_delete2";
			this->cms_net_iePlugin_delete2->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_delete2->Text = L"删除(注册表和文件)";
			this->cms_net_iePlugin_delete2->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_delete2_Click);
			// 
			// toolStripSeparator102
			// 
			this->toolStripSeparator102->Name = L"toolStripSeparator102";
			this->toolStripSeparator102->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_iePlugin_sigverif
			// 
			this->cms_net_iePlugin_sigverif->Name = L"cms_net_iePlugin_sigverif";
			this->cms_net_iePlugin_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_sigverif->Text = L"校验数字签名";
			this->cms_net_iePlugin_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_sigverif_Click);
			// 
			// cms_net_iePlugin_sigverifAll
			// 
			this->cms_net_iePlugin_sigverifAll->Name = L"cms_net_iePlugin_sigverifAll";
			this->cms_net_iePlugin_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_sigverifAll->Text = L"校验所有数字签名";
			this->cms_net_iePlugin_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_sigverifAll_Click);
			// 
			// toolStripSeparator103
			// 
			this->toolStripSeparator103->Name = L"toolStripSeparator103";
			this->toolStripSeparator103->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_iePlugin_copy1
			// 
			this->cms_net_iePlugin_copy1->Name = L"cms_net_iePlugin_copy1";
			this->cms_net_iePlugin_copy1->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_copy1->Text = L"复制插件名称";
			this->cms_net_iePlugin_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_copy1_Click);
			// 
			// cms_net_iePlugin_copy2
			// 
			this->cms_net_iePlugin_copy2->Name = L"cms_net_iePlugin_copy2";
			this->cms_net_iePlugin_copy2->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_copy2->Text = L"复制插件路径";
			this->cms_net_iePlugin_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_copy2_Click);
			// 
			// toolStripSeparator104
			// 
			this->toolStripSeparator104->Name = L"toolStripSeparator104";
			this->toolStripSeparator104->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_iePlugin_onlineFind
			// 
			this->cms_net_iePlugin_onlineFind->Name = L"cms_net_iePlugin_onlineFind";
			this->cms_net_iePlugin_onlineFind->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_onlineFind->Text = L"在线搜索插件名";
			this->cms_net_iePlugin_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_onlineFind_Click);
			// 
			// cms_net_iePlugin_onlineAnalysis
			// 
			this->cms_net_iePlugin_onlineAnalysis->Name = L"cms_net_iePlugin_onlineAnalysis";
			this->cms_net_iePlugin_onlineAnalysis->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_onlineAnalysis->Text = L"在线分析";
			this->cms_net_iePlugin_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_onlineAnalysis_Click);
			// 
			// toolStripSeparator105
			// 
			this->toolStripSeparator105->Name = L"toolStripSeparator105";
			this->toolStripSeparator105->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_iePlugin_explorer
			// 
			this->cms_net_iePlugin_explorer->Name = L"cms_net_iePlugin_explorer";
			this->cms_net_iePlugin_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_explorer->Text = L"定位到插件文件";
			this->cms_net_iePlugin_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_explorer_Click);
			// 
			// cms_net_iePlugin_explorer2
			// 
			this->cms_net_iePlugin_explorer2->Name = L"cms_net_iePlugin_explorer2";
			this->cms_net_iePlugin_explorer2->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_explorer2->Text = L"定位到插件文件2";
			this->cms_net_iePlugin_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_explorer2_Click);
			// 
			// cms_net_iePlugin_showProperty
			// 
			this->cms_net_iePlugin_showProperty->Name = L"cms_net_iePlugin_showProperty";
			this->cms_net_iePlugin_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_showProperty->Text = L"查看插件文件属性";
			this->cms_net_iePlugin_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_showProperty_Click);
			// 
			// toolStripSeparator106
			// 
			this->toolStripSeparator106->Name = L"toolStripSeparator106";
			this->toolStripSeparator106->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_iePlugin_reg
			// 
			this->cms_net_iePlugin_reg->Name = L"cms_net_iePlugin_reg";
			this->cms_net_iePlugin_reg->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_reg->Text = L"定位到注册表";
			this->cms_net_iePlugin_reg->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_reg_Click);
			// 
			// toolStripSeparator107
			// 
			this->toolStripSeparator107->Name = L"toolStripSeparator107";
			this->toolStripSeparator107->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_iePlugin_export
			// 
			this->cms_net_iePlugin_export->Name = L"cms_net_iePlugin_export";
			this->cms_net_iePlugin_export->Size = System::Drawing::Size(178, 22);
			this->cms_net_iePlugin_export->Text = L"导出";
			this->cms_net_iePlugin_export->Click += gcnew System::EventHandler(this, &Form1::cms_net_iePlugin_export_Click);
			// 
			// tp_net_ieMenu
			// 
			this->tp_net_ieMenu->Controls->Add(this->lv_net_ieMenu);
			this->tp_net_ieMenu->Location = System::Drawing::Point(4, 21);
			this->tp_net_ieMenu->Name = L"tp_net_ieMenu";
			this->tp_net_ieMenu->Padding = System::Windows::Forms::Padding(3);
			this->tp_net_ieMenu->Size = System::Drawing::Size(911, 454);
			this->tp_net_ieMenu->TabIndex = 2;
			this->tp_net_ieMenu->Text = L"IE右键菜单";
			this->tp_net_ieMenu->UseVisualStyleBackColor = true;
			// 
			// lv_net_ieMenu
			// 
			this->lv_net_ieMenu->AllowColumnReorder = true;
			this->lv_net_ieMenu->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(3) {this->columnHeader77, 
				this->columnHeader78, this->columnHeader79});
			this->lv_net_ieMenu->ContextMenuStrip = this->cms_net_ieMenu;
			this->lv_net_ieMenu->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_net_ieMenu->FullRowSelect = true;
			this->lv_net_ieMenu->Location = System::Drawing::Point(3, 3);
			this->lv_net_ieMenu->MultiSelect = false;
			this->lv_net_ieMenu->Name = L"lv_net_ieMenu";
			this->lv_net_ieMenu->ShowItemToolTips = true;
			this->lv_net_ieMenu->Size = System::Drawing::Size(905, 448);
			this->lv_net_ieMenu->TabIndex = 1;
			this->lv_net_ieMenu->UseCompatibleStateImageBehavior = false;
			this->lv_net_ieMenu->View = System::Windows::Forms::View::Details;
			this->lv_net_ieMenu->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_net_ieMenu_ColumnClick);
			this->lv_net_ieMenu->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_net_ieMenu_ItemDrag);
			this->lv_net_ieMenu->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_net_ieMenu_MouseUp);
			// 
			// columnHeader77
			// 
			this->columnHeader77->Text = L"名称";
			this->columnHeader77->Width = 157;
			// 
			// columnHeader78
			// 
			this->columnHeader78->Text = L"映像路径";
			this->columnHeader78->Width = 488;
			// 
			// columnHeader79
			// 
			this->columnHeader79->Text = L"文件厂商";
			this->columnHeader79->Width = 237;
			// 
			// cms_net_ieMenu
			// 
			this->cms_net_ieMenu->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(21) {this->cms_net_ieMenu_refresh, 
				this->toolStripSeparator94, this->cms_net_ieMenu_delete1, this->cms_net_ieMenu_delete2, this->toolStripSeparator95, this->cms_net_ieMenu_sigverif, 
				this->cms_net_ieMenu_sigverifAll, this->toolStripSeparator96, this->cms_net_ieMenu_copy1, this->cms_net_ieMenu_copy2, this->toolStripSeparator97, 
				this->cms_net_ieMenu_onlineFind, this->cms_net_ieMenu_onlineAnalysis, this->toolStripSeparator98, this->cms_net_ieMenu_explorer, 
				this->cms_net_ieMenu_explorer2, this->cms_net_ieMenu_showProperty, this->toolStripSeparator99, this->cms_net_ieMenu_reg, this->toolStripSeparator100, 
				this->cms_net_ieMenu_export});
			this->cms_net_ieMenu->Name = L"cms_net_ieMenu";
			this->cms_net_ieMenu->Size = System::Drawing::Size(179, 354);
			// 
			// cms_net_ieMenu_refresh
			// 
			this->cms_net_ieMenu_refresh->Name = L"cms_net_ieMenu_refresh";
			this->cms_net_ieMenu_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_refresh->Text = L"刷新";
			this->cms_net_ieMenu_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_refresh_Click);
			// 
			// toolStripSeparator94
			// 
			this->toolStripSeparator94->Name = L"toolStripSeparator94";
			this->toolStripSeparator94->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_ieMenu_delete1
			// 
			this->cms_net_ieMenu_delete1->Name = L"cms_net_ieMenu_delete1";
			this->cms_net_ieMenu_delete1->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_delete1->Text = L"删除(注册表)";
			this->cms_net_ieMenu_delete1->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_delete1_Click);
			// 
			// cms_net_ieMenu_delete2
			// 
			this->cms_net_ieMenu_delete2->Name = L"cms_net_ieMenu_delete2";
			this->cms_net_ieMenu_delete2->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_delete2->Text = L"删除(注册表和文件)";
			this->cms_net_ieMenu_delete2->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_delete2_Click);
			// 
			// toolStripSeparator95
			// 
			this->toolStripSeparator95->Name = L"toolStripSeparator95";
			this->toolStripSeparator95->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_ieMenu_sigverif
			// 
			this->cms_net_ieMenu_sigverif->Name = L"cms_net_ieMenu_sigverif";
			this->cms_net_ieMenu_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_sigverif->Text = L"校验数字签名";
			this->cms_net_ieMenu_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_sigverif_Click);
			// 
			// cms_net_ieMenu_sigverifAll
			// 
			this->cms_net_ieMenu_sigverifAll->Name = L"cms_net_ieMenu_sigverifAll";
			this->cms_net_ieMenu_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_sigverifAll->Text = L"校验所有数字签名";
			this->cms_net_ieMenu_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_sigverifAll_Click);
			// 
			// toolStripSeparator96
			// 
			this->toolStripSeparator96->Name = L"toolStripSeparator96";
			this->toolStripSeparator96->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_ieMenu_copy1
			// 
			this->cms_net_ieMenu_copy1->Name = L"cms_net_ieMenu_copy1";
			this->cms_net_ieMenu_copy1->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_copy1->Text = L"复制插件名称";
			this->cms_net_ieMenu_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_copy1_Click);
			// 
			// cms_net_ieMenu_copy2
			// 
			this->cms_net_ieMenu_copy2->Name = L"cms_net_ieMenu_copy2";
			this->cms_net_ieMenu_copy2->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_copy2->Text = L"复制插件路径";
			this->cms_net_ieMenu_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_copy2_Click);
			// 
			// toolStripSeparator97
			// 
			this->toolStripSeparator97->Name = L"toolStripSeparator97";
			this->toolStripSeparator97->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_ieMenu_onlineFind
			// 
			this->cms_net_ieMenu_onlineFind->Name = L"cms_net_ieMenu_onlineFind";
			this->cms_net_ieMenu_onlineFind->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_onlineFind->Text = L"在线搜索插件名";
			this->cms_net_ieMenu_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_onlineFind_Click);
			// 
			// cms_net_ieMenu_onlineAnalysis
			// 
			this->cms_net_ieMenu_onlineAnalysis->Name = L"cms_net_ieMenu_onlineAnalysis";
			this->cms_net_ieMenu_onlineAnalysis->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_onlineAnalysis->Text = L"在线分析";
			this->cms_net_ieMenu_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_onlineAnalysis_Click);
			// 
			// toolStripSeparator98
			// 
			this->toolStripSeparator98->Name = L"toolStripSeparator98";
			this->toolStripSeparator98->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_ieMenu_explorer
			// 
			this->cms_net_ieMenu_explorer->Name = L"cms_net_ieMenu_explorer";
			this->cms_net_ieMenu_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_explorer->Text = L"定位到插件文件";
			this->cms_net_ieMenu_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_explorer_Click);
			// 
			// cms_net_ieMenu_explorer2
			// 
			this->cms_net_ieMenu_explorer2->Name = L"cms_net_ieMenu_explorer2";
			this->cms_net_ieMenu_explorer2->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_explorer2->Text = L"定位到插件文件2";
			this->cms_net_ieMenu_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_explorer2_Click);
			// 
			// cms_net_ieMenu_showProperty
			// 
			this->cms_net_ieMenu_showProperty->Name = L"cms_net_ieMenu_showProperty";
			this->cms_net_ieMenu_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_showProperty->Text = L"查看插件文件属性";
			this->cms_net_ieMenu_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_showProperty_Click);
			// 
			// toolStripSeparator99
			// 
			this->toolStripSeparator99->Name = L"toolStripSeparator99";
			this->toolStripSeparator99->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_ieMenu_reg
			// 
			this->cms_net_ieMenu_reg->Name = L"cms_net_ieMenu_reg";
			this->cms_net_ieMenu_reg->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_reg->Text = L"定位到注册表";
			this->cms_net_ieMenu_reg->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_reg_Click);
			// 
			// toolStripSeparator100
			// 
			this->toolStripSeparator100->Name = L"toolStripSeparator100";
			this->toolStripSeparator100->Size = System::Drawing::Size(175, 6);
			// 
			// cms_net_ieMenu_export
			// 
			this->cms_net_ieMenu_export->Name = L"cms_net_ieMenu_export";
			this->cms_net_ieMenu_export->Size = System::Drawing::Size(178, 22);
			this->cms_net_ieMenu_export->Text = L"导出";
			this->cms_net_ieMenu_export->Click += gcnew System::EventHandler(this, &Form1::cms_net_ieMenu_export_Click);
			// 
			// tp_net_lsp
			// 
			this->tp_net_lsp->Controls->Add(this->lv_net_lsp);
			this->tp_net_lsp->Location = System::Drawing::Point(4, 21);
			this->tp_net_lsp->Name = L"tp_net_lsp";
			this->tp_net_lsp->Padding = System::Windows::Forms::Padding(3);
			this->tp_net_lsp->Size = System::Drawing::Size(911, 454);
			this->tp_net_lsp->TabIndex = 3;
			this->tp_net_lsp->Text = L"LSP";
			this->tp_net_lsp->UseVisualStyleBackColor = true;
			// 
			// lv_net_lsp
			// 
			this->lv_net_lsp->AllowColumnReorder = true;
			this->lv_net_lsp->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader80, 
				this->columnHeader81, this->columnHeader82, this->columnHeader83, this->columnHeader84});
			this->lv_net_lsp->ContextMenuStrip = this->cms_net_lsp;
			this->lv_net_lsp->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_net_lsp->FullRowSelect = true;
			this->lv_net_lsp->Location = System::Drawing::Point(3, 3);
			this->lv_net_lsp->MultiSelect = false;
			this->lv_net_lsp->Name = L"lv_net_lsp";
			this->lv_net_lsp->ShowItemToolTips = true;
			this->lv_net_lsp->Size = System::Drawing::Size(905, 448);
			this->lv_net_lsp->TabIndex = 0;
			this->lv_net_lsp->UseCompatibleStateImageBehavior = false;
			this->lv_net_lsp->View = System::Windows::Forms::View::Details;
			this->lv_net_lsp->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_net_lsp_ColumnClick);
			this->lv_net_lsp->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_net_lsp_ItemDrag);
			this->lv_net_lsp->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_net_lsp_MouseUp);
			// 
			// columnHeader80
			// 
			this->columnHeader80->Text = L"索引";
			this->columnHeader80->Width = 109;
			// 
			// columnHeader81
			// 
			this->columnHeader81->Text = L"名称";
			this->columnHeader81->Width = 167;
			// 
			// columnHeader82
			// 
			this->columnHeader82->Text = L"映像路径";
			this->columnHeader82->Width = 200;
			// 
			// columnHeader83
			// 
			this->columnHeader83->Text = L"文件厂商";
			this->columnHeader83->Width = 148;
			// 
			// columnHeader84
			// 
			this->columnHeader84->Text = L"CLSID";
			this->columnHeader84->Width = 256;
			// 
			// cms_net_lsp
			// 
			this->cms_net_lsp->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(20) {this->cms_net_lsp_refresh, 
				this->toolStripSeparator48, this->cms_net_lsp_sigverif, this->cms_net_lsp_sigverifAll, this->toolStripSeparator49, this->cms_net_lsp_fix, 
				this->toolStripSeparator50, this->cms_net_lsp_onlineFind, this->cms_net_lsp_onlineAalysis, this->toolStripSeparator51, this->cms_net_lsp_explorer, 
				this->cms_net_lsp_explorer2, this->cms_net_lsp_showProperty, this->toolStripSeparator52, this->cms_net_lsp_reg, this->toolStripSeparator53, 
				this->cms_net_lsp_copy, this->cms_net_lsp_copy2, this->toolStripSeparator202, this->cms_net_lsp_export});
			this->cms_net_lsp->Name = L"cms_net_lsp";
			this->cms_net_lsp->Size = System::Drawing::Size(167, 354);
			// 
			// cms_net_lsp_refresh
			// 
			this->cms_net_lsp_refresh->Name = L"cms_net_lsp_refresh";
			this->cms_net_lsp_refresh->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_refresh->Text = L"刷新";
			this->cms_net_lsp_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_refresh_Click);
			// 
			// toolStripSeparator48
			// 
			this->toolStripSeparator48->Name = L"toolStripSeparator48";
			this->toolStripSeparator48->Size = System::Drawing::Size(163, 6);
			// 
			// cms_net_lsp_sigverif
			// 
			this->cms_net_lsp_sigverif->Name = L"cms_net_lsp_sigverif";
			this->cms_net_lsp_sigverif->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_sigverif->Text = L"校验数字签名";
			this->cms_net_lsp_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_sigverif_Click);
			// 
			// cms_net_lsp_sigverifAll
			// 
			this->cms_net_lsp_sigverifAll->Name = L"cms_net_lsp_sigverifAll";
			this->cms_net_lsp_sigverifAll->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_sigverifAll->Text = L"校验所有数字签名";
			this->cms_net_lsp_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_sigverifAll_Click);
			// 
			// toolStripSeparator49
			// 
			this->toolStripSeparator49->Name = L"toolStripSeparator49";
			this->toolStripSeparator49->Size = System::Drawing::Size(163, 6);
			// 
			// cms_net_lsp_fix
			// 
			this->cms_net_lsp_fix->Name = L"cms_net_lsp_fix";
			this->cms_net_lsp_fix->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_fix->Text = L"修复LSP";
			this->cms_net_lsp_fix->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_fix_Click);
			// 
			// toolStripSeparator50
			// 
			this->toolStripSeparator50->Name = L"toolStripSeparator50";
			this->toolStripSeparator50->Size = System::Drawing::Size(163, 6);
			// 
			// cms_net_lsp_onlineFind
			// 
			this->cms_net_lsp_onlineFind->Name = L"cms_net_lsp_onlineFind";
			this->cms_net_lsp_onlineFind->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_onlineFind->Text = L"在线搜索名称";
			this->cms_net_lsp_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_onlineFind_Click);
			// 
			// cms_net_lsp_onlineAalysis
			// 
			this->cms_net_lsp_onlineAalysis->Name = L"cms_net_lsp_onlineAalysis";
			this->cms_net_lsp_onlineAalysis->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_onlineAalysis->Text = L"在线分析";
			this->cms_net_lsp_onlineAalysis->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_onlineAalysis_Click);
			// 
			// toolStripSeparator51
			// 
			this->toolStripSeparator51->Name = L"toolStripSeparator51";
			this->toolStripSeparator51->Size = System::Drawing::Size(163, 6);
			// 
			// cms_net_lsp_explorer
			// 
			this->cms_net_lsp_explorer->Name = L"cms_net_lsp_explorer";
			this->cms_net_lsp_explorer->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_explorer->Text = L"定位到映像文件";
			this->cms_net_lsp_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_explorer_Click);
			// 
			// cms_net_lsp_explorer2
			// 
			this->cms_net_lsp_explorer2->Name = L"cms_net_lsp_explorer2";
			this->cms_net_lsp_explorer2->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_explorer2->Text = L"定位到映像文件2";
			this->cms_net_lsp_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_explorer2_Click);
			// 
			// cms_net_lsp_showProperty
			// 
			this->cms_net_lsp_showProperty->Name = L"cms_net_lsp_showProperty";
			this->cms_net_lsp_showProperty->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_showProperty->Text = L"查看映像文件属性";
			this->cms_net_lsp_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_showProperty_Click);
			// 
			// toolStripSeparator52
			// 
			this->toolStripSeparator52->Name = L"toolStripSeparator52";
			this->toolStripSeparator52->Size = System::Drawing::Size(163, 6);
			// 
			// cms_net_lsp_reg
			// 
			this->cms_net_lsp_reg->Name = L"cms_net_lsp_reg";
			this->cms_net_lsp_reg->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_reg->Text = L"定位到注册表";
			this->cms_net_lsp_reg->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_reg_Click);
			// 
			// toolStripSeparator53
			// 
			this->toolStripSeparator53->Name = L"toolStripSeparator53";
			this->toolStripSeparator53->Size = System::Drawing::Size(163, 6);
			// 
			// cms_net_lsp_copy
			// 
			this->cms_net_lsp_copy->Name = L"cms_net_lsp_copy";
			this->cms_net_lsp_copy->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_copy->Text = L"复制";
			this->cms_net_lsp_copy->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_copy_Click);
			// 
			// cms_net_lsp_copy2
			// 
			this->cms_net_lsp_copy2->Name = L"cms_net_lsp_copy2";
			this->cms_net_lsp_copy2->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_copy2->Text = L"复制此处";
			this->cms_net_lsp_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_copy2_Click);
			// 
			// toolStripSeparator202
			// 
			this->toolStripSeparator202->Name = L"toolStripSeparator202";
			this->toolStripSeparator202->Size = System::Drawing::Size(163, 6);
			// 
			// cms_net_lsp_export
			// 
			this->cms_net_lsp_export->Name = L"cms_net_lsp_export";
			this->cms_net_lsp_export->Size = System::Drawing::Size(166, 22);
			this->cms_net_lsp_export->Text = L"导出";
			this->cms_net_lsp_export->Click += gcnew System::EventHandler(this, &Form1::cms_net_lsp_export_Click);
			// 
			// tp_net_host
			// 
			this->tp_net_host->Controls->Add(this->txt_net_host);
			this->tp_net_host->Location = System::Drawing::Point(4, 21);
			this->tp_net_host->Name = L"tp_net_host";
			this->tp_net_host->Padding = System::Windows::Forms::Padding(3);
			this->tp_net_host->Size = System::Drawing::Size(911, 454);
			this->tp_net_host->TabIndex = 4;
			this->tp_net_host->Text = L"Hosts文件";
			this->tp_net_host->UseVisualStyleBackColor = true;
			// 
			// txt_net_host
			// 
			this->txt_net_host->ContextMenuStrip = this->cms_net_host;
			this->txt_net_host->Dock = System::Windows::Forms::DockStyle::Fill;
			this->txt_net_host->Location = System::Drawing::Point(3, 3);
			this->txt_net_host->Multiline = true;
			this->txt_net_host->Name = L"txt_net_host";
			this->txt_net_host->Size = System::Drawing::Size(905, 448);
			this->txt_net_host->TabIndex = 0;
			this->txt_net_host->TextChanged += gcnew System::EventHandler(this, &Form1::txt_net_host_TextChanged);
			this->txt_net_host->MouseDown += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::txt_net_host_MouseDown);
			// 
			// cms_net_host
			// 
			this->cms_net_host->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(4) {this->cms_net_host_refresh, 
				this->toolStripSeparator92, this->cms_net_host_save, this->cms_net_host_saveas});
			this->cms_net_host->Name = L"cms_net_host";
			this->cms_net_host->Size = System::Drawing::Size(125, 76);
			// 
			// cms_net_host_refresh
			// 
			this->cms_net_host_refresh->Name = L"cms_net_host_refresh";
			this->cms_net_host_refresh->Size = System::Drawing::Size(124, 22);
			this->cms_net_host_refresh->Text = L"刷新";
			this->cms_net_host_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_net_host_refresh_Click);
			// 
			// toolStripSeparator92
			// 
			this->toolStripSeparator92->Name = L"toolStripSeparator92";
			this->toolStripSeparator92->Size = System::Drawing::Size(121, 6);
			// 
			// cms_net_host_save
			// 
			this->cms_net_host_save->Name = L"cms_net_host_save";
			this->cms_net_host_save->Size = System::Drawing::Size(124, 22);
			this->cms_net_host_save->Text = L"保存";
			this->cms_net_host_save->Click += gcnew System::EventHandler(this, &Form1::cms_net_host_save_Click);
			// 
			// cms_net_host_saveas
			// 
			this->cms_net_host_saveas->Name = L"cms_net_host_saveas";
			this->cms_net_host_saveas->Size = System::Drawing::Size(124, 22);
			this->cms_net_host_saveas->Text = L"另存为...";
			this->cms_net_host_saveas->Click += gcnew System::EventHandler(this, &Form1::cms_net_host_saveas_Click);
			// 
			// tp_app
			// 
			this->tp_app->Controls->Add(this->tc_app);
			this->tp_app->Location = System::Drawing::Point(4, 21);
			this->tp_app->Name = L"tp_app";
			this->tp_app->Padding = System::Windows::Forms::Padding(3);
			this->tp_app->Size = System::Drawing::Size(925, 485);
			this->tp_app->TabIndex = 5;
			this->tp_app->Text = L"应用层相关";
			this->tp_app->UseVisualStyleBackColor = true;
			// 
			// tc_app
			// 
			this->tc_app->Controls->Add(this->tp_app_msg);
			this->tc_app->Controls->Add(this->tp_app_hook);
			this->tc_app->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tc_app->Location = System::Drawing::Point(3, 3);
			this->tc_app->Name = L"tc_app";
			this->tc_app->SelectedIndex = 0;
			this->tc_app->Size = System::Drawing::Size(919, 479);
			this->tc_app->TabIndex = 0;
			this->tc_app->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::tc_app_SelectedIndexChanged);
			// 
			// tp_app_msg
			// 
			this->tp_app_msg->Controls->Add(this->lv_app_msg);
			this->tp_app_msg->Location = System::Drawing::Point(4, 21);
			this->tp_app_msg->Name = L"tp_app_msg";
			this->tp_app_msg->Padding = System::Windows::Forms::Padding(3);
			this->tp_app_msg->Size = System::Drawing::Size(911, 454);
			this->tp_app_msg->TabIndex = 0;
			this->tp_app_msg->Text = L"消息钩子";
			this->tp_app_msg->UseVisualStyleBackColor = true;
			// 
			// lv_app_msg
			// 
			this->lv_app_msg->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(7) {this->columnHeader139, 
				this->columnHeader140, this->columnHeader141, this->columnHeader142, this->columnHeader143, this->columnHeader144, this->columnHeader145});
			this->lv_app_msg->ContextMenuStrip = this->cms_app_msg;
			this->lv_app_msg->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_app_msg->FullRowSelect = true;
			this->lv_app_msg->Location = System::Drawing::Point(3, 3);
			this->lv_app_msg->MultiSelect = false;
			this->lv_app_msg->Name = L"lv_app_msg";
			this->lv_app_msg->Size = System::Drawing::Size(905, 448);
			this->lv_app_msg->TabIndex = 0;
			this->lv_app_msg->UseCompatibleStateImageBehavior = false;
			this->lv_app_msg->View = System::Windows::Forms::View::Details;
			this->lv_app_msg->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_app_msg_ColumnClick);
			this->lv_app_msg->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_app_msg_ItemDrag);
			this->lv_app_msg->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_app_msg_MouseUp);
			// 
			// columnHeader139
			// 
			this->columnHeader139->Text = L"句柄";
			this->columnHeader139->Width = 86;
			// 
			// columnHeader140
			// 
			this->columnHeader140->Text = L"类型";
			this->columnHeader140->Width = 88;
			// 
			// columnHeader141
			// 
			this->columnHeader141->Text = L"函数";
			this->columnHeader141->Width = 91;
			// 
			// columnHeader142
			// 
			this->columnHeader142->Text = L"模块名";
			this->columnHeader142->Width = 135;
			// 
			// columnHeader143
			// 
			this->columnHeader143->Text = L"线程ID";
			this->columnHeader143->Width = 66;
			// 
			// columnHeader144
			// 
			this->columnHeader144->Text = L"进程ID";
			this->columnHeader144->Width = 64;
			// 
			// columnHeader145
			// 
			this->columnHeader145->Text = L"进程路径";
			this->columnHeader145->Width = 311;
			// 
			// cms_app_msg
			// 
			this->cms_app_msg->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(8) {this->cms_app_msg_refresh, 
				this->toolStripSeparator138, this->cms_app_msg_only, this->toolStripSeparator155, this->cms_app_msg_unload, this->cms_app_msg_unloadAll, 
				this->toolStripSeparator156, this->cms_app_msg_export});
			this->cms_app_msg->Name = L"cms_app_msg";
			this->cms_app_msg->Size = System::Drawing::Size(167, 132);
			// 
			// cms_app_msg_refresh
			// 
			this->cms_app_msg_refresh->Name = L"cms_app_msg_refresh";
			this->cms_app_msg_refresh->Size = System::Drawing::Size(166, 22);
			this->cms_app_msg_refresh->Text = L"刷新";
			this->cms_app_msg_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_app_msg_refresh_Click);
			// 
			// toolStripSeparator138
			// 
			this->toolStripSeparator138->Name = L"toolStripSeparator138";
			this->toolStripSeparator138->Size = System::Drawing::Size(163, 6);
			// 
			// cms_app_msg_only
			// 
			this->cms_app_msg_only->Checked = true;
			this->cms_app_msg_only->CheckState = System::Windows::Forms::CheckState::Checked;
			this->cms_app_msg_only->Name = L"cms_app_msg_only";
			this->cms_app_msg_only->Size = System::Drawing::Size(166, 22);
			this->cms_app_msg_only->Text = L"仅显示全局钩子";
			this->cms_app_msg_only->Click += gcnew System::EventHandler(this, &Form1::cms_app_msg_only_Click);
			// 
			// toolStripSeparator155
			// 
			this->toolStripSeparator155->Name = L"toolStripSeparator155";
			this->toolStripSeparator155->Size = System::Drawing::Size(163, 6);
			// 
			// cms_app_msg_unload
			// 
			this->cms_app_msg_unload->Name = L"cms_app_msg_unload";
			this->cms_app_msg_unload->Size = System::Drawing::Size(166, 22);
			this->cms_app_msg_unload->Text = L"卸载";
			this->cms_app_msg_unload->Click += gcnew System::EventHandler(this, &Form1::cms_app_msg_unload_Click);
			// 
			// cms_app_msg_unloadAll
			// 
			this->cms_app_msg_unloadAll->Name = L"cms_app_msg_unloadAll";
			this->cms_app_msg_unloadAll->Size = System::Drawing::Size(166, 22);
			this->cms_app_msg_unloadAll->Text = L"卸载所有全局钩子";
			this->cms_app_msg_unloadAll->Click += gcnew System::EventHandler(this, &Form1::cms_app_msg_unloadAll_Click);
			// 
			// toolStripSeparator156
			// 
			this->toolStripSeparator156->Name = L"toolStripSeparator156";
			this->toolStripSeparator156->Size = System::Drawing::Size(163, 6);
			// 
			// cms_app_msg_export
			// 
			this->cms_app_msg_export->Name = L"cms_app_msg_export";
			this->cms_app_msg_export->Size = System::Drawing::Size(166, 22);
			this->cms_app_msg_export->Text = L"导出";
			this->cms_app_msg_export->Click += gcnew System::EventHandler(this, &Form1::cms_app_msg_export_Click);
			// 
			// tp_app_hook
			// 
			this->tp_app_hook->Controls->Add(this->splitContainer11);
			this->tp_app_hook->Location = System::Drawing::Point(4, 21);
			this->tp_app_hook->Name = L"tp_app_hook";
			this->tp_app_hook->Padding = System::Windows::Forms::Padding(3);
			this->tp_app_hook->Size = System::Drawing::Size(911, 454);
			this->tp_app_hook->TabIndex = 1;
			this->tp_app_hook->Text = L"进程钩子";
			this->tp_app_hook->UseVisualStyleBackColor = true;
			// 
			// splitContainer11
			// 
			this->splitContainer11->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer11->Location = System::Drawing::Point(3, 3);
			this->splitContainer11->Name = L"splitContainer11";
			// 
			// splitContainer11.Panel1
			// 
			this->splitContainer11->Panel1->Controls->Add(this->lv_app_hook2);
			// 
			// splitContainer11.Panel2
			// 
			this->splitContainer11->Panel2->Controls->Add(this->lv_app_hook);
			this->splitContainer11->Size = System::Drawing::Size(905, 448);
			this->splitContainer11->SplitterDistance = 178;
			this->splitContainer11->TabIndex = 0;
			// 
			// lv_app_hook2
			// 
			this->lv_app_hook2->AllowColumnReorder = true;
			this->lv_app_hook2->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(1) {this->columnHeader156});
			this->lv_app_hook2->ContextMenuStrip = this->cms_app_hook2;
			this->lv_app_hook2->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_app_hook2->FullRowSelect = true;
			this->lv_app_hook2->Location = System::Drawing::Point(0, 0);
			this->lv_app_hook2->MultiSelect = false;
			this->lv_app_hook2->Name = L"lv_app_hook2";
			this->lv_app_hook2->ShowItemToolTips = true;
			this->lv_app_hook2->Size = System::Drawing::Size(178, 448);
			this->lv_app_hook2->TabIndex = 1;
			this->lv_app_hook2->UseCompatibleStateImageBehavior = false;
			this->lv_app_hook2->View = System::Windows::Forms::View::Details;
			this->lv_app_hook2->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_app_hook2_ItemDrag);
			this->lv_app_hook2->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_app_hook2_MouseUp);
			// 
			// columnHeader156
			// 
			this->columnHeader156->Text = L"[id]进程名称";
			this->columnHeader156->Width = 157;
			// 
			// cms_app_hook2
			// 
			this->cms_app_hook2->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(4) {this->cms_app_hook2_refresh, 
				this->toolStripSeparator198, this->cms_app_hook2_check, this->cms_app_hook2_checkAll});
			this->cms_app_hook2->Name = L"contextMenuStrip1";
			this->cms_app_hook2->Size = System::Drawing::Size(119, 76);
			// 
			// cms_app_hook2_refresh
			// 
			this->cms_app_hook2_refresh->Name = L"cms_app_hook2_refresh";
			this->cms_app_hook2_refresh->Size = System::Drawing::Size(118, 22);
			this->cms_app_hook2_refresh->Text = L"刷新";
			this->cms_app_hook2_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_app_hook2_refresh_Click);
			// 
			// toolStripSeparator198
			// 
			this->toolStripSeparator198->Name = L"toolStripSeparator198";
			this->toolStripSeparator198->Size = System::Drawing::Size(115, 6);
			// 
			// cms_app_hook2_check
			// 
			this->cms_app_hook2_check->Name = L"cms_app_hook2_check";
			this->cms_app_hook2_check->Size = System::Drawing::Size(118, 22);
			this->cms_app_hook2_check->Text = L"检测";
			this->cms_app_hook2_check->Click += gcnew System::EventHandler(this, &Form1::cms_app_hook2_check_Click);
			// 
			// cms_app_hook2_checkAll
			// 
			this->cms_app_hook2_checkAll->Name = L"cms_app_hook2_checkAll";
			this->cms_app_hook2_checkAll->Size = System::Drawing::Size(118, 22);
			this->cms_app_hook2_checkAll->Text = L"检测所有";
			this->cms_app_hook2_checkAll->Click += gcnew System::EventHandler(this, &Form1::cms_app_hook2_checkAll_Click);
			// 
			// lv_app_hook
			// 
			this->lv_app_hook->AllowColumnReorder = true;
			this->lv_app_hook->AllowDrop = true;
			this->lv_app_hook->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader151, 
				this->columnHeader152, this->columnHeader153, this->columnHeader154, this->columnHeader155});
			this->lv_app_hook->ContextMenuStrip = this->cms_app_hook;
			this->lv_app_hook->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_app_hook->FullRowSelect = true;
			this->lv_app_hook->Location = System::Drawing::Point(0, 0);
			this->lv_app_hook->MultiSelect = false;
			this->lv_app_hook->Name = L"lv_app_hook";
			this->lv_app_hook->ShowItemToolTips = true;
			this->lv_app_hook->Size = System::Drawing::Size(723, 448);
			this->lv_app_hook->TabIndex = 1;
			this->lv_app_hook->UseCompatibleStateImageBehavior = false;
			this->lv_app_hook->View = System::Windows::Forms::View::Details;
			this->lv_app_hook->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_app_hook_ItemDrag);
			this->lv_app_hook->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_app_hook_DragDrop);
			this->lv_app_hook->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_app_hook_DragEnter);
			this->lv_app_hook->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_app_hook_MouseUp);
			// 
			// columnHeader151
			// 
			this->columnHeader151->Text = L"挂钩对象";
			this->columnHeader151->Width = 175;
			// 
			// columnHeader152
			// 
			this->columnHeader152->Text = L"挂钩位置";
			this->columnHeader152->Width = 183;
			// 
			// columnHeader153
			// 
			this->columnHeader153->Text = L"钩子类型";
			this->columnHeader153->Width = 100;
			// 
			// columnHeader154
			// 
			this->columnHeader154->Text = L"挂钩处当前值";
			this->columnHeader154->Width = 109;
			// 
			// columnHeader155
			// 
			this->columnHeader155->Text = L"挂钩处原始值";
			this->columnHeader155->Width = 128;
			// 
			// cms_app_hook
			// 
			this->cms_app_hook->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(6) {this->cms_app_hook_refresh, 
				this->toolStripSeparator199, this->cms_app_hook_recover, this->cms_app_hook_recoverAll, this->toolStripSeparator200, this->cms_app_hook_export});
			this->cms_app_hook->Name = L"contextMenuStrip1";
			this->cms_app_hook->Size = System::Drawing::Size(119, 104);
			// 
			// cms_app_hook_refresh
			// 
			this->cms_app_hook_refresh->Name = L"cms_app_hook_refresh";
			this->cms_app_hook_refresh->Size = System::Drawing::Size(118, 22);
			this->cms_app_hook_refresh->Text = L"刷新";
			this->cms_app_hook_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_app_hook_refresh_Click);
			// 
			// toolStripSeparator199
			// 
			this->toolStripSeparator199->Name = L"toolStripSeparator199";
			this->toolStripSeparator199->Size = System::Drawing::Size(115, 6);
			// 
			// cms_app_hook_recover
			// 
			this->cms_app_hook_recover->Name = L"cms_app_hook_recover";
			this->cms_app_hook_recover->Size = System::Drawing::Size(118, 22);
			this->cms_app_hook_recover->Text = L"恢复";
			this->cms_app_hook_recover->Click += gcnew System::EventHandler(this, &Form1::cms_app_hook_recover_Click);
			// 
			// cms_app_hook_recoverAll
			// 
			this->cms_app_hook_recoverAll->Name = L"cms_app_hook_recoverAll";
			this->cms_app_hook_recoverAll->Size = System::Drawing::Size(118, 22);
			this->cms_app_hook_recoverAll->Text = L"恢复所有";
			this->cms_app_hook_recoverAll->Click += gcnew System::EventHandler(this, &Form1::cms_app_hook_recoverAll_Click);
			// 
			// toolStripSeparator200
			// 
			this->toolStripSeparator200->Name = L"toolStripSeparator200";
			this->toolStripSeparator200->Size = System::Drawing::Size(115, 6);
			// 
			// cms_app_hook_export
			// 
			this->cms_app_hook_export->Name = L"cms_app_hook_export";
			this->cms_app_hook_export->Size = System::Drawing::Size(118, 22);
			this->cms_app_hook_export->Text = L"导出";
			this->cms_app_hook_export->Click += gcnew System::EventHandler(this, &Form1::cms_app_hook_export_Click);
			// 
			// tp_kernel
			// 
			this->tp_kernel->Controls->Add(this->tc_kernel);
			this->tp_kernel->Location = System::Drawing::Point(4, 21);
			this->tp_kernel->Name = L"tp_kernel";
			this->tp_kernel->Padding = System::Windows::Forms::Padding(3);
			this->tp_kernel->Size = System::Drawing::Size(925, 485);
			this->tp_kernel->TabIndex = 4;
			this->tp_kernel->Text = L"内核相关";
			this->tp_kernel->UseVisualStyleBackColor = true;
			// 
			// tc_kernel
			// 
			this->tc_kernel->Controls->Add(this->tp_kernel_ssdt);
			this->tc_kernel->Controls->Add(this->tp_kernel_shadow);
			this->tc_kernel->Controls->Add(this->tp_kernel_fsd);
			this->tc_kernel->Controls->Add(this->tp_kernel_callback);
			this->tc_kernel->Controls->Add(this->tp_kernel_filter);
			this->tc_kernel->Controls->Add(this->tp_kernel_hook);
			this->tc_kernel->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tc_kernel->Location = System::Drawing::Point(3, 3);
			this->tc_kernel->Name = L"tc_kernel";
			this->tc_kernel->SelectedIndex = 0;
			this->tc_kernel->Size = System::Drawing::Size(919, 479);
			this->tc_kernel->TabIndex = 0;
			this->tc_kernel->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::tc_kernel_SelectedIndexChanged);
			// 
			// tp_kernel_ssdt
			// 
			this->tp_kernel_ssdt->Controls->Add(this->lv_kernel_ssdt);
			this->tp_kernel_ssdt->Location = System::Drawing::Point(4, 21);
			this->tp_kernel_ssdt->Name = L"tp_kernel_ssdt";
			this->tp_kernel_ssdt->Padding = System::Windows::Forms::Padding(3);
			this->tp_kernel_ssdt->Size = System::Drawing::Size(911, 454);
			this->tp_kernel_ssdt->TabIndex = 0;
			this->tp_kernel_ssdt->Text = L"SSDT";
			this->tp_kernel_ssdt->UseVisualStyleBackColor = true;
			// 
			// lv_kernel_ssdt
			// 
			this->lv_kernel_ssdt->AllowColumnReorder = true;
			this->lv_kernel_ssdt->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader31, 
				this->columnHeader32, this->columnHeader33, this->columnHeader34, this->columnHeader35});
			this->lv_kernel_ssdt->ContextMenuStrip = this->cms_kernel_ssdt;
			this->lv_kernel_ssdt->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_kernel_ssdt->FullRowSelect = true;
			this->lv_kernel_ssdt->Location = System::Drawing::Point(3, 3);
			this->lv_kernel_ssdt->Name = L"lv_kernel_ssdt";
			this->lv_kernel_ssdt->ShowItemToolTips = true;
			this->lv_kernel_ssdt->Size = System::Drawing::Size(905, 448);
			this->lv_kernel_ssdt->TabIndex = 0;
			this->lv_kernel_ssdt->UseCompatibleStateImageBehavior = false;
			this->lv_kernel_ssdt->View = System::Windows::Forms::View::Details;
			this->lv_kernel_ssdt->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_kernel_ssdt_ColumnClick);
			this->lv_kernel_ssdt->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_kernel_ssdt_ItemDrag);
			this->lv_kernel_ssdt->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_kernel_ssdt_MouseUp);
			// 
			// columnHeader31
			// 
			this->columnHeader31->Text = L"序号";
			this->columnHeader31->Width = 79;
			// 
			// columnHeader32
			// 
			this->columnHeader32->Text = L"函数名称";
			this->columnHeader32->Width = 190;
			// 
			// columnHeader33
			// 
			this->columnHeader33->Text = L"当前函数地址";
			this->columnHeader33->Width = 136;
			// 
			// columnHeader34
			// 
			this->columnHeader34->Text = L"原始函数地址";
			this->columnHeader34->Width = 136;
			// 
			// columnHeader35
			// 
			this->columnHeader35->Text = L"当前函数所在模块";
			this->columnHeader35->Width = 330;
			// 
			// cms_kernel_ssdt
			// 
			this->cms_kernel_ssdt->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(18) {this->cms_kernel_ssdt_refresh, 
				this->toolStripSeparator67, this->cms_kernel_ssdt_only, this->toolStripSeparator68, this->cms_kernel_ssdt_disasmCur, this->cms_kernel_ssdt_disasmOri, 
				this->toolStripSeparator129, this->cms_kernel_ssdt_sigverif, this->cms_kernel_ssdt_sigverifAll, this->toolStripSeparator77, this->cms_kernel_ssdt_recovery, 
				this->cms_kernel_ssdt_recoveryAll, this->toolStripSeparator78, this->cms_kernel_ssdt_explorer, this->cms_kernel_ssdt_explorer2, 
				this->cms_kernel_ssdt_showProperty, this->toolStripSeparator79, this->cms_kernel_ssdt_export});
			this->cms_kernel_ssdt->Name = L"cms_kernel_ssdt";
			this->cms_kernel_ssdt->Size = System::Drawing::Size(179, 304);
			// 
			// cms_kernel_ssdt_refresh
			// 
			this->cms_kernel_ssdt_refresh->Name = L"cms_kernel_ssdt_refresh";
			this->cms_kernel_ssdt_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_refresh->Text = L"刷新";
			this->cms_kernel_ssdt_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_refresh_Click);
			// 
			// toolStripSeparator67
			// 
			this->toolStripSeparator67->Name = L"toolStripSeparator67";
			this->toolStripSeparator67->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_ssdt_only
			// 
			this->cms_kernel_ssdt_only->Checked = true;
			this->cms_kernel_ssdt_only->CheckState = System::Windows::Forms::CheckState::Checked;
			this->cms_kernel_ssdt_only->Name = L"cms_kernel_ssdt_only";
			this->cms_kernel_ssdt_only->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_only->Text = L"仅显示挂钩函数";
			this->cms_kernel_ssdt_only->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_only_Click);
			// 
			// toolStripSeparator68
			// 
			this->toolStripSeparator68->Name = L"toolStripSeparator68";
			this->toolStripSeparator68->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_ssdt_disasmCur
			// 
			this->cms_kernel_ssdt_disasmCur->Name = L"cms_kernel_ssdt_disasmCur";
			this->cms_kernel_ssdt_disasmCur->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_disasmCur->Text = L"反汇编当前函数地址";
			this->cms_kernel_ssdt_disasmCur->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_disasmCur_Click);
			// 
			// cms_kernel_ssdt_disasmOri
			// 
			this->cms_kernel_ssdt_disasmOri->Name = L"cms_kernel_ssdt_disasmOri";
			this->cms_kernel_ssdt_disasmOri->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_disasmOri->Text = L"反汇编原始函数地址";
			this->cms_kernel_ssdt_disasmOri->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_disasmOri_Click);
			// 
			// toolStripSeparator129
			// 
			this->toolStripSeparator129->Name = L"toolStripSeparator129";
			this->toolStripSeparator129->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_ssdt_sigverif
			// 
			this->cms_kernel_ssdt_sigverif->Name = L"cms_kernel_ssdt_sigverif";
			this->cms_kernel_ssdt_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_sigverif->Text = L"校验数字签名";
			this->cms_kernel_ssdt_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_sigverif_Click);
			// 
			// cms_kernel_ssdt_sigverifAll
			// 
			this->cms_kernel_ssdt_sigverifAll->Name = L"cms_kernel_ssdt_sigverifAll";
			this->cms_kernel_ssdt_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_sigverifAll->Text = L"校验所有数字签名";
			this->cms_kernel_ssdt_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_sigverifAll_Click);
			// 
			// toolStripSeparator77
			// 
			this->toolStripSeparator77->Name = L"toolStripSeparator77";
			this->toolStripSeparator77->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_ssdt_recovery
			// 
			this->cms_kernel_ssdt_recovery->Name = L"cms_kernel_ssdt_recovery";
			this->cms_kernel_ssdt_recovery->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_recovery->Text = L"恢复";
			this->cms_kernel_ssdt_recovery->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_recovery_Click);
			// 
			// cms_kernel_ssdt_recoveryAll
			// 
			this->cms_kernel_ssdt_recoveryAll->Name = L"cms_kernel_ssdt_recoveryAll";
			this->cms_kernel_ssdt_recoveryAll->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_recoveryAll->Text = L"恢复所有";
			this->cms_kernel_ssdt_recoveryAll->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_recoveryAll_Click);
			// 
			// toolStripSeparator78
			// 
			this->toolStripSeparator78->Name = L"toolStripSeparator78";
			this->toolStripSeparator78->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_ssdt_explorer
			// 
			this->cms_kernel_ssdt_explorer->Name = L"cms_kernel_ssdt_explorer";
			this->cms_kernel_ssdt_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_explorer->Text = L"定位到模块文件";
			this->cms_kernel_ssdt_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_explorer_Click);
			// 
			// cms_kernel_ssdt_explorer2
			// 
			this->cms_kernel_ssdt_explorer2->Name = L"cms_kernel_ssdt_explorer2";
			this->cms_kernel_ssdt_explorer2->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_explorer2->Text = L"定位到模块文件2";
			this->cms_kernel_ssdt_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_explorer2_Click);
			// 
			// cms_kernel_ssdt_showProperty
			// 
			this->cms_kernel_ssdt_showProperty->Name = L"cms_kernel_ssdt_showProperty";
			this->cms_kernel_ssdt_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_showProperty->Text = L"查看模块文件属性";
			this->cms_kernel_ssdt_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_showProperty_Click);
			// 
			// toolStripSeparator79
			// 
			this->toolStripSeparator79->Name = L"toolStripSeparator79";
			this->toolStripSeparator79->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_ssdt_export
			// 
			this->cms_kernel_ssdt_export->Name = L"cms_kernel_ssdt_export";
			this->cms_kernel_ssdt_export->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_ssdt_export->Text = L"导出";
			this->cms_kernel_ssdt_export->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_ssdt_export_Click);
			// 
			// tp_kernel_shadow
			// 
			this->tp_kernel_shadow->Controls->Add(this->lv_kernel_shadow);
			this->tp_kernel_shadow->Location = System::Drawing::Point(4, 21);
			this->tp_kernel_shadow->Name = L"tp_kernel_shadow";
			this->tp_kernel_shadow->Padding = System::Windows::Forms::Padding(3);
			this->tp_kernel_shadow->Size = System::Drawing::Size(911, 454);
			this->tp_kernel_shadow->TabIndex = 1;
			this->tp_kernel_shadow->Text = L"Shadow SSDT";
			this->tp_kernel_shadow->UseVisualStyleBackColor = true;
			// 
			// lv_kernel_shadow
			// 
			this->lv_kernel_shadow->AllowColumnReorder = true;
			this->lv_kernel_shadow->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader37, 
				this->columnHeader38, this->columnHeader39, this->columnHeader40, this->columnHeader41});
			this->lv_kernel_shadow->ContextMenuStrip = this->cms_kernel_shadow;
			this->lv_kernel_shadow->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_kernel_shadow->FullRowSelect = true;
			this->lv_kernel_shadow->Location = System::Drawing::Point(3, 3);
			this->lv_kernel_shadow->Name = L"lv_kernel_shadow";
			this->lv_kernel_shadow->ShowItemToolTips = true;
			this->lv_kernel_shadow->Size = System::Drawing::Size(905, 448);
			this->lv_kernel_shadow->TabIndex = 0;
			this->lv_kernel_shadow->UseCompatibleStateImageBehavior = false;
			this->lv_kernel_shadow->View = System::Windows::Forms::View::Details;
			this->lv_kernel_shadow->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_kernel_shadow_ColumnClick);
			this->lv_kernel_shadow->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_kernel_shadow_ItemDrag);
			this->lv_kernel_shadow->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_kernel_shadow_MouseUp);
			// 
			// columnHeader37
			// 
			this->columnHeader37->Text = L"序号";
			this->columnHeader37->Width = 79;
			// 
			// columnHeader38
			// 
			this->columnHeader38->Text = L"函数名称";
			this->columnHeader38->Width = 190;
			// 
			// columnHeader39
			// 
			this->columnHeader39->Text = L"当前函数地址";
			this->columnHeader39->Width = 136;
			// 
			// columnHeader40
			// 
			this->columnHeader40->Text = L"原始函数地址";
			this->columnHeader40->Width = 136;
			// 
			// columnHeader41
			// 
			this->columnHeader41->Text = L"当前函数所在模块";
			this->columnHeader41->Width = 327;
			// 
			// cms_kernel_shadow
			// 
			this->cms_kernel_shadow->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(18) {this->cms_kernel_shadow_refresh, 
				this->toolStripSeparator88, this->cms_kernel_shadow_only, this->toolStripSeparator89, this->cms_kernel_shadow_disasmCur, this->cms_kernel_shadow_disasmOri, 
				this->toolStripSeparator130, this->cms_kernel_shadow_sigverif, this->cms_kernel_shadow_sigverifAll, this->toolStripSeparator90, 
				this->cms_kernel_shadow_recovery, this->cms_kernel_shadow_recoveryAll, this->toolStripSeparator91, this->cms_kernel_shadow_explorer, 
				this->cms_kernel_shadow_explorer2, this->cms_kernel_shadow_showProperty, this->toolStripSeparator126, this->cms_kernel_export});
			this->cms_kernel_shadow->Name = L"cms_kernel_ssdt";
			this->cms_kernel_shadow->Size = System::Drawing::Size(179, 304);
			// 
			// cms_kernel_shadow_refresh
			// 
			this->cms_kernel_shadow_refresh->Name = L"cms_kernel_shadow_refresh";
			this->cms_kernel_shadow_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_refresh->Text = L"刷新";
			this->cms_kernel_shadow_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_refresh_Click);
			// 
			// toolStripSeparator88
			// 
			this->toolStripSeparator88->Name = L"toolStripSeparator88";
			this->toolStripSeparator88->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_shadow_only
			// 
			this->cms_kernel_shadow_only->Checked = true;
			this->cms_kernel_shadow_only->CheckState = System::Windows::Forms::CheckState::Checked;
			this->cms_kernel_shadow_only->Name = L"cms_kernel_shadow_only";
			this->cms_kernel_shadow_only->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_only->Text = L"仅显示挂钩函数";
			this->cms_kernel_shadow_only->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_only_Click);
			// 
			// toolStripSeparator89
			// 
			this->toolStripSeparator89->Name = L"toolStripSeparator89";
			this->toolStripSeparator89->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_shadow_disasmCur
			// 
			this->cms_kernel_shadow_disasmCur->Name = L"cms_kernel_shadow_disasmCur";
			this->cms_kernel_shadow_disasmCur->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_disasmCur->Text = L"反汇编当前函数地址";
			this->cms_kernel_shadow_disasmCur->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_disasmCur_Click);
			// 
			// cms_kernel_shadow_disasmOri
			// 
			this->cms_kernel_shadow_disasmOri->Name = L"cms_kernel_shadow_disasmOri";
			this->cms_kernel_shadow_disasmOri->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_disasmOri->Text = L"反汇编原始函数地址";
			this->cms_kernel_shadow_disasmOri->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_disasmOri_Click);
			// 
			// toolStripSeparator130
			// 
			this->toolStripSeparator130->Name = L"toolStripSeparator130";
			this->toolStripSeparator130->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_shadow_sigverif
			// 
			this->cms_kernel_shadow_sigverif->Name = L"cms_kernel_shadow_sigverif";
			this->cms_kernel_shadow_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_sigverif->Text = L"校验数字签名";
			this->cms_kernel_shadow_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_sigverif_Click);
			// 
			// cms_kernel_shadow_sigverifAll
			// 
			this->cms_kernel_shadow_sigverifAll->Name = L"cms_kernel_shadow_sigverifAll";
			this->cms_kernel_shadow_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_sigverifAll->Text = L"校验所有数字签名";
			this->cms_kernel_shadow_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_sigverifAll_Click);
			// 
			// toolStripSeparator90
			// 
			this->toolStripSeparator90->Name = L"toolStripSeparator90";
			this->toolStripSeparator90->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_shadow_recovery
			// 
			this->cms_kernel_shadow_recovery->Name = L"cms_kernel_shadow_recovery";
			this->cms_kernel_shadow_recovery->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_recovery->Text = L"恢复";
			this->cms_kernel_shadow_recovery->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_recovery_Click);
			// 
			// cms_kernel_shadow_recoveryAll
			// 
			this->cms_kernel_shadow_recoveryAll->Name = L"cms_kernel_shadow_recoveryAll";
			this->cms_kernel_shadow_recoveryAll->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_recoveryAll->Text = L"恢复所有";
			this->cms_kernel_shadow_recoveryAll->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_recoveryAll_Click);
			// 
			// toolStripSeparator91
			// 
			this->toolStripSeparator91->Name = L"toolStripSeparator91";
			this->toolStripSeparator91->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_shadow_explorer
			// 
			this->cms_kernel_shadow_explorer->Name = L"cms_kernel_shadow_explorer";
			this->cms_kernel_shadow_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_explorer->Text = L"定位到模块文件";
			this->cms_kernel_shadow_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_explorer_Click);
			// 
			// cms_kernel_shadow_explorer2
			// 
			this->cms_kernel_shadow_explorer2->Name = L"cms_kernel_shadow_explorer2";
			this->cms_kernel_shadow_explorer2->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_explorer2->Text = L"定位到模块文件2";
			this->cms_kernel_shadow_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_explorer2_Click);
			// 
			// cms_kernel_shadow_showProperty
			// 
			this->cms_kernel_shadow_showProperty->Name = L"cms_kernel_shadow_showProperty";
			this->cms_kernel_shadow_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_shadow_showProperty->Text = L"查看模块文件属性";
			this->cms_kernel_shadow_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_shadow_showProperty_Click);
			// 
			// toolStripSeparator126
			// 
			this->toolStripSeparator126->Name = L"toolStripSeparator126";
			this->toolStripSeparator126->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_export
			// 
			this->cms_kernel_export->Name = L"cms_kernel_export";
			this->cms_kernel_export->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_export->Text = L"导出";
			this->cms_kernel_export->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_export_Click);
			// 
			// tp_kernel_fsd
			// 
			this->tp_kernel_fsd->Controls->Add(this->lv_kernel_fsd);
			this->tp_kernel_fsd->Location = System::Drawing::Point(4, 21);
			this->tp_kernel_fsd->Name = L"tp_kernel_fsd";
			this->tp_kernel_fsd->Padding = System::Windows::Forms::Padding(3);
			this->tp_kernel_fsd->Size = System::Drawing::Size(911, 454);
			this->tp_kernel_fsd->TabIndex = 5;
			this->tp_kernel_fsd->Text = L"FSD";
			this->tp_kernel_fsd->UseVisualStyleBackColor = true;
			// 
			// lv_kernel_fsd
			// 
			this->lv_kernel_fsd->AllowColumnReorder = true;
			this->lv_kernel_fsd->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(6) {this->columnHeader49, 
				this->columnHeader50, this->columnHeader51, this->columnHeader52, this->columnHeader53, this->columnHeader54});
			this->lv_kernel_fsd->ContextMenuStrip = this->cms_kernel_fsd;
			this->lv_kernel_fsd->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_kernel_fsd->FullRowSelect = true;
			this->lv_kernel_fsd->Location = System::Drawing::Point(3, 3);
			this->lv_kernel_fsd->MultiSelect = false;
			this->lv_kernel_fsd->Name = L"lv_kernel_fsd";
			this->lv_kernel_fsd->ShowItemToolTips = true;
			this->lv_kernel_fsd->Size = System::Drawing::Size(905, 448);
			this->lv_kernel_fsd->TabIndex = 1;
			this->lv_kernel_fsd->UseCompatibleStateImageBehavior = false;
			this->lv_kernel_fsd->View = System::Windows::Forms::View::Details;
			this->lv_kernel_fsd->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_kernel_fsd_ColumnClick);
			this->lv_kernel_fsd->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_kernel_fsd_ItemDrag);
			this->lv_kernel_fsd->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_kernel_fsd_MouseUp);
			// 
			// columnHeader49
			// 
			this->columnHeader49->Text = L"序号";
			// 
			// columnHeader50
			// 
			this->columnHeader50->Text = L"函数名称";
			this->columnHeader50->Width = 128;
			// 
			// columnHeader51
			// 
			this->columnHeader51->Text = L"当前函数地址";
			this->columnHeader51->Width = 115;
			// 
			// columnHeader52
			// 
			this->columnHeader52->Text = L"原始函数地址";
			this->columnHeader52->Width = 111;
			// 
			// columnHeader53
			// 
			this->columnHeader53->Text = L"当前函数所在模块";
			this->columnHeader53->Width = 247;
			// 
			// columnHeader54
			// 
			this->columnHeader54->Text = L"文件厂商";
			this->columnHeader54->Width = 215;
			// 
			// cms_kernel_fsd
			// 
			this->cms_kernel_fsd->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(17) {this->cms_kernel_fsd_refresh, 
				this->toolStripSeparator140, this->cms_kernel_fsd_only, this->toolStripSeparator141, this->cms_kernel_fsd_disasmCur, this->cms_kernel_fsd_disasmOri, 
				this->toolStripSeparator142, this->cms_kernel_fsd_sigverif, this->cms_kernel_fsd_sigverifAll, this->toolStripSeparator143, this->cms_kernel_fsd_recovery, 
				this->cms_kernel_fsd_recoveryAll, this->toolStripSeparator144, this->cms_kernel_fsd_explorer, this->cms_kernel_fsd_showProperty, 
				this->toolStripSeparator145, this->cms_kernel_fsd_export});
			this->cms_kernel_fsd->Name = L"cms_kernel_ssdt";
			this->cms_kernel_fsd->Size = System::Drawing::Size(179, 282);
			// 
			// cms_kernel_fsd_refresh
			// 
			this->cms_kernel_fsd_refresh->Name = L"cms_kernel_fsd_refresh";
			this->cms_kernel_fsd_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_refresh->Text = L"刷新";
			this->cms_kernel_fsd_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_refresh_Click);
			// 
			// toolStripSeparator140
			// 
			this->toolStripSeparator140->Name = L"toolStripSeparator140";
			this->toolStripSeparator140->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_fsd_only
			// 
			this->cms_kernel_fsd_only->Name = L"cms_kernel_fsd_only";
			this->cms_kernel_fsd_only->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_only->Text = L"仅显示挂钩函数";
			this->cms_kernel_fsd_only->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_only_Click);
			// 
			// toolStripSeparator141
			// 
			this->toolStripSeparator141->Name = L"toolStripSeparator141";
			this->toolStripSeparator141->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_fsd_disasmCur
			// 
			this->cms_kernel_fsd_disasmCur->Name = L"cms_kernel_fsd_disasmCur";
			this->cms_kernel_fsd_disasmCur->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_disasmCur->Text = L"反汇编当前函数地址";
			this->cms_kernel_fsd_disasmCur->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_disasmCur_Click);
			// 
			// cms_kernel_fsd_disasmOri
			// 
			this->cms_kernel_fsd_disasmOri->Name = L"cms_kernel_fsd_disasmOri";
			this->cms_kernel_fsd_disasmOri->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_disasmOri->Text = L"反汇编原始函数地址";
			this->cms_kernel_fsd_disasmOri->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_disasmOri_Click);
			// 
			// toolStripSeparator142
			// 
			this->toolStripSeparator142->Name = L"toolStripSeparator142";
			this->toolStripSeparator142->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_fsd_sigverif
			// 
			this->cms_kernel_fsd_sigverif->Name = L"cms_kernel_fsd_sigverif";
			this->cms_kernel_fsd_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_sigverif->Text = L"校验数字签名";
			this->cms_kernel_fsd_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_sigverif_Click);
			// 
			// cms_kernel_fsd_sigverifAll
			// 
			this->cms_kernel_fsd_sigverifAll->Name = L"cms_kernel_fsd_sigverifAll";
			this->cms_kernel_fsd_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_sigverifAll->Text = L"校验所有数字签名";
			this->cms_kernel_fsd_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_sigverifAll_Click);
			// 
			// toolStripSeparator143
			// 
			this->toolStripSeparator143->Name = L"toolStripSeparator143";
			this->toolStripSeparator143->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_fsd_recovery
			// 
			this->cms_kernel_fsd_recovery->Name = L"cms_kernel_fsd_recovery";
			this->cms_kernel_fsd_recovery->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_recovery->Text = L"恢复";
			this->cms_kernel_fsd_recovery->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_recovery_Click);
			// 
			// cms_kernel_fsd_recoveryAll
			// 
			this->cms_kernel_fsd_recoveryAll->Name = L"cms_kernel_fsd_recoveryAll";
			this->cms_kernel_fsd_recoveryAll->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_recoveryAll->Text = L"恢复所有";
			this->cms_kernel_fsd_recoveryAll->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_recoveryAll_Click);
			// 
			// toolStripSeparator144
			// 
			this->toolStripSeparator144->Name = L"toolStripSeparator144";
			this->toolStripSeparator144->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_fsd_explorer
			// 
			this->cms_kernel_fsd_explorer->Name = L"cms_kernel_fsd_explorer";
			this->cms_kernel_fsd_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_explorer->Text = L"定位到模块文件";
			this->cms_kernel_fsd_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_explorer_Click);
			// 
			// cms_kernel_fsd_showProperty
			// 
			this->cms_kernel_fsd_showProperty->Name = L"cms_kernel_fsd_showProperty";
			this->cms_kernel_fsd_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_showProperty->Text = L"查看模块文件属性";
			this->cms_kernel_fsd_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_showProperty_Click);
			// 
			// toolStripSeparator145
			// 
			this->toolStripSeparator145->Name = L"toolStripSeparator145";
			this->toolStripSeparator145->Size = System::Drawing::Size(175, 6);
			// 
			// cms_kernel_fsd_export
			// 
			this->cms_kernel_fsd_export->Name = L"cms_kernel_fsd_export";
			this->cms_kernel_fsd_export->Size = System::Drawing::Size(178, 22);
			this->cms_kernel_fsd_export->Text = L"导出";
			this->cms_kernel_fsd_export->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_fsd_export_Click);
			// 
			// tp_kernel_callback
			// 
			this->tp_kernel_callback->Controls->Add(this->lv_kernel_callback);
			this->tp_kernel_callback->Location = System::Drawing::Point(4, 21);
			this->tp_kernel_callback->Name = L"tp_kernel_callback";
			this->tp_kernel_callback->Padding = System::Windows::Forms::Padding(3);
			this->tp_kernel_callback->Size = System::Drawing::Size(911, 454);
			this->tp_kernel_callback->TabIndex = 6;
			this->tp_kernel_callback->Text = L"系统回调";
			this->tp_kernel_callback->UseVisualStyleBackColor = true;
			// 
			// lv_kernel_callback
			// 
			this->lv_kernel_callback->AllowColumnReorder = true;
			this->lv_kernel_callback->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader55, 
				this->columnHeader56, this->columnHeader57, this->columnHeader58, this->columnHeader59});
			this->lv_kernel_callback->ContextMenuStrip = this->cms_kernel_callback;
			this->lv_kernel_callback->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_kernel_callback->FullRowSelect = true;
			this->lv_kernel_callback->Location = System::Drawing::Point(3, 3);
			this->lv_kernel_callback->MultiSelect = false;
			this->lv_kernel_callback->Name = L"lv_kernel_callback";
			this->lv_kernel_callback->ShowItemToolTips = true;
			this->lv_kernel_callback->Size = System::Drawing::Size(905, 448);
			this->lv_kernel_callback->TabIndex = 1;
			this->lv_kernel_callback->UseCompatibleStateImageBehavior = false;
			this->lv_kernel_callback->View = System::Windows::Forms::View::Details;
			this->lv_kernel_callback->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_kernel_callback_ColumnClick);
			this->lv_kernel_callback->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_kernel_callback_ItemDrag);
			this->lv_kernel_callback->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_kernel_callback_MouseUp);
			// 
			// columnHeader55
			// 
			this->columnHeader55->Text = L"回调入口";
			this->columnHeader55->Width = 87;
			// 
			// columnHeader56
			// 
			this->columnHeader56->Text = L"类型";
			this->columnHeader56->Width = 128;
			// 
			// columnHeader57
			// 
			this->columnHeader57->Text = L"路径";
			this->columnHeader57->Width = 287;
			// 
			// columnHeader58
			// 
			this->columnHeader58->Text = L"文件厂商";
			this->columnHeader58->Width = 190;
			// 
			// columnHeader59
			// 
			this->columnHeader59->Text = L"备注";
			this->columnHeader59->Width = 179;
			// 
			// cms_kernel_callback
			// 
			this->cms_kernel_callback->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(11) {this->cms_kernel_callback_refresh, 
				this->toolStripSeparator25, this->cms_kernel_callback_delete, this->toolStripSeparator133, this->cms_kernel_callback_disasm, 
				this->toolStripSeparator134, this->cms_kernel_callback_explorer, this->cms_kernel_callback_explorer2, this->cms_kernel_callback_showProperty, 
				this->toolStripSeparator135, this->cms_kernel_callback_export});
			this->cms_kernel_callback->Name = L"cms_kernel_callback";
			this->cms_kernel_callback->Size = System::Drawing::Size(167, 182);
			// 
			// cms_kernel_callback_refresh
			// 
			this->cms_kernel_callback_refresh->Name = L"cms_kernel_callback_refresh";
			this->cms_kernel_callback_refresh->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_callback_refresh->Text = L"刷新";
			this->cms_kernel_callback_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_callback_refresh_Click);
			// 
			// toolStripSeparator25
			// 
			this->toolStripSeparator25->Name = L"toolStripSeparator25";
			this->toolStripSeparator25->Size = System::Drawing::Size(163, 6);
			// 
			// cms_kernel_callback_delete
			// 
			this->cms_kernel_callback_delete->Name = L"cms_kernel_callback_delete";
			this->cms_kernel_callback_delete->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_callback_delete->Text = L"删除";
			this->cms_kernel_callback_delete->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_callback_delete_Click);
			// 
			// toolStripSeparator133
			// 
			this->toolStripSeparator133->Name = L"toolStripSeparator133";
			this->toolStripSeparator133->Size = System::Drawing::Size(163, 6);
			// 
			// cms_kernel_callback_disasm
			// 
			this->cms_kernel_callback_disasm->Name = L"cms_kernel_callback_disasm";
			this->cms_kernel_callback_disasm->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_callback_disasm->Text = L"反汇编回调入口";
			this->cms_kernel_callback_disasm->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_callback_disasm_Click);
			// 
			// toolStripSeparator134
			// 
			this->toolStripSeparator134->Name = L"toolStripSeparator134";
			this->toolStripSeparator134->Size = System::Drawing::Size(163, 6);
			// 
			// cms_kernel_callback_explorer
			// 
			this->cms_kernel_callback_explorer->Name = L"cms_kernel_callback_explorer";
			this->cms_kernel_callback_explorer->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_callback_explorer->Text = L"定位到映像文件";
			this->cms_kernel_callback_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_callback_explorer_Click);
			// 
			// cms_kernel_callback_explorer2
			// 
			this->cms_kernel_callback_explorer2->Name = L"cms_kernel_callback_explorer2";
			this->cms_kernel_callback_explorer2->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_callback_explorer2->Text = L"定位到映像文件2";
			this->cms_kernel_callback_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_callback_explorer2_Click);
			// 
			// cms_kernel_callback_showProperty
			// 
			this->cms_kernel_callback_showProperty->Name = L"cms_kernel_callback_showProperty";
			this->cms_kernel_callback_showProperty->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_callback_showProperty->Text = L"查看映像文件属性";
			this->cms_kernel_callback_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_callback_showProperty_Click);
			// 
			// toolStripSeparator135
			// 
			this->toolStripSeparator135->Name = L"toolStripSeparator135";
			this->toolStripSeparator135->Size = System::Drawing::Size(163, 6);
			// 
			// cms_kernel_callback_export
			// 
			this->cms_kernel_callback_export->Name = L"cms_kernel_callback_export";
			this->cms_kernel_callback_export->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_callback_export->Text = L"导出";
			this->cms_kernel_callback_export->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_callback_export_Click);
			// 
			// tp_kernel_filter
			// 
			this->tp_kernel_filter->Controls->Add(this->lv_kernel_filter);
			this->tp_kernel_filter->Location = System::Drawing::Point(4, 21);
			this->tp_kernel_filter->Name = L"tp_kernel_filter";
			this->tp_kernel_filter->Padding = System::Windows::Forms::Padding(3);
			this->tp_kernel_filter->Size = System::Drawing::Size(911, 454);
			this->tp_kernel_filter->TabIndex = 7;
			this->tp_kernel_filter->Text = L"过滤驱动";
			this->tp_kernel_filter->UseVisualStyleBackColor = true;
			// 
			// lv_kernel_filter
			// 
			this->lv_kernel_filter->AllowColumnReorder = true;
			this->lv_kernel_filter->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(6) {this->columnHeader60, 
				this->columnHeader61, this->columnHeader62, this->columnHeader63, this->columnHeader64, this->columnHeader65});
			this->lv_kernel_filter->ContextMenuStrip = this->cms_kernel_filter;
			this->lv_kernel_filter->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_kernel_filter->FullRowSelect = true;
			this->lv_kernel_filter->Location = System::Drawing::Point(3, 3);
			this->lv_kernel_filter->MultiSelect = false;
			this->lv_kernel_filter->Name = L"lv_kernel_filter";
			this->lv_kernel_filter->ShowItemToolTips = true;
			this->lv_kernel_filter->Size = System::Drawing::Size(905, 448);
			this->lv_kernel_filter->TabIndex = 1;
			this->lv_kernel_filter->UseCompatibleStateImageBehavior = false;
			this->lv_kernel_filter->View = System::Windows::Forms::View::Details;
			this->lv_kernel_filter->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_kernel_filter_ColumnClick);
			this->lv_kernel_filter->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_kernel_filter_ItemDrag);
			this->lv_kernel_filter->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_kernel_filter_MouseUp);
			// 
			// columnHeader60
			// 
			this->columnHeader60->Text = L"类型";
			// 
			// columnHeader61
			// 
			this->columnHeader61->Text = L"驱动对象名";
			this->columnHeader61->Width = 128;
			// 
			// columnHeader62
			// 
			this->columnHeader62->Text = L"驱动路径";
			this->columnHeader62->Width = 262;
			// 
			// columnHeader63
			// 
			this->columnHeader63->Text = L"设备";
			this->columnHeader63->Width = 94;
			// 
			// columnHeader64
			// 
			this->columnHeader64->Text = L"宿主驱动对象名";
			this->columnHeader64->Width = 125;
			// 
			// columnHeader65
			// 
			this->columnHeader65->Text = L"文件厂商";
			this->columnHeader65->Width = 195;
			// 
			// cms_kernel_filter
			// 
			this->cms_kernel_filter->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(9) {this->cms_kernel_filter_refresh, 
				this->toolStripSeparator136, this->cms_kernel_filter_delete, this->toolStripSeparator137, this->cms_kernel_filter_explorer, this->cms_kernel_filter_explorer2, 
				this->cms_kernel_filter_showProperty, this->toolStripSeparator139, this->cms_kernel_filter_export});
			this->cms_kernel_filter->Name = L"cms_kernel_callback";
			this->cms_kernel_filter->Size = System::Drawing::Size(167, 154);
			// 
			// cms_kernel_filter_refresh
			// 
			this->cms_kernel_filter_refresh->Name = L"cms_kernel_filter_refresh";
			this->cms_kernel_filter_refresh->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_filter_refresh->Text = L"刷新";
			this->cms_kernel_filter_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_filter_refresh_Click);
			// 
			// toolStripSeparator136
			// 
			this->toolStripSeparator136->Name = L"toolStripSeparator136";
			this->toolStripSeparator136->Size = System::Drawing::Size(163, 6);
			// 
			// cms_kernel_filter_delete
			// 
			this->cms_kernel_filter_delete->Name = L"cms_kernel_filter_delete";
			this->cms_kernel_filter_delete->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_filter_delete->Text = L"删除";
			this->cms_kernel_filter_delete->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_filter_delete_Click);
			// 
			// toolStripSeparator137
			// 
			this->toolStripSeparator137->Name = L"toolStripSeparator137";
			this->toolStripSeparator137->Size = System::Drawing::Size(163, 6);
			// 
			// cms_kernel_filter_explorer
			// 
			this->cms_kernel_filter_explorer->Name = L"cms_kernel_filter_explorer";
			this->cms_kernel_filter_explorer->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_filter_explorer->Text = L"定位到映像文件";
			this->cms_kernel_filter_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_filter_explorer_Click);
			// 
			// cms_kernel_filter_explorer2
			// 
			this->cms_kernel_filter_explorer2->Name = L"cms_kernel_filter_explorer2";
			this->cms_kernel_filter_explorer2->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_filter_explorer2->Text = L"定位到映像文件2";
			this->cms_kernel_filter_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_filter_explorer2_Click);
			// 
			// cms_kernel_filter_showProperty
			// 
			this->cms_kernel_filter_showProperty->Name = L"cms_kernel_filter_showProperty";
			this->cms_kernel_filter_showProperty->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_filter_showProperty->Text = L"查看映像文件属性";
			this->cms_kernel_filter_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_filter_showProperty_Click);
			// 
			// toolStripSeparator139
			// 
			this->toolStripSeparator139->Name = L"toolStripSeparator139";
			this->toolStripSeparator139->Size = System::Drawing::Size(163, 6);
			// 
			// cms_kernel_filter_export
			// 
			this->cms_kernel_filter_export->Name = L"cms_kernel_filter_export";
			this->cms_kernel_filter_export->Size = System::Drawing::Size(166, 22);
			this->cms_kernel_filter_export->Text = L"导出";
			this->cms_kernel_filter_export->Click += gcnew System::EventHandler(this, &Form1::cms_kernel_filter_export_Click);
			// 
			// tp_kernel_hook
			// 
			this->tp_kernel_hook->Controls->Add(this->lv_kernel_hook);
			this->tp_kernel_hook->Location = System::Drawing::Point(4, 21);
			this->tp_kernel_hook->Name = L"tp_kernel_hook";
			this->tp_kernel_hook->Padding = System::Windows::Forms::Padding(3);
			this->tp_kernel_hook->Size = System::Drawing::Size(911, 454);
			this->tp_kernel_hook->TabIndex = 8;
			this->tp_kernel_hook->Text = L"内核钩子";
			this->tp_kernel_hook->UseVisualStyleBackColor = true;
			// 
			// lv_kernel_hook
			// 
			this->lv_kernel_hook->AllowColumnReorder = true;
			this->lv_kernel_hook->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader146, 
				this->columnHeader147, this->columnHeader148, this->columnHeader149, this->columnHeader150});
			this->lv_kernel_hook->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_kernel_hook->FullRowSelect = true;
			this->lv_kernel_hook->Location = System::Drawing::Point(3, 3);
			this->lv_kernel_hook->MultiSelect = false;
			this->lv_kernel_hook->Name = L"lv_kernel_hook";
			this->lv_kernel_hook->Size = System::Drawing::Size(905, 448);
			this->lv_kernel_hook->TabIndex = 0;
			this->lv_kernel_hook->UseCompatibleStateImageBehavior = false;
			this->lv_kernel_hook->View = System::Windows::Forms::View::Details;
			// 
			// columnHeader146
			// 
			this->columnHeader146->Text = L"挂钩对象";
			this->columnHeader146->Width = 222;
			// 
			// columnHeader147
			// 
			this->columnHeader147->Text = L"挂钩位置";
			this->columnHeader147->Width = 222;
			// 
			// columnHeader148
			// 
			this->columnHeader148->Text = L"钩子类型";
			this->columnHeader148->Width = 114;
			// 
			// columnHeader149
			// 
			this->columnHeader149->Text = L"挂钩处当前值";
			this->columnHeader149->Width = 144;
			// 
			// columnHeader150
			// 
			this->columnHeader150->Text = L"挂钩处原始值";
			this->columnHeader150->Width = 162;
			// 
			// tabPage4
			// 
			this->tabPage4->Controls->Add(this->lv_sysmodule);
			this->tabPage4->Location = System::Drawing::Point(4, 21);
			this->tabPage4->Name = L"tabPage4";
			this->tabPage4->Padding = System::Windows::Forms::Padding(3);
			this->tabPage4->Size = System::Drawing::Size(925, 485);
			this->tabPage4->TabIndex = 3;
			this->tabPage4->Text = L"驱动模块";
			this->tabPage4->UseVisualStyleBackColor = true;
			// 
			// lv_sysmodule
			// 
			this->lv_sysmodule->AllowColumnReorder = true;
			this->lv_sysmodule->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(7) {this->columnHeader23, 
				this->columnHeader24, this->columnHeader25, this->columnHeader27, this->columnHeader28, this->columnHeader29, this->columnHeader30});
			this->lv_sysmodule->ContextMenuStrip = this->cms_sysmodule;
			this->lv_sysmodule->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_sysmodule->FullRowSelect = true;
			this->lv_sysmodule->Location = System::Drawing::Point(3, 3);
			this->lv_sysmodule->Name = L"lv_sysmodule";
			this->lv_sysmodule->ShowItemToolTips = true;
			this->lv_sysmodule->Size = System::Drawing::Size(919, 479);
			this->lv_sysmodule->TabIndex = 0;
			this->lv_sysmodule->UseCompatibleStateImageBehavior = false;
			this->lv_sysmodule->View = System::Windows::Forms::View::Details;
			this->lv_sysmodule->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_sysmodule_ColumnClick);
			this->lv_sysmodule->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_sysmodule_ItemDrag);
			this->lv_sysmodule->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_sysmodule_MouseUp);
			// 
			// columnHeader23
			// 
			this->columnHeader23->Text = L"驱动名称";
			this->columnHeader23->Width = 83;
			// 
			// columnHeader24
			// 
			this->columnHeader24->Text = L"基地址";
			this->columnHeader24->Width = 94;
			// 
			// columnHeader25
			// 
			this->columnHeader25->Text = L"大小";
			this->columnHeader25->Width = 88;
			// 
			// columnHeader27
			// 
			this->columnHeader27->Text = L"驱动路径";
			this->columnHeader27->Width = 277;
			// 
			// columnHeader28
			// 
			this->columnHeader28->Text = L"服务名";
			this->columnHeader28->Width = 88;
			// 
			// columnHeader29
			// 
			this->columnHeader29->Text = L"加载顺序";
			this->columnHeader29->Width = 67;
			// 
			// columnHeader30
			// 
			this->columnHeader30->Text = L"文件厂商";
			this->columnHeader30->Width = 196;
			// 
			// cms_sysmodule
			// 
			this->cms_sysmodule->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(21) {this->cms_sysmodule_refresh, 
				this->toolStripSeparator23, this->cms_sysmodule_delete1, this->cms_sysmodule_delete2, this->toolStripSeparator24, this->cms_sysmodule_sigverif, 
				this->cms_sysmodule_sigverifAll, this->toolStripSeparator26, this->cms_sysmodule_copy1, this->cms_sysmodule_copy2, this->toolStripSeparator27, 
				this->cms_sysmodule_onlineFind, this->cms_sysmodule_onlineAnalysis, this->toolStripSeparator28, this->cms_sysmodule_explorer, 
				this->cms_sysmodule_explorer2, this->cms_sysmodule_showProperty, this->toolStripSeparator29, this->cms_sysmodule_reg, this->toolStripSeparator30, 
				this->cms_sysmodule_export});
			this->cms_sysmodule->Name = L"cms_sysmodule";
			this->cms_sysmodule->Size = System::Drawing::Size(203, 354);
			// 
			// cms_sysmodule_refresh
			// 
			this->cms_sysmodule_refresh->Name = L"cms_sysmodule_refresh";
			this->cms_sysmodule_refresh->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_refresh->Text = L"刷新";
			this->cms_sysmodule_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_refresh_Click);
			// 
			// toolStripSeparator23
			// 
			this->toolStripSeparator23->Name = L"toolStripSeparator23";
			this->toolStripSeparator23->Size = System::Drawing::Size(199, 6);
			// 
			// cms_sysmodule_delete1
			// 
			this->cms_sysmodule_delete1->Name = L"cms_sysmodule_delete1";
			this->cms_sysmodule_delete1->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_delete1->Text = L"删除驱动(文件)";
			this->cms_sysmodule_delete1->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_delete1_Click);
			// 
			// cms_sysmodule_delete2
			// 
			this->cms_sysmodule_delete2->Name = L"cms_sysmodule_delete2";
			this->cms_sysmodule_delete2->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_delete2->Text = L"删除驱动(文件和注册表)";
			this->cms_sysmodule_delete2->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_delete2_Click);
			// 
			// toolStripSeparator24
			// 
			this->toolStripSeparator24->Name = L"toolStripSeparator24";
			this->toolStripSeparator24->Size = System::Drawing::Size(199, 6);
			// 
			// cms_sysmodule_sigverif
			// 
			this->cms_sysmodule_sigverif->Name = L"cms_sysmodule_sigverif";
			this->cms_sysmodule_sigverif->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_sigverif->Text = L"校验数字签名";
			this->cms_sysmodule_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_sigverif_Click);
			// 
			// cms_sysmodule_sigverifAll
			// 
			this->cms_sysmodule_sigverifAll->Name = L"cms_sysmodule_sigverifAll";
			this->cms_sysmodule_sigverifAll->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_sigverifAll->Text = L"校验所有数字签名";
			this->cms_sysmodule_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_sigverifAll_Click);
			// 
			// toolStripSeparator26
			// 
			this->toolStripSeparator26->Name = L"toolStripSeparator26";
			this->toolStripSeparator26->Size = System::Drawing::Size(199, 6);
			// 
			// cms_sysmodule_copy1
			// 
			this->cms_sysmodule_copy1->Name = L"cms_sysmodule_copy1";
			this->cms_sysmodule_copy1->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_copy1->Text = L"复制驱动名";
			this->cms_sysmodule_copy1->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_copy1_Click);
			// 
			// cms_sysmodule_copy2
			// 
			this->cms_sysmodule_copy2->Name = L"cms_sysmodule_copy2";
			this->cms_sysmodule_copy2->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_copy2->Text = L"复制驱动路径";
			this->cms_sysmodule_copy2->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_copy2_Click);
			// 
			// toolStripSeparator27
			// 
			this->toolStripSeparator27->Name = L"toolStripSeparator27";
			this->toolStripSeparator27->Size = System::Drawing::Size(199, 6);
			// 
			// cms_sysmodule_onlineFind
			// 
			this->cms_sysmodule_onlineFind->Name = L"cms_sysmodule_onlineFind";
			this->cms_sysmodule_onlineFind->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_onlineFind->Text = L"在线搜索驱动名";
			this->cms_sysmodule_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_onlineFind_Click);
			// 
			// cms_sysmodule_onlineAnalysis
			// 
			this->cms_sysmodule_onlineAnalysis->Name = L"cms_sysmodule_onlineAnalysis";
			this->cms_sysmodule_onlineAnalysis->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_onlineAnalysis->Text = L"在线分析";
			this->cms_sysmodule_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_onlineAnalysis_Click);
			// 
			// toolStripSeparator28
			// 
			this->toolStripSeparator28->Name = L"toolStripSeparator28";
			this->toolStripSeparator28->Size = System::Drawing::Size(199, 6);
			// 
			// cms_sysmodule_explorer
			// 
			this->cms_sysmodule_explorer->Name = L"cms_sysmodule_explorer";
			this->cms_sysmodule_explorer->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_explorer->Text = L"定位到驱动文件";
			this->cms_sysmodule_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_explorer_Click);
			// 
			// cms_sysmodule_explorer2
			// 
			this->cms_sysmodule_explorer2->Name = L"cms_sysmodule_explorer2";
			this->cms_sysmodule_explorer2->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_explorer2->Text = L"定位到驱动文件2";
			this->cms_sysmodule_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_explorer2_Click);
			// 
			// cms_sysmodule_showProperty
			// 
			this->cms_sysmodule_showProperty->Name = L"cms_sysmodule_showProperty";
			this->cms_sysmodule_showProperty->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_showProperty->Text = L"查看驱动文件属性";
			this->cms_sysmodule_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_showProperty_Click);
			// 
			// toolStripSeparator29
			// 
			this->toolStripSeparator29->Name = L"toolStripSeparator29";
			this->toolStripSeparator29->Size = System::Drawing::Size(199, 6);
			// 
			// cms_sysmodule_reg
			// 
			this->cms_sysmodule_reg->Name = L"cms_sysmodule_reg";
			this->cms_sysmodule_reg->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_reg->Text = L"定位到注册表";
			this->cms_sysmodule_reg->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_reg_Click);
			// 
			// toolStripSeparator30
			// 
			this->toolStripSeparator30->Name = L"toolStripSeparator30";
			this->toolStripSeparator30->Size = System::Drawing::Size(199, 6);
			// 
			// cms_sysmodule_export
			// 
			this->cms_sysmodule_export->Name = L"cms_sysmodule_export";
			this->cms_sysmodule_export->Size = System::Drawing::Size(202, 22);
			this->cms_sysmodule_export->Text = L"导出";
			this->cms_sysmodule_export->Click += gcnew System::EventHandler(this, &Form1::cms_sysmodule_export_Click);
			// 
			// tp_eventlog
			// 
			this->tp_eventlog->Controls->Add(this->lv_eventlog);
			this->tp_eventlog->Location = System::Drawing::Point(4, 21);
			this->tp_eventlog->Name = L"tp_eventlog";
			this->tp_eventlog->Padding = System::Windows::Forms::Padding(3);
			this->tp_eventlog->Size = System::Drawing::Size(925, 485);
			this->tp_eventlog->TabIndex = 2;
			this->tp_eventlog->Text = L"事件日志";
			this->tp_eventlog->UseVisualStyleBackColor = true;
			// 
			// lv_eventlog
			// 
			this->lv_eventlog->AllowColumnReorder = true;
			this->lv_eventlog->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(9) {this->columnHeader14, 
				this->columnHeader15, this->columnHeader16, this->columnHeader17, this->columnHeader18, this->columnHeader19, this->columnHeader20, 
				this->columnHeader21, this->columnHeader22});
			this->lv_eventlog->ContextMenuStrip = this->cms_eventlog;
			this->lv_eventlog->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_eventlog->FullRowSelect = true;
			this->lv_eventlog->Location = System::Drawing::Point(3, 3);
			this->lv_eventlog->MultiSelect = false;
			this->lv_eventlog->Name = L"lv_eventlog";
			this->lv_eventlog->ShowItemToolTips = true;
			this->lv_eventlog->Size = System::Drawing::Size(919, 479);
			this->lv_eventlog->TabIndex = 0;
			this->lv_eventlog->UseCompatibleStateImageBehavior = false;
			this->lv_eventlog->View = System::Windows::Forms::View::Details;
			this->lv_eventlog->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_eventlog_ColumnClick);
			this->lv_eventlog->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_eventlog_ItemDrag);
			this->lv_eventlog->MouseDoubleClick += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_eventlog_MouseDoubleClick);
			// 
			// columnHeader14
			// 
			this->columnHeader14->Text = L"日志名称";
			this->columnHeader14->Width = 112;
			// 
			// columnHeader15
			// 
			this->columnHeader15->Text = L"类型";
			this->columnHeader15->Width = 89;
			// 
			// columnHeader16
			// 
			this->columnHeader16->Text = L"日期";
			this->columnHeader16->Width = 80;
			// 
			// columnHeader17
			// 
			this->columnHeader17->Text = L"时间";
			this->columnHeader17->Width = 84;
			// 
			// columnHeader18
			// 
			this->columnHeader18->Text = L"来源";
			this->columnHeader18->Width = 82;
			// 
			// columnHeader19
			// 
			this->columnHeader19->Text = L"分类";
			this->columnHeader19->Width = 81;
			// 
			// columnHeader20
			// 
			this->columnHeader20->Text = L"事件";
			this->columnHeader20->Width = 87;
			// 
			// columnHeader21
			// 
			this->columnHeader21->Text = L"用户";
			this->columnHeader21->Width = 118;
			// 
			// columnHeader22
			// 
			this->columnHeader22->Text = L"计算机";
			this->columnHeader22->Width = 161;
			// 
			// cms_eventlog
			// 
			this->cms_eventlog->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(9) {this->cms_eventlog_refresh, 
				this->toolStripSeparator20, this->cms_eventlog_clearSys, this->cms_eventlog_clearSec, this->cms_eventlog_clearApp, this->toolStripSeparator22, 
				this->cms_eventlog_clearAll, this->toolStripSeparator21, this->cms_eventlog_export});
			this->cms_eventlog->Name = L"cms_eventlog";
			this->cms_eventlog->Size = System::Drawing::Size(167, 154);
			// 
			// cms_eventlog_refresh
			// 
			this->cms_eventlog_refresh->Name = L"cms_eventlog_refresh";
			this->cms_eventlog_refresh->Size = System::Drawing::Size(166, 22);
			this->cms_eventlog_refresh->Text = L"刷新";
			this->cms_eventlog_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_eventlog_refresh_Click);
			// 
			// toolStripSeparator20
			// 
			this->toolStripSeparator20->Name = L"toolStripSeparator20";
			this->toolStripSeparator20->Size = System::Drawing::Size(163, 6);
			// 
			// cms_eventlog_clearSys
			// 
			this->cms_eventlog_clearSys->Name = L"cms_eventlog_clearSys";
			this->cms_eventlog_clearSys->Size = System::Drawing::Size(166, 22);
			this->cms_eventlog_clearSys->Text = L"清除系统日志";
			this->cms_eventlog_clearSys->Click += gcnew System::EventHandler(this, &Form1::cms_eventlog_clearSys_Click);
			// 
			// cms_eventlog_clearSec
			// 
			this->cms_eventlog_clearSec->Name = L"cms_eventlog_clearSec";
			this->cms_eventlog_clearSec->Size = System::Drawing::Size(166, 22);
			this->cms_eventlog_clearSec->Text = L"清除安全性日志";
			this->cms_eventlog_clearSec->Click += gcnew System::EventHandler(this, &Form1::cms_eventlog_clearSec_Click);
			// 
			// cms_eventlog_clearApp
			// 
			this->cms_eventlog_clearApp->Name = L"cms_eventlog_clearApp";
			this->cms_eventlog_clearApp->Size = System::Drawing::Size(166, 22);
			this->cms_eventlog_clearApp->Text = L"清除应用程序日志";
			this->cms_eventlog_clearApp->Click += gcnew System::EventHandler(this, &Form1::cms_eventlog_clearApp_Click);
			// 
			// toolStripSeparator22
			// 
			this->toolStripSeparator22->Name = L"toolStripSeparator22";
			this->toolStripSeparator22->Size = System::Drawing::Size(163, 6);
			// 
			// cms_eventlog_clearAll
			// 
			this->cms_eventlog_clearAll->Name = L"cms_eventlog_clearAll";
			this->cms_eventlog_clearAll->Size = System::Drawing::Size(166, 22);
			this->cms_eventlog_clearAll->Text = L"清除所有";
			this->cms_eventlog_clearAll->Click += gcnew System::EventHandler(this, &Form1::cms_eventlog_clearAll_Click);
			// 
			// toolStripSeparator21
			// 
			this->toolStripSeparator21->Name = L"toolStripSeparator21";
			this->toolStripSeparator21->Size = System::Drawing::Size(163, 6);
			// 
			// cms_eventlog_export
			// 
			this->cms_eventlog_export->Name = L"cms_eventlog_export";
			this->cms_eventlog_export->Size = System::Drawing::Size(166, 22);
			this->cms_eventlog_export->Text = L"导出";
			this->cms_eventlog_export->Click += gcnew System::EventHandler(this, &Form1::cms_eventlog_export_Click);
			// 
			// tp_service
			// 
			this->tp_service->Controls->Add(this->lv_service);
			this->tp_service->Location = System::Drawing::Point(4, 21);
			this->tp_service->Name = L"tp_service";
			this->tp_service->Padding = System::Windows::Forms::Padding(3);
			this->tp_service->Size = System::Drawing::Size(925, 485);
			this->tp_service->TabIndex = 1;
			this->tp_service->Text = L"服务";
			this->tp_service->UseVisualStyleBackColor = true;
			// 
			// lv_service
			// 
			this->lv_service->AllowColumnReorder = true;
			this->lv_service->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(7) {this->columnHeader7, this->columnHeader8, 
				this->columnHeader9, this->columnHeader10, this->columnHeader11, this->columnHeader12, this->columnHeader13});
			this->lv_service->ContextMenuStrip = this->cms_service;
			this->lv_service->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_service->FullRowSelect = true;
			this->lv_service->Location = System::Drawing::Point(3, 3);
			this->lv_service->MultiSelect = false;
			this->lv_service->Name = L"lv_service";
			this->lv_service->ShowItemToolTips = true;
			this->lv_service->Size = System::Drawing::Size(919, 479);
			this->lv_service->TabIndex = 0;
			this->lv_service->UseCompatibleStateImageBehavior = false;
			this->lv_service->View = System::Windows::Forms::View::Details;
			this->lv_service->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_service_ColumnClick);
			this->lv_service->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_service_ItemDrag);
			this->lv_service->MouseDoubleClick += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_service_MouseDoubleClick);
			this->lv_service->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_service_MouseUp);
			// 
			// columnHeader7
			// 
			this->columnHeader7->Text = L"服务名";
			this->columnHeader7->Width = 88;
			// 
			// columnHeader8
			// 
			this->columnHeader8->Text = L"状态";
			this->columnHeader8->Width = 71;
			// 
			// columnHeader9
			// 
			this->columnHeader9->Text = L"启动类型";
			this->columnHeader9->Width = 77;
			// 
			// columnHeader10
			// 
			this->columnHeader10->Text = L"映像路径";
			this->columnHeader10->Width = 214;
			// 
			// columnHeader11
			// 
			this->columnHeader11->Text = L"文件厂商";
			this->columnHeader11->Width = 116;
			// 
			// columnHeader12
			// 
			this->columnHeader12->Text = L"服务动态链接库";
			this->columnHeader12->Width = 134;
			// 
			// columnHeader13
			// 
			this->columnHeader13->Text = L"文件厂商";
			this->columnHeader13->Width = 197;
			// 
			// cms_service
			// 
			this->cms_service->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(23) {this->cms_service_refresh, 
				this->toolStripSeparator12, this->cms_service_do, this->toolStripSeparator14, this->cms_service_config, this->toolStripSeparator15, 
				this->cms_service_sigverif, this->cms_service_sigverifDll, this->cms_service_sigverifAll, this->toolStripSeparator16, this->cms_service_onlineFind, 
				this->cms_service_onlineAnalysis, this->toolStripSeparator17, this->cms_service_explorer, this->cms_service_explorer2, this->cms_service_showProperty, 
				this->cms_service_explorerDll, this->cms_service_explorerDll2, this->cms_service_showPropertyDll, this->toolStripSeparator18, 
				this->cms_service_reg, this->toolStripSeparator19, this->cms_service_export});
			this->cms_service->Name = L"cms_service";
			this->cms_service->Size = System::Drawing::Size(227, 398);
			// 
			// cms_service_refresh
			// 
			this->cms_service_refresh->Name = L"cms_service_refresh";
			this->cms_service_refresh->Size = System::Drawing::Size(226, 22);
			this->cms_service_refresh->Text = L"刷新";
			this->cms_service_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_service_refresh_Click);
			// 
			// toolStripSeparator12
			// 
			this->toolStripSeparator12->Name = L"toolStripSeparator12";
			this->toolStripSeparator12->Size = System::Drawing::Size(223, 6);
			// 
			// cms_service_do
			// 
			this->cms_service_do->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(7) {this->cms_service_do_start, 
				this->cms_service_do_stop, this->cms_service_do_pause, this->cms_service_do_resume, this->toolStripSeparator13, this->cms_service_do_create, 
				this->cms_service_do_delete});
			this->cms_service_do->Name = L"cms_service_do";
			this->cms_service_do->Size = System::Drawing::Size(226, 22);
			this->cms_service_do->Text = L"操作";
			// 
			// cms_service_do_start
			// 
			this->cms_service_do_start->Name = L"cms_service_do_start";
			this->cms_service_do_start->Size = System::Drawing::Size(94, 22);
			this->cms_service_do_start->Text = L"启动";
			this->cms_service_do_start->Click += gcnew System::EventHandler(this, &Form1::cms_service_do_start_Click);
			// 
			// cms_service_do_stop
			// 
			this->cms_service_do_stop->Name = L"cms_service_do_stop";
			this->cms_service_do_stop->Size = System::Drawing::Size(94, 22);
			this->cms_service_do_stop->Text = L"停止";
			this->cms_service_do_stop->Click += gcnew System::EventHandler(this, &Form1::cms_service_do_stop_Click);
			// 
			// cms_service_do_pause
			// 
			this->cms_service_do_pause->Name = L"cms_service_do_pause";
			this->cms_service_do_pause->Size = System::Drawing::Size(94, 22);
			this->cms_service_do_pause->Text = L"暂停";
			this->cms_service_do_pause->Click += gcnew System::EventHandler(this, &Form1::cms_service_do_pause_Click);
			// 
			// cms_service_do_resume
			// 
			this->cms_service_do_resume->Name = L"cms_service_do_resume";
			this->cms_service_do_resume->Size = System::Drawing::Size(94, 22);
			this->cms_service_do_resume->Text = L"恢复";
			this->cms_service_do_resume->Click += gcnew System::EventHandler(this, &Form1::cms_service_do_resume_Click);
			// 
			// toolStripSeparator13
			// 
			this->toolStripSeparator13->Name = L"toolStripSeparator13";
			this->toolStripSeparator13->Size = System::Drawing::Size(91, 6);
			// 
			// cms_service_do_create
			// 
			this->cms_service_do_create->Name = L"cms_service_do_create";
			this->cms_service_do_create->Size = System::Drawing::Size(94, 22);
			this->cms_service_do_create->Text = L"创建";
			this->cms_service_do_create->Click += gcnew System::EventHandler(this, &Form1::cms_service_do_create_Click);
			// 
			// cms_service_do_delete
			// 
			this->cms_service_do_delete->Name = L"cms_service_do_delete";
			this->cms_service_do_delete->Size = System::Drawing::Size(94, 22);
			this->cms_service_do_delete->Text = L"删除";
			this->cms_service_do_delete->Click += gcnew System::EventHandler(this, &Form1::cms_service_do_delete_Click);
			// 
			// toolStripSeparator14
			// 
			this->toolStripSeparator14->Name = L"toolStripSeparator14";
			this->toolStripSeparator14->Size = System::Drawing::Size(223, 6);
			// 
			// cms_service_config
			// 
			this->cms_service_config->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {this->cms_service_config_auto, 
				this->cms_service_config_manual, this->cms_service_config_disabled});
			this->cms_service_config->Name = L"cms_service_config";
			this->cms_service_config->Size = System::Drawing::Size(226, 22);
			this->cms_service_config->Text = L"配置";
			// 
			// cms_service_config_auto
			// 
			this->cms_service_config_auto->Name = L"cms_service_config_auto";
			this->cms_service_config_auto->Size = System::Drawing::Size(94, 22);
			this->cms_service_config_auto->Text = L"自动";
			this->cms_service_config_auto->Click += gcnew System::EventHandler(this, &Form1::cms_service_config_auto_Click);
			// 
			// cms_service_config_manual
			// 
			this->cms_service_config_manual->Name = L"cms_service_config_manual";
			this->cms_service_config_manual->Size = System::Drawing::Size(94, 22);
			this->cms_service_config_manual->Text = L"手动";
			this->cms_service_config_manual->Click += gcnew System::EventHandler(this, &Form1::cms_service_config_manual_Click);
			// 
			// cms_service_config_disabled
			// 
			this->cms_service_config_disabled->Name = L"cms_service_config_disabled";
			this->cms_service_config_disabled->Size = System::Drawing::Size(94, 22);
			this->cms_service_config_disabled->Text = L"禁用";
			this->cms_service_config_disabled->Click += gcnew System::EventHandler(this, &Form1::cms_service_config_disabled_Click);
			// 
			// toolStripSeparator15
			// 
			this->toolStripSeparator15->Name = L"toolStripSeparator15";
			this->toolStripSeparator15->Size = System::Drawing::Size(223, 6);
			// 
			// cms_service_sigverif
			// 
			this->cms_service_sigverif->Name = L"cms_service_sigverif";
			this->cms_service_sigverif->Size = System::Drawing::Size(226, 22);
			this->cms_service_sigverif->Text = L"校验映像数字签名";
			this->cms_service_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_service_sigverif_Click);
			// 
			// cms_service_sigverifDll
			// 
			this->cms_service_sigverifDll->Name = L"cms_service_sigverifDll";
			this->cms_service_sigverifDll->Size = System::Drawing::Size(226, 22);
			this->cms_service_sigverifDll->Text = L"校验服务动态链接库数字签名";
			this->cms_service_sigverifDll->Click += gcnew System::EventHandler(this, &Form1::cms_service_sigverifDll_Click);
			// 
			// cms_service_sigverifAll
			// 
			this->cms_service_sigverifAll->Name = L"cms_service_sigverifAll";
			this->cms_service_sigverifAll->Size = System::Drawing::Size(226, 22);
			this->cms_service_sigverifAll->Text = L"校验所有数字签名";
			this->cms_service_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_service_sigverifAll_Click);
			// 
			// toolStripSeparator16
			// 
			this->toolStripSeparator16->Name = L"toolStripSeparator16";
			this->toolStripSeparator16->Size = System::Drawing::Size(223, 6);
			// 
			// cms_service_onlineFind
			// 
			this->cms_service_onlineFind->Name = L"cms_service_onlineFind";
			this->cms_service_onlineFind->Size = System::Drawing::Size(226, 22);
			this->cms_service_onlineFind->Text = L"在线搜索服务名";
			this->cms_service_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_service_onlineFind_Click);
			// 
			// cms_service_onlineAnalysis
			// 
			this->cms_service_onlineAnalysis->Name = L"cms_service_onlineAnalysis";
			this->cms_service_onlineAnalysis->Size = System::Drawing::Size(226, 22);
			this->cms_service_onlineAnalysis->Text = L"在线分析";
			this->cms_service_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_service_onlineAnalysis_Click);
			// 
			// toolStripSeparator17
			// 
			this->toolStripSeparator17->Name = L"toolStripSeparator17";
			this->toolStripSeparator17->Size = System::Drawing::Size(223, 6);
			// 
			// cms_service_explorer
			// 
			this->cms_service_explorer->Name = L"cms_service_explorer";
			this->cms_service_explorer->Size = System::Drawing::Size(226, 22);
			this->cms_service_explorer->Text = L"定位到映像文件";
			this->cms_service_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_service_explorer_Click);
			// 
			// cms_service_explorer2
			// 
			this->cms_service_explorer2->Name = L"cms_service_explorer2";
			this->cms_service_explorer2->Size = System::Drawing::Size(226, 22);
			this->cms_service_explorer2->Text = L"定位到映像文件2";
			this->cms_service_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_service_explorer2_Click);
			// 
			// cms_service_showProperty
			// 
			this->cms_service_showProperty->Name = L"cms_service_showProperty";
			this->cms_service_showProperty->Size = System::Drawing::Size(226, 22);
			this->cms_service_showProperty->Text = L"查看映像文件属性";
			this->cms_service_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_service_showProperty_Click);
			// 
			// cms_service_explorerDll
			// 
			this->cms_service_explorerDll->Name = L"cms_service_explorerDll";
			this->cms_service_explorerDll->Size = System::Drawing::Size(226, 22);
			this->cms_service_explorerDll->Text = L"定位到服务动态链接库文件";
			this->cms_service_explorerDll->Click += gcnew System::EventHandler(this, &Form1::cms_service_explorerDll_Click);
			// 
			// cms_service_explorerDll2
			// 
			this->cms_service_explorerDll2->Name = L"cms_service_explorerDll2";
			this->cms_service_explorerDll2->Size = System::Drawing::Size(226, 22);
			this->cms_service_explorerDll2->Text = L"定位到服务动态链接库文件2";
			this->cms_service_explorerDll2->Click += gcnew System::EventHandler(this, &Form1::cms_service_explorerDll2_Click);
			// 
			// cms_service_showPropertyDll
			// 
			this->cms_service_showPropertyDll->Name = L"cms_service_showPropertyDll";
			this->cms_service_showPropertyDll->Size = System::Drawing::Size(226, 22);
			this->cms_service_showPropertyDll->Text = L"查看服务动态链接库文件属性";
			this->cms_service_showPropertyDll->Click += gcnew System::EventHandler(this, &Form1::cms_service_showPropertyDll_Click);
			// 
			// toolStripSeparator18
			// 
			this->toolStripSeparator18->Name = L"toolStripSeparator18";
			this->toolStripSeparator18->Size = System::Drawing::Size(223, 6);
			// 
			// cms_service_reg
			// 
			this->cms_service_reg->Name = L"cms_service_reg";
			this->cms_service_reg->Size = System::Drawing::Size(226, 22);
			this->cms_service_reg->Text = L"定位到注册表";
			this->cms_service_reg->Click += gcnew System::EventHandler(this, &Form1::cms_service_reg_Click);
			// 
			// toolStripSeparator19
			// 
			this->toolStripSeparator19->Name = L"toolStripSeparator19";
			this->toolStripSeparator19->Size = System::Drawing::Size(223, 6);
			// 
			// cms_service_export
			// 
			this->cms_service_export->Name = L"cms_service_export";
			this->cms_service_export->Size = System::Drawing::Size(226, 22);
			this->cms_service_export->Text = L"导出";
			this->cms_service_export->Click += gcnew System::EventHandler(this, &Form1::cms_service_export_Click);
			// 
			// tp_process
			// 
			this->tp_process->Controls->Add(this->splitContainer6);
			this->tp_process->Location = System::Drawing::Point(4, 21);
			this->tp_process->Name = L"tp_process";
			this->tp_process->Padding = System::Windows::Forms::Padding(3);
			this->tp_process->Size = System::Drawing::Size(925, 485);
			this->tp_process->TabIndex = 0;
			this->tp_process->Text = L"进程";
			this->tp_process->UseVisualStyleBackColor = true;
			// 
			// splitContainer6
			// 
			this->splitContainer6->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer6->Location = System::Drawing::Point(3, 3);
			this->splitContainer6->Name = L"splitContainer6";
			this->splitContainer6->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer6.Panel1
			// 
			this->splitContainer6->Panel1->Controls->Add(this->lv_process);
			// 
			// splitContainer6.Panel2
			// 
			this->splitContainer6->Panel2->Controls->Add(this->lv_module);
			this->splitContainer6->Size = System::Drawing::Size(919, 479);
			this->splitContainer6->SplitterDistance = 285;
			this->splitContainer6->TabIndex = 1;
			// 
			// lv_process
			// 
			this->lv_process->AllowColumnReorder = true;
			this->lv_process->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(6) {this->columnHeader1, this->columnHeader2, 
				this->columnHeader3, this->columnHeader4, this->columnHeader5, this->columnHeader6});
			this->lv_process->ContextMenuStrip = this->cms_process;
			this->lv_process->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_process->FullRowSelect = true;
			this->lv_process->Location = System::Drawing::Point(0, 0);
			this->lv_process->MultiSelect = false;
			this->lv_process->Name = L"lv_process";
			this->lv_process->ShowItemToolTips = true;
			this->lv_process->Size = System::Drawing::Size(919, 285);
			this->lv_process->TabIndex = 0;
			this->lv_process->UseCompatibleStateImageBehavior = false;
			this->lv_process->View = System::Windows::Forms::View::Details;
			this->lv_process->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_process_ColumnClick);
			this->lv_process->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_process_ItemDrag);
			this->lv_process->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_process_MouseUp);
			// 
			// columnHeader1
			// 
			this->columnHeader1->Text = L"进程名称";
			this->columnHeader1->Width = 119;
			// 
			// columnHeader2
			// 
			this->columnHeader2->Text = L"进程ID";
			this->columnHeader2->Width = 81;
			// 
			// columnHeader3
			// 
			this->columnHeader3->Text = L"父进程ID";
			this->columnHeader3->Width = 81;
			// 
			// columnHeader4
			// 
			this->columnHeader4->Text = L"映像路径";
			this->columnHeader4->Width = 231;
			// 
			// columnHeader5
			// 
			this->columnHeader5->Text = L"文件厂商";
			this->columnHeader5->Width = 172;
			// 
			// columnHeader6
			// 
			this->columnHeader6->Text = L"关联窗体名称";
			this->columnHeader6->Width = 185;
			// 
			// cms_process
			// 
			this->cms_process->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(40) {this->cms_process_refresh, 
				this->toolStripSeparator1, this->cms_process_module, this->cms_process_thread, this->cms_process_handle, this->cms_process_win, 
				this->toolStripSeparator2, this->cms_process_showModuleForm, this->toolStripSeparator3, this->cms_process_findModule, this->cms_process_findSigverif, 
				this->toolStripSeparator4, this->cms_process_do, this->toolStripSeparator154, this->cms_process_kill, this->cms_process_forceKill, 
				this->cms_process_forceKill2, this->cms_process_killAndDelete, this->toolStripSeparator5, this->cms_process_sigverif, this->cms_process_sigverifAll, 
				this->toolStripSeparator6, this->cms_process_hide, this->toolStripSeparator128, this->cms_process_lock, this->cms_process_unlock, 
				this->toolStripSeparator7, this->cms_process_inject, this->cms_process_injectByHookMsg, this->toolStripSeparator8, this->cms_process_onlineFind, 
				this->cms_process_onlineAnalysis, this->toolStripSeparator9, this->cms_process_copy, this->toolStripSeparator10, this->cms_process_explorer, 
				this->cms_process_explorer2, this->cms_process_showProperty, this->toolStripSeparator11, this->cms_process_export});
			this->cms_process->Name = L"cms_process";
			this->cms_process->Size = System::Drawing::Size(239, 676);
			// 
			// cms_process_refresh
			// 
			this->cms_process_refresh->Name = L"cms_process_refresh";
			this->cms_process_refresh->Size = System::Drawing::Size(238, 22);
			this->cms_process_refresh->Text = L"刷新";
			this->cms_process_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_process_refresh_Click);
			// 
			// toolStripSeparator1
			// 
			this->toolStripSeparator1->Name = L"toolStripSeparator1";
			this->toolStripSeparator1->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_module
			// 
			this->cms_process_module->Name = L"cms_process_module";
			this->cms_process_module->Size = System::Drawing::Size(238, 22);
			this->cms_process_module->Text = L"查看进程模块";
			this->cms_process_module->Click += gcnew System::EventHandler(this, &Form1::cms_process_module_Click);
			// 
			// cms_process_thread
			// 
			this->cms_process_thread->Name = L"cms_process_thread";
			this->cms_process_thread->Size = System::Drawing::Size(238, 22);
			this->cms_process_thread->Text = L"查看进程线程";
			this->cms_process_thread->Click += gcnew System::EventHandler(this, &Form1::cms_process_thread_Click);
			// 
			// cms_process_handle
			// 
			this->cms_process_handle->Name = L"cms_process_handle";
			this->cms_process_handle->Size = System::Drawing::Size(238, 22);
			this->cms_process_handle->Text = L"查看进程句柄";
			this->cms_process_handle->Click += gcnew System::EventHandler(this, &Form1::cms_process_handle_Click);
			// 
			// cms_process_win
			// 
			this->cms_process_win->Name = L"cms_process_win";
			this->cms_process_win->Size = System::Drawing::Size(238, 22);
			this->cms_process_win->Text = L"查看进程窗口";
			this->cms_process_win->Click += gcnew System::EventHandler(this, &Form1::cms_process_win_Click);
			// 
			// toolStripSeparator2
			// 
			this->toolStripSeparator2->Name = L"toolStripSeparator2";
			this->toolStripSeparator2->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_showModuleForm
			// 
			this->cms_process_showModuleForm->Name = L"cms_process_showModuleForm";
			this->cms_process_showModuleForm->Size = System::Drawing::Size(238, 22);
			this->cms_process_showModuleForm->Text = L"在下方显示进程模块窗体";
			this->cms_process_showModuleForm->Click += gcnew System::EventHandler(this, &Form1::cms_process_showModuleForm_Click);
			// 
			// toolStripSeparator3
			// 
			this->toolStripSeparator3->Name = L"toolStripSeparator3";
			this->toolStripSeparator3->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_findModule
			// 
			this->cms_process_findModule->Name = L"cms_process_findModule";
			this->cms_process_findModule->Size = System::Drawing::Size(238, 22);
			this->cms_process_findModule->Text = L"在进程中查找进程模块";
			this->cms_process_findModule->Click += gcnew System::EventHandler(this, &Form1::cms_process_findModule_Click);
			// 
			// cms_process_findSigverif
			// 
			this->cms_process_findSigverif->Name = L"cms_process_findSigverif";
			this->cms_process_findSigverif->Size = System::Drawing::Size(238, 22);
			this->cms_process_findSigverif->Text = L"在进程中查找没有数字签名模块";
			this->cms_process_findSigverif->Click += gcnew System::EventHandler(this, &Form1::cms_process_findSigverif_Click);
			// 
			// toolStripSeparator4
			// 
			this->toolStripSeparator4->Name = L"toolStripSeparator4";
			this->toolStripSeparator4->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_do
			// 
			this->cms_process_do->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {this->cms_process_do_process, 
				this->cms_process_do_file, this->cms_process_do_reg});
			this->cms_process_do->Name = L"cms_process_do";
			this->cms_process_do->Size = System::Drawing::Size(238, 22);
			this->cms_process_do->Text = L"操作";
			// 
			// cms_process_do_process
			// 
			this->cms_process_do_process->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(2) {this->cms_process_do_process_disableCreate, 
				this->cms_process_do_process_disableDelete});
			this->cms_process_do_process->Name = L"cms_process_do_process";
			this->cms_process_do_process->Size = System::Drawing::Size(106, 22);
			this->cms_process_do_process->Text = L"进程";
			// 
			// cms_process_do_process_disableCreate
			// 
			this->cms_process_do_process_disableCreate->Name = L"cms_process_do_process_disableCreate";
			this->cms_process_do_process_disableCreate->Size = System::Drawing::Size(118, 22);
			this->cms_process_do_process_disableCreate->Text = L"禁止创建";
			this->cms_process_do_process_disableCreate->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_process_disableCreate_Click);
			// 
			// cms_process_do_process_disableDelete
			// 
			this->cms_process_do_process_disableDelete->Name = L"cms_process_do_process_disableDelete";
			this->cms_process_do_process_disableDelete->Size = System::Drawing::Size(118, 22);
			this->cms_process_do_process_disableDelete->Text = L"禁止结束";
			this->cms_process_do_process_disableDelete->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_process_disableDelete_Click);
			// 
			// cms_process_do_file
			// 
			this->cms_process_do_file->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {this->cms_process_do_file_disableCreate, 
				this->cms_process_do_file_disableDelete, this->cms_process_do_file_disableRead});
			this->cms_process_do_file->Name = L"cms_process_do_file";
			this->cms_process_do_file->Size = System::Drawing::Size(106, 22);
			this->cms_process_do_file->Text = L"文件";
			// 
			// cms_process_do_file_disableCreate
			// 
			this->cms_process_do_file_disableCreate->Name = L"cms_process_do_file_disableCreate";
			this->cms_process_do_file_disableCreate->Size = System::Drawing::Size(118, 22);
			this->cms_process_do_file_disableCreate->Text = L"禁止创建";
			this->cms_process_do_file_disableCreate->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_file_disableCreate_Click);
			// 
			// cms_process_do_file_disableDelete
			// 
			this->cms_process_do_file_disableDelete->Name = L"cms_process_do_file_disableDelete";
			this->cms_process_do_file_disableDelete->Size = System::Drawing::Size(118, 22);
			this->cms_process_do_file_disableDelete->Text = L"禁止删除";
			this->cms_process_do_file_disableDelete->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_file_disableDelete_Click);
			// 
			// cms_process_do_file_disableRead
			// 
			this->cms_process_do_file_disableRead->Name = L"cms_process_do_file_disableRead";
			this->cms_process_do_file_disableRead->Size = System::Drawing::Size(118, 22);
			this->cms_process_do_file_disableRead->Text = L"禁止读写";
			this->cms_process_do_file_disableRead->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_file_disableRead_Click);
			// 
			// cms_process_do_reg
			// 
			this->cms_process_do_reg->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(3) {this->cms_process_do_reg_disableCreate, 
				this->cms_process_do_reg_disableDelete, this->cms_process_do_reg_disableQuery});
			this->cms_process_do_reg->Name = L"cms_process_do_reg";
			this->cms_process_do_reg->Size = System::Drawing::Size(106, 22);
			this->cms_process_do_reg->Text = L"注册表";
			// 
			// cms_process_do_reg_disableCreate
			// 
			this->cms_process_do_reg_disableCreate->Name = L"cms_process_do_reg_disableCreate";
			this->cms_process_do_reg_disableCreate->Size = System::Drawing::Size(154, 22);
			this->cms_process_do_reg_disableCreate->Text = L"禁止创建项(值)";
			this->cms_process_do_reg_disableCreate->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_reg_disableCreate_Click);
			// 
			// cms_process_do_reg_disableDelete
			// 
			this->cms_process_do_reg_disableDelete->Name = L"cms_process_do_reg_disableDelete";
			this->cms_process_do_reg_disableDelete->Size = System::Drawing::Size(154, 22);
			this->cms_process_do_reg_disableDelete->Text = L"禁止删除项(值)";
			this->cms_process_do_reg_disableDelete->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_reg_disableDelete_Click);
			// 
			// cms_process_do_reg_disableQuery
			// 
			this->cms_process_do_reg_disableQuery->Name = L"cms_process_do_reg_disableQuery";
			this->cms_process_do_reg_disableQuery->Size = System::Drawing::Size(154, 22);
			this->cms_process_do_reg_disableQuery->Text = L"禁止查询";
			this->cms_process_do_reg_disableQuery->Click += gcnew System::EventHandler(this, &Form1::cms_process_do_reg_disableQuery_Click);
			// 
			// toolStripSeparator154
			// 
			this->toolStripSeparator154->Name = L"toolStripSeparator154";
			this->toolStripSeparator154->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_kill
			// 
			this->cms_process_kill->Name = L"cms_process_kill";
			this->cms_process_kill->Size = System::Drawing::Size(238, 22);
			this->cms_process_kill->Text = L"结束进程";
			this->cms_process_kill->Click += gcnew System::EventHandler(this, &Form1::cms_process_kill_Click);
			// 
			// cms_process_forceKill
			// 
			this->cms_process_forceKill->Name = L"cms_process_forceKill";
			this->cms_process_forceKill->Size = System::Drawing::Size(238, 22);
			this->cms_process_forceKill->Text = L"强制结束进程";
			this->cms_process_forceKill->Click += gcnew System::EventHandler(this, &Form1::cms_process_forceKill_Click);
			// 
			// cms_process_forceKill2
			// 
			this->cms_process_forceKill2->Name = L"cms_process_forceKill2";
			this->cms_process_forceKill2->Size = System::Drawing::Size(238, 22);
			this->cms_process_forceKill2->Text = L"暴力结束进程(谨慎)";
			this->cms_process_forceKill2->Click += gcnew System::EventHandler(this, &Form1::cms_process_forceKill2_Click);
			// 
			// cms_process_killAndDelete
			// 
			this->cms_process_killAndDelete->Name = L"cms_process_killAndDelete";
			this->cms_process_killAndDelete->Size = System::Drawing::Size(238, 22);
			this->cms_process_killAndDelete->Text = L"结束进程并删除文件";
			this->cms_process_killAndDelete->Click += gcnew System::EventHandler(this, &Form1::cms_process_killAndDelete_Click);
			// 
			// toolStripSeparator5
			// 
			this->toolStripSeparator5->Name = L"toolStripSeparator5";
			this->toolStripSeparator5->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_sigverif
			// 
			this->cms_process_sigverif->Name = L"cms_process_sigverif";
			this->cms_process_sigverif->Size = System::Drawing::Size(238, 22);
			this->cms_process_sigverif->Text = L"校验数字签名";
			this->cms_process_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_process_sigverif_Click);
			// 
			// cms_process_sigverifAll
			// 
			this->cms_process_sigverifAll->Name = L"cms_process_sigverifAll";
			this->cms_process_sigverifAll->Size = System::Drawing::Size(238, 22);
			this->cms_process_sigverifAll->Text = L"校验所有数字签名";
			this->cms_process_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_process_sigverifAll_Click);
			// 
			// toolStripSeparator6
			// 
			this->toolStripSeparator6->Name = L"toolStripSeparator6";
			this->toolStripSeparator6->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_hide
			// 
			this->cms_process_hide->Name = L"cms_process_hide";
			this->cms_process_hide->Size = System::Drawing::Size(238, 22);
			this->cms_process_hide->Text = L"隐藏";
			this->cms_process_hide->Click += gcnew System::EventHandler(this, &Form1::cms_process_hide_Click);
			// 
			// toolStripSeparator128
			// 
			this->toolStripSeparator128->Name = L"toolStripSeparator128";
			this->toolStripSeparator128->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_lock
			// 
			this->cms_process_lock->Name = L"cms_process_lock";
			this->cms_process_lock->Size = System::Drawing::Size(238, 22);
			this->cms_process_lock->Text = L"挂起进程";
			this->cms_process_lock->Click += gcnew System::EventHandler(this, &Form1::cms_process_lock_Click);
			// 
			// cms_process_unlock
			// 
			this->cms_process_unlock->Name = L"cms_process_unlock";
			this->cms_process_unlock->Size = System::Drawing::Size(238, 22);
			this->cms_process_unlock->Text = L"恢复进程";
			this->cms_process_unlock->Click += gcnew System::EventHandler(this, &Form1::cms_process_unlock_Click);
			// 
			// toolStripSeparator7
			// 
			this->toolStripSeparator7->Name = L"toolStripSeparator7";
			this->toolStripSeparator7->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_inject
			// 
			this->cms_process_inject->Name = L"cms_process_inject";
			this->cms_process_inject->Size = System::Drawing::Size(238, 22);
			this->cms_process_inject->Text = L"Dll远程线程注入";
			this->cms_process_inject->Click += gcnew System::EventHandler(this, &Form1::cms_process_inject_Click);
			// 
			// cms_process_injectByHookMsg
			// 
			this->cms_process_injectByHookMsg->DropDownItems->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(2) {this->cms_process_injectByHookMsg1, 
				this->cms_process_injectByHookMsg2});
			this->cms_process_injectByHookMsg->Name = L"cms_process_injectByHookMsg";
			this->cms_process_injectByHookMsg->Size = System::Drawing::Size(238, 22);
			this->cms_process_injectByHookMsg->Text = L"Dll消息钩子注入";
			// 
			// cms_process_injectByHookMsg1
			// 
			this->cms_process_injectByHookMsg1->Name = L"cms_process_injectByHookMsg1";
			this->cms_process_injectByHookMsg1->Size = System::Drawing::Size(100, 22);
			this->cms_process_injectByHookMsg1->Text = L"注入1";
			this->cms_process_injectByHookMsg1->Click += gcnew System::EventHandler(this, &Form1::cms_process_injectByHookMsg1_Click);
			// 
			// cms_process_injectByHookMsg2
			// 
			this->cms_process_injectByHookMsg2->Name = L"cms_process_injectByHookMsg2";
			this->cms_process_injectByHookMsg2->Size = System::Drawing::Size(100, 22);
			this->cms_process_injectByHookMsg2->Text = L"注入2";
			this->cms_process_injectByHookMsg2->Click += gcnew System::EventHandler(this, &Form1::cms_process_injectByHookMsg2_Click);
			// 
			// toolStripSeparator8
			// 
			this->toolStripSeparator8->Name = L"toolStripSeparator8";
			this->toolStripSeparator8->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_onlineFind
			// 
			this->cms_process_onlineFind->Name = L"cms_process_onlineFind";
			this->cms_process_onlineFind->Size = System::Drawing::Size(238, 22);
			this->cms_process_onlineFind->Text = L"在线搜索进程名";
			this->cms_process_onlineFind->Click += gcnew System::EventHandler(this, &Form1::cms_process_onlineFind_Click);
			// 
			// cms_process_onlineAnalysis
			// 
			this->cms_process_onlineAnalysis->Name = L"cms_process_onlineAnalysis";
			this->cms_process_onlineAnalysis->Size = System::Drawing::Size(238, 22);
			this->cms_process_onlineAnalysis->Text = L"在线分析";
			this->cms_process_onlineAnalysis->Click += gcnew System::EventHandler(this, &Form1::cms_process_onlineAnalysis_Click);
			// 
			// toolStripSeparator9
			// 
			this->toolStripSeparator9->Name = L"toolStripSeparator9";
			this->toolStripSeparator9->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_copy
			// 
			this->cms_process_copy->Name = L"cms_process_copy";
			this->cms_process_copy->Size = System::Drawing::Size(238, 22);
			this->cms_process_copy->Text = L"复制进程路径";
			this->cms_process_copy->Click += gcnew System::EventHandler(this, &Form1::cms_process_copy_Click);
			// 
			// toolStripSeparator10
			// 
			this->toolStripSeparator10->Name = L"toolStripSeparator10";
			this->toolStripSeparator10->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_explorer
			// 
			this->cms_process_explorer->Name = L"cms_process_explorer";
			this->cms_process_explorer->Size = System::Drawing::Size(238, 22);
			this->cms_process_explorer->Text = L"定位到进程文件";
			this->cms_process_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_process_explorer_Click);
			// 
			// cms_process_explorer2
			// 
			this->cms_process_explorer2->Name = L"cms_process_explorer2";
			this->cms_process_explorer2->Size = System::Drawing::Size(238, 22);
			this->cms_process_explorer2->Text = L"定位到进程文件2";
			this->cms_process_explorer2->Click += gcnew System::EventHandler(this, &Form1::cms_process_explorer2_Click);
			// 
			// cms_process_showProperty
			// 
			this->cms_process_showProperty->Name = L"cms_process_showProperty";
			this->cms_process_showProperty->Size = System::Drawing::Size(238, 22);
			this->cms_process_showProperty->Text = L"查看进程文件属性";
			this->cms_process_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_process_showProperty_Click);
			// 
			// toolStripSeparator11
			// 
			this->toolStripSeparator11->Name = L"toolStripSeparator11";
			this->toolStripSeparator11->Size = System::Drawing::Size(235, 6);
			// 
			// cms_process_export
			// 
			this->cms_process_export->Name = L"cms_process_export";
			this->cms_process_export->Size = System::Drawing::Size(238, 22);
			this->cms_process_export->Text = L"导出";
			this->cms_process_export->Click += gcnew System::EventHandler(this, &Form1::cms_process_export_Click);
			// 
			// lv_module
			// 
			this->lv_module->AllowColumnReorder = true;
			this->lv_module->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader26, this->columnHeader135, 
				this->columnHeader136, this->columnHeader138, this->columnHeader137});
			this->lv_module->ContextMenuStrip = this->cms_module;
			this->lv_module->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_module->FullRowSelect = true;
			this->lv_module->Location = System::Drawing::Point(0, 0);
			this->lv_module->MultiSelect = false;
			this->lv_module->Name = L"lv_module";
			this->lv_module->ShowItemToolTips = true;
			this->lv_module->Size = System::Drawing::Size(919, 190);
			this->lv_module->TabIndex = 1;
			this->lv_module->UseCompatibleStateImageBehavior = false;
			this->lv_module->View = System::Windows::Forms::View::Details;
			this->lv_module->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_module_ColumnClick);
			this->lv_module->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_module_ItemDrag);
			this->lv_module->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_module_MouseUp);
			this->lv_module->Resize += gcnew System::EventHandler(this, &Form1::lv_module_Resize);
			// 
			// columnHeader26
			// 
			this->columnHeader26->Text = L"模块路径";
			this->columnHeader26->Width = 270;
			// 
			// columnHeader135
			// 
			this->columnHeader135->Text = L"基地址";
			this->columnHeader135->Width = 132;
			// 
			// columnHeader136
			// 
			this->columnHeader136->Text = L"模块大小";
			this->columnHeader136->Width = 123;
			// 
			// columnHeader138
			// 
			this->columnHeader138->Text = L"版本信息";
			this->columnHeader138->Width = 116;
			// 
			// columnHeader137
			// 
			this->columnHeader137->Text = L"文件厂商";
			this->columnHeader137->Width = 207;
			// 
			// cms_module
			// 
			this->cms_module->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(18) {this->cms_module_refresh, 
				this->toolStripSeparator146, this->cms_module_all, this->toolStripSeparator147, this->cms_module_unload, this->cms_module_unloadAll, 
				this->toolStripSeparator148, this->cms_module_delete, this->toolStripSeparator149, this->cms_module_sigverif, this->cms_module_sigverifAll, 
				this->toolStripSeparator150, this->cms_module_copyAddr, this->toolStripSeparator151, this->cms_module_explorer, this->cms_module_showProperty, 
				this->toolStripSeparator152, this->cms_module_export});
			this->cms_module->Name = L"cms_";
			this->cms_module->Size = System::Drawing::Size(179, 288);
			// 
			// cms_module_refresh
			// 
			this->cms_module_refresh->Name = L"cms_module_refresh";
			this->cms_module_refresh->Size = System::Drawing::Size(178, 22);
			this->cms_module_refresh->Text = L"刷新";
			this->cms_module_refresh->Click += gcnew System::EventHandler(this, &Form1::cms_module_refresh_Click);
			// 
			// toolStripSeparator146
			// 
			this->toolStripSeparator146->Name = L"toolStripSeparator146";
			this->toolStripSeparator146->Size = System::Drawing::Size(175, 6);
			// 
			// cms_module_all
			// 
			this->cms_module_all->Name = L"cms_module_all";
			this->cms_module_all->Size = System::Drawing::Size(178, 22);
			this->cms_module_all->Text = L"显示所有模块";
			this->cms_module_all->Click += gcnew System::EventHandler(this, &Form1::cms_module_all_Click);
			// 
			// toolStripSeparator147
			// 
			this->toolStripSeparator147->Name = L"toolStripSeparator147";
			this->toolStripSeparator147->Size = System::Drawing::Size(175, 6);
			// 
			// cms_module_unload
			// 
			this->cms_module_unload->Name = L"cms_module_unload";
			this->cms_module_unload->Size = System::Drawing::Size(178, 22);
			this->cms_module_unload->Text = L"卸载模块";
			this->cms_module_unload->Click += gcnew System::EventHandler(this, &Form1::cms_module_unload_Click);
			// 
			// cms_module_unloadAll
			// 
			this->cms_module_unloadAll->Name = L"cms_module_unloadAll";
			this->cms_module_unloadAll->Size = System::Drawing::Size(178, 22);
			this->cms_module_unloadAll->Text = L"全局卸载模块(谨慎)";
			this->cms_module_unloadAll->Click += gcnew System::EventHandler(this, &Form1::cms_module_unloadAll_Click);
			// 
			// toolStripSeparator148
			// 
			this->toolStripSeparator148->Name = L"toolStripSeparator148";
			this->toolStripSeparator148->Size = System::Drawing::Size(175, 6);
			// 
			// cms_module_delete
			// 
			this->cms_module_delete->Name = L"cms_module_delete";
			this->cms_module_delete->Size = System::Drawing::Size(178, 22);
			this->cms_module_delete->Text = L"删除模块文件";
			this->cms_module_delete->Click += gcnew System::EventHandler(this, &Form1::cms_module_delete_Click);
			// 
			// toolStripSeparator149
			// 
			this->toolStripSeparator149->Name = L"toolStripSeparator149";
			this->toolStripSeparator149->Size = System::Drawing::Size(175, 6);
			// 
			// cms_module_sigverif
			// 
			this->cms_module_sigverif->Name = L"cms_module_sigverif";
			this->cms_module_sigverif->Size = System::Drawing::Size(178, 22);
			this->cms_module_sigverif->Text = L"校验数字签名";
			this->cms_module_sigverif->Click += gcnew System::EventHandler(this, &Form1::cms_module_sigverif_Click);
			// 
			// cms_module_sigverifAll
			// 
			this->cms_module_sigverifAll->Name = L"cms_module_sigverifAll";
			this->cms_module_sigverifAll->Size = System::Drawing::Size(178, 22);
			this->cms_module_sigverifAll->Text = L"校验所有数字签名";
			this->cms_module_sigverifAll->Click += gcnew System::EventHandler(this, &Form1::cms_module_sigverifAll_Click);
			// 
			// toolStripSeparator150
			// 
			this->toolStripSeparator150->Name = L"toolStripSeparator150";
			this->toolStripSeparator150->Size = System::Drawing::Size(175, 6);
			// 
			// cms_module_copyAddr
			// 
			this->cms_module_copyAddr->Name = L"cms_module_copyAddr";
			this->cms_module_copyAddr->Size = System::Drawing::Size(178, 22);
			this->cms_module_copyAddr->Text = L"复制模块路径";
			this->cms_module_copyAddr->Click += gcnew System::EventHandler(this, &Form1::cms_module_copyAddr_Click);
			// 
			// toolStripSeparator151
			// 
			this->toolStripSeparator151->Name = L"toolStripSeparator151";
			this->toolStripSeparator151->Size = System::Drawing::Size(175, 6);
			// 
			// cms_module_explorer
			// 
			this->cms_module_explorer->Name = L"cms_module_explorer";
			this->cms_module_explorer->Size = System::Drawing::Size(178, 22);
			this->cms_module_explorer->Text = L"定位到模块文件";
			this->cms_module_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_module_explorer_Click);
			// 
			// cms_module_showProperty
			// 
			this->cms_module_showProperty->Name = L"cms_module_showProperty";
			this->cms_module_showProperty->Size = System::Drawing::Size(178, 22);
			this->cms_module_showProperty->Text = L"查看模块文件属性";
			this->cms_module_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_module_showProperty_Click);
			// 
			// toolStripSeparator152
			// 
			this->toolStripSeparator152->Name = L"toolStripSeparator152";
			this->toolStripSeparator152->Size = System::Drawing::Size(175, 6);
			// 
			// cms_module_export
			// 
			this->cms_module_export->Name = L"cms_module_export";
			this->cms_module_export->Size = System::Drawing::Size(178, 22);
			this->cms_module_export->Text = L"导出";
			this->cms_module_export->Click += gcnew System::EventHandler(this, &Form1::cms_module_export_Click);
			// 
			// tc_main
			// 
			this->tc_main->Controls->Add(this->tp_process);
			this->tc_main->Controls->Add(this->tp_service);
			this->tc_main->Controls->Add(this->tp_eventlog);
			this->tc_main->Controls->Add(this->tabPage4);
			this->tc_main->Controls->Add(this->tp_kernel);
			this->tc_main->Controls->Add(this->tp_app);
			this->tc_main->Controls->Add(this->tp_net);
			this->tc_main->Controls->Add(this->tp_file);
			this->tc_main->Controls->Add(this->tp_reg);
			this->tc_main->Controls->Add(this->tp_win);
			this->tc_main->Controls->Add(this->tp_run);
			this->tc_main->Controls->Add(this->tp_snap);
			this->tc_main->Controls->Add(this->tp_other);
			this->tc_main->Controls->Add(this->tp_srcshot);
			this->tc_main->Controls->Add(this->tp_monitor);
			this->tc_main->Controls->Add(this->tp_about);
			this->tc_main->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tc_main->Location = System::Drawing::Point(0, 24);
			this->tc_main->Name = L"tc_main";
			this->tc_main->SelectedIndex = 0;
			this->tc_main->Size = System::Drawing::Size(933, 510);
			this->tc_main->TabIndex = 2;
			this->tc_main->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::tc_main_SelectedIndexChanged);
			// 
			// tp_snap
			// 
			this->tp_snap->Controls->Add(this->tc_snap);
			this->tp_snap->Location = System::Drawing::Point(4, 21);
			this->tp_snap->Name = L"tp_snap";
			this->tp_snap->Padding = System::Windows::Forms::Padding(3);
			this->tp_snap->Size = System::Drawing::Size(925, 485);
			this->tp_snap->TabIndex = 15;
			this->tp_snap->Text = L"系统快照";
			this->tp_snap->UseVisualStyleBackColor = true;
			// 
			// tc_snap
			// 
			this->tc_snap->Controls->Add(this->tabPage1);
			this->tc_snap->Controls->Add(this->tabPage2);
			this->tc_snap->Controls->Add(this->tabPage3);
			this->tc_snap->Controls->Add(this->tabPage5);
			this->tc_snap->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tc_snap->Location = System::Drawing::Point(3, 3);
			this->tc_snap->Name = L"tc_snap";
			this->tc_snap->SelectedIndex = 0;
			this->tc_snap->Size = System::Drawing::Size(919, 479);
			this->tc_snap->TabIndex = 0;
			this->tc_snap->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::tc_snap_SelectedIndexChanged);
			// 
			// tabPage1
			// 
			this->tabPage1->Controls->Add(this->lv_snap_file);
			this->tabPage1->Location = System::Drawing::Point(4, 21);
			this->tabPage1->Name = L"tabPage1";
			this->tabPage1->Padding = System::Windows::Forms::Padding(3);
			this->tabPage1->Size = System::Drawing::Size(911, 454);
			this->tabPage1->TabIndex = 0;
			this->tabPage1->Text = L"文件快照";
			this->tabPage1->UseVisualStyleBackColor = true;
			// 
			// lv_snap_file
			// 
			this->lv_snap_file->AllowColumnReorder = true;
			this->lv_snap_file->AllowDrop = true;
			this->lv_snap_file->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(6) {this->columnHeader42, 
				this->columnHeader94, this->columnHeader95, this->columnHeader96, this->columnHeader97, this->columnHeader98});
			this->lv_snap_file->ContextMenuStrip = this->cms_snap_file;
			this->lv_snap_file->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_snap_file->FullRowSelect = true;
			this->lv_snap_file->Location = System::Drawing::Point(3, 3);
			this->lv_snap_file->Name = L"lv_snap_file";
			this->lv_snap_file->ShowItemToolTips = true;
			this->lv_snap_file->Size = System::Drawing::Size(905, 448);
			this->lv_snap_file->TabIndex = 1;
			this->lv_snap_file->UseCompatibleStateImageBehavior = false;
			this->lv_snap_file->View = System::Windows::Forms::View::Details;
			this->lv_snap_file->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_snap_file_ColumnClick);
			this->lv_snap_file->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_snap_file_ItemDrag);
			this->lv_snap_file->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_file_DragDrop);
			this->lv_snap_file->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_file_DragEnter);
			this->lv_snap_file->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_snap_file_MouseUp);
			// 
			// columnHeader42
			// 
			this->columnHeader42->Text = L"文件名称";
			this->columnHeader42->Width = 142;
			// 
			// columnHeader94
			// 
			this->columnHeader94->Text = L"文件路径";
			this->columnHeader94->Width = 229;
			// 
			// columnHeader95
			// 
			this->columnHeader95->Text = L"上次访问时间";
			this->columnHeader95->Width = 115;
			// 
			// columnHeader96
			// 
			this->columnHeader96->Text = L"上次修改时间";
			this->columnHeader96->Width = 112;
			// 
			// columnHeader97
			// 
			this->columnHeader97->Text = L"文件大小";
			this->columnHeader97->Width = 111;
			// 
			// columnHeader98
			// 
			this->columnHeader98->Text = L"文件MD5";
			this->columnHeader98->Width = 172;
			// 
			// cms_snap_file
			// 
			this->cms_snap_file->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(10) {this->cms_snap_file_choose, 
				this->toolStripSeparator178, this->cms_snap_file_save, this->toolStripSeparator179, this->cms_snap_file_clear, this->toolStripSeparator186, 
				this->cms_snap_file_explorer, this->cms_snap_file_showProperty, this->toolStripSeparator180, this->cms_snap_file_export});
			this->cms_snap_file->Name = L"cms_sysSnap";
			this->cms_snap_file->Size = System::Drawing::Size(143, 160);
			// 
			// cms_snap_file_choose
			// 
			this->cms_snap_file_choose->Name = L"cms_snap_file_choose";
			this->cms_snap_file_choose->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_choose->Text = L"选择目录...";
			this->cms_snap_file_choose->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_choose_Click);
			// 
			// toolStripSeparator178
			// 
			this->toolStripSeparator178->Name = L"toolStripSeparator178";
			this->toolStripSeparator178->Size = System::Drawing::Size(139, 6);
			// 
			// cms_snap_file_save
			// 
			this->cms_snap_file_save->Name = L"cms_snap_file_save";
			this->cms_snap_file_save->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_save->Text = L"保存";
			this->cms_snap_file_save->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_save_Click);
			// 
			// toolStripSeparator179
			// 
			this->toolStripSeparator179->Name = L"toolStripSeparator179";
			this->toolStripSeparator179->Size = System::Drawing::Size(139, 6);
			// 
			// cms_snap_file_clear
			// 
			this->cms_snap_file_clear->Name = L"cms_snap_file_clear";
			this->cms_snap_file_clear->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_clear->Text = L"清空";
			this->cms_snap_file_clear->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_clear_Click);
			// 
			// toolStripSeparator186
			// 
			this->toolStripSeparator186->Name = L"toolStripSeparator186";
			this->toolStripSeparator186->Size = System::Drawing::Size(139, 6);
			// 
			// cms_snap_file_explorer
			// 
			this->cms_snap_file_explorer->Name = L"cms_snap_file_explorer";
			this->cms_snap_file_explorer->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_explorer->Text = L"定位文件";
			this->cms_snap_file_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_explorer_Click);
			// 
			// cms_snap_file_showProperty
			// 
			this->cms_snap_file_showProperty->Name = L"cms_snap_file_showProperty";
			this->cms_snap_file_showProperty->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_showProperty->Text = L"查看文件属性";
			this->cms_snap_file_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_showProperty_Click);
			// 
			// toolStripSeparator180
			// 
			this->toolStripSeparator180->Name = L"toolStripSeparator180";
			this->toolStripSeparator180->Size = System::Drawing::Size(139, 6);
			// 
			// cms_snap_file_export
			// 
			this->cms_snap_file_export->Name = L"cms_snap_file_export";
			this->cms_snap_file_export->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_export->Text = L"导出";
			this->cms_snap_file_export->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_export_Click);
			// 
			// tabPage2
			// 
			this->tabPage2->Controls->Add(this->lv_snap_file_analysis);
			this->tabPage2->Location = System::Drawing::Point(4, 21);
			this->tabPage2->Name = L"tabPage2";
			this->tabPage2->Padding = System::Windows::Forms::Padding(3);
			this->tabPage2->Size = System::Drawing::Size(911, 454);
			this->tabPage2->TabIndex = 1;
			this->tabPage2->Text = L"文件快照分析";
			this->tabPage2->UseVisualStyleBackColor = true;
			// 
			// lv_snap_file_analysis
			// 
			this->lv_snap_file_analysis->AllowColumnReorder = true;
			this->lv_snap_file_analysis->AllowDrop = true;
			this->lv_snap_file_analysis->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(3) {this->columnHeader99, 
				this->columnHeader176, this->columnHeader177});
			this->lv_snap_file_analysis->ContextMenuStrip = this->cms_snap_file_analysis;
			this->lv_snap_file_analysis->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_snap_file_analysis->FullRowSelect = true;
			this->lv_snap_file_analysis->Location = System::Drawing::Point(3, 3);
			this->lv_snap_file_analysis->Name = L"lv_snap_file_analysis";
			this->lv_snap_file_analysis->ShowItemToolTips = true;
			this->lv_snap_file_analysis->Size = System::Drawing::Size(905, 448);
			this->lv_snap_file_analysis->TabIndex = 2;
			this->lv_snap_file_analysis->UseCompatibleStateImageBehavior = false;
			this->lv_snap_file_analysis->View = System::Windows::Forms::View::Details;
			this->lv_snap_file_analysis->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_snap_file_analysis_ColumnClick);
			this->lv_snap_file_analysis->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_snap_file_analysis_ItemDrag);
			this->lv_snap_file_analysis->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_file_analysis_DragDrop);
			this->lv_snap_file_analysis->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_file_analysis_DragEnter);
			this->lv_snap_file_analysis->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_snap_file_analysis_MouseUp);
			// 
			// columnHeader99
			// 
			this->columnHeader99->Text = L"文件名称";
			this->columnHeader99->Width = 216;
			// 
			// columnHeader176
			// 
			this->columnHeader176->Text = L"文件路径";
			this->columnHeader176->Width = 399;
			// 
			// columnHeader177
			// 
			this->columnHeader177->Text = L"备注";
			this->columnHeader177->Width = 266;
			// 
			// cms_snap_file_analysis
			// 
			this->cms_snap_file_analysis->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(9) {this->cms_snap_file_analysis_one, 
				this->cms_snap_file_analysis_two, this->toolStripSeparator177, this->cms_snap_file_analysis_clear, this->toolStripSeparator187, 
				this->cms_snap_file_analysis_explorer, this->cms_snap_file_analysis_showProperty, this->toolStripSeparator181, this->cms_snap_file_analysis_export});
			this->cms_snap_file_analysis->Name = L"cms_sysSnap_file_analysis";
			this->cms_snap_file_analysis->Size = System::Drawing::Size(143, 154);
			// 
			// cms_snap_file_analysis_one
			// 
			this->cms_snap_file_analysis_one->Name = L"cms_snap_file_analysis_one";
			this->cms_snap_file_analysis_one->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_analysis_one->Text = L"第一个文件";
			this->cms_snap_file_analysis_one->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_analysis_one_Click);
			// 
			// cms_snap_file_analysis_two
			// 
			this->cms_snap_file_analysis_two->Name = L"cms_snap_file_analysis_two";
			this->cms_snap_file_analysis_two->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_analysis_two->Text = L"第二个文件";
			this->cms_snap_file_analysis_two->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_analysis_two_Click);
			// 
			// toolStripSeparator177
			// 
			this->toolStripSeparator177->Name = L"toolStripSeparator177";
			this->toolStripSeparator177->Size = System::Drawing::Size(139, 6);
			// 
			// cms_snap_file_analysis_clear
			// 
			this->cms_snap_file_analysis_clear->Name = L"cms_snap_file_analysis_clear";
			this->cms_snap_file_analysis_clear->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_analysis_clear->Text = L"清空";
			this->cms_snap_file_analysis_clear->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_analysis_clear_Click);
			// 
			// toolStripSeparator187
			// 
			this->toolStripSeparator187->Name = L"toolStripSeparator187";
			this->toolStripSeparator187->Size = System::Drawing::Size(139, 6);
			// 
			// cms_snap_file_analysis_explorer
			// 
			this->cms_snap_file_analysis_explorer->Name = L"cms_snap_file_analysis_explorer";
			this->cms_snap_file_analysis_explorer->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_analysis_explorer->Text = L"定位文件";
			this->cms_snap_file_analysis_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_analysis_explorer_Click);
			// 
			// cms_snap_file_analysis_showProperty
			// 
			this->cms_snap_file_analysis_showProperty->Name = L"cms_snap_file_analysis_showProperty";
			this->cms_snap_file_analysis_showProperty->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_analysis_showProperty->Text = L"查看文件属性";
			this->cms_snap_file_analysis_showProperty->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_analysis_showProperty_Click);
			// 
			// toolStripSeparator181
			// 
			this->toolStripSeparator181->Name = L"toolStripSeparator181";
			this->toolStripSeparator181->Size = System::Drawing::Size(139, 6);
			// 
			// cms_snap_file_analysis_export
			// 
			this->cms_snap_file_analysis_export->Name = L"cms_snap_file_analysis_export";
			this->cms_snap_file_analysis_export->Size = System::Drawing::Size(142, 22);
			this->cms_snap_file_analysis_export->Text = L"导出";
			this->cms_snap_file_analysis_export->Click += gcnew System::EventHandler(this, &Form1::cms_snap_file_analysis_export_Click);
			// 
			// tabPage3
			// 
			this->tabPage3->Controls->Add(this->splitContainer13);
			this->tabPage3->Location = System::Drawing::Point(4, 21);
			this->tabPage3->Name = L"tabPage3";
			this->tabPage3->Padding = System::Windows::Forms::Padding(3);
			this->tabPage3->Size = System::Drawing::Size(911, 454);
			this->tabPage3->TabIndex = 2;
			this->tabPage3->Text = L"注册表快照";
			this->tabPage3->UseVisualStyleBackColor = true;
			// 
			// splitContainer13
			// 
			this->splitContainer13->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer13->Location = System::Drawing::Point(3, 3);
			this->splitContainer13->Name = L"splitContainer13";
			this->splitContainer13->Orientation = System::Windows::Forms::Orientation::Horizontal;
			// 
			// splitContainer13.Panel1
			// 
			this->splitContainer13->Panel1->Controls->Add(this->splitContainer14);
			// 
			// splitContainer13.Panel2
			// 
			this->splitContainer13->Panel2->Controls->Add(this->cbo_snap_reg);
			this->splitContainer13->Size = System::Drawing::Size(905, 448);
			this->splitContainer13->SplitterDistance = 419;
			this->splitContainer13->TabIndex = 2;
			// 
			// splitContainer14
			// 
			this->splitContainer14->Dock = System::Windows::Forms::DockStyle::Fill;
			this->splitContainer14->Location = System::Drawing::Point(0, 0);
			this->splitContainer14->Name = L"splitContainer14";
			// 
			// splitContainer14.Panel1
			// 
			this->splitContainer14->Panel1->Controls->Add(this->tv_snap_reg);
			// 
			// splitContainer14.Panel2
			// 
			this->splitContainer14->Panel2->Controls->Add(this->lv_snap_reg);
			this->splitContainer14->Size = System::Drawing::Size(905, 419);
			this->splitContainer14->SplitterDistance = 238;
			this->splitContainer14->TabIndex = 0;
			// 
			// tv_snap_reg
			// 
			this->tv_snap_reg->Dock = System::Windows::Forms::DockStyle::Fill;
			this->tv_snap_reg->ImageIndex = 0;
			this->tv_snap_reg->ImageList = this->imageList1;
			this->tv_snap_reg->Location = System::Drawing::Point(0, 0);
			this->tv_snap_reg->Name = L"tv_snap_reg";
			this->tv_snap_reg->SelectedImageIndex = 0;
			this->tv_snap_reg->Size = System::Drawing::Size(238, 419);
			this->tv_snap_reg->TabIndex = 0;
			this->tv_snap_reg->BeforeExpand += gcnew System::Windows::Forms::TreeViewCancelEventHandler(this, &Form1::tv_snap_reg_BeforeExpand);
			this->tv_snap_reg->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::tv_snap_reg_ItemDrag);
			this->tv_snap_reg->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::tv_snap_reg_MouseUp);
			// 
			// lv_snap_reg
			// 
			this->lv_snap_reg->AllowColumnReorder = true;
			this->lv_snap_reg->AllowDrop = true;
			this->lv_snap_reg->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(5) {this->columnHeader178, 
				this->columnHeader182, this->columnHeader179, this->columnHeader181, this->columnHeader180});
			this->lv_snap_reg->ContextMenuStrip = this->cms_snap_reg;
			this->lv_snap_reg->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_snap_reg->FullRowSelect = true;
			this->lv_snap_reg->Location = System::Drawing::Point(0, 0);
			this->lv_snap_reg->Name = L"lv_snap_reg";
			this->lv_snap_reg->ShowItemToolTips = true;
			this->lv_snap_reg->Size = System::Drawing::Size(663, 419);
			this->lv_snap_reg->TabIndex = 0;
			this->lv_snap_reg->UseCompatibleStateImageBehavior = false;
			this->lv_snap_reg->View = System::Windows::Forms::View::Details;
			this->lv_snap_reg->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_snap_reg_ColumnClick);
			this->lv_snap_reg->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_snap_reg_ItemDrag);
			this->lv_snap_reg->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_reg_DragDrop);
			this->lv_snap_reg->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_reg_DragEnter);
			this->lv_snap_reg->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_snap_reg_MouseUp);
			// 
			// columnHeader178
			// 
			this->columnHeader178->Text = L"名称";
			this->columnHeader178->Width = 110;
			// 
			// columnHeader182
			// 
			this->columnHeader182->Text = L"路径";
			this->columnHeader182->Width = 209;
			// 
			// columnHeader179
			// 
			this->columnHeader179->Text = L"类型";
			this->columnHeader179->Width = 87;
			// 
			// columnHeader181
			// 
			this->columnHeader181->Text = L"数据类型";
			this->columnHeader181->Width = 88;
			// 
			// columnHeader180
			// 
			this->columnHeader180->Text = L"数据";
			this->columnHeader180->Width = 152;
			// 
			// cms_snap_reg
			// 
			this->cms_snap_reg->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(7) {this->cms_snap_reg_save, 
				this->toolStripSeparator183, this->cms_snap_reg_clear, this->toolStripSeparator188, this->cms_snap_reg_explorer, this->toolStripSeparator184, 
				this->cms_snap_reg_export});
			this->cms_snap_reg->Name = L"cms_sysSnap";
			this->cms_snap_reg->Size = System::Drawing::Size(131, 110);
			// 
			// cms_snap_reg_save
			// 
			this->cms_snap_reg_save->Name = L"cms_snap_reg_save";
			this->cms_snap_reg_save->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_save->Text = L"保存";
			this->cms_snap_reg_save->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_save_Click);
			// 
			// toolStripSeparator183
			// 
			this->toolStripSeparator183->Name = L"toolStripSeparator183";
			this->toolStripSeparator183->Size = System::Drawing::Size(127, 6);
			// 
			// cms_snap_reg_clear
			// 
			this->cms_snap_reg_clear->Name = L"cms_snap_reg_clear";
			this->cms_snap_reg_clear->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_clear->Text = L"清空";
			this->cms_snap_reg_clear->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_clear_Click);
			// 
			// toolStripSeparator188
			// 
			this->toolStripSeparator188->Name = L"toolStripSeparator188";
			this->toolStripSeparator188->Size = System::Drawing::Size(127, 6);
			// 
			// cms_snap_reg_explorer
			// 
			this->cms_snap_reg_explorer->Name = L"cms_snap_reg_explorer";
			this->cms_snap_reg_explorer->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_explorer->Text = L"定位注册表";
			this->cms_snap_reg_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_explorer_Click);
			// 
			// toolStripSeparator184
			// 
			this->toolStripSeparator184->Name = L"toolStripSeparator184";
			this->toolStripSeparator184->Size = System::Drawing::Size(127, 6);
			// 
			// cms_snap_reg_export
			// 
			this->cms_snap_reg_export->Name = L"cms_snap_reg_export";
			this->cms_snap_reg_export->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_export->Text = L"导出";
			this->cms_snap_reg_export->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_export_Click);
			// 
			// cbo_snap_reg
			// 
			this->cbo_snap_reg->Dock = System::Windows::Forms::DockStyle::Fill;
			this->cbo_snap_reg->FormattingEnabled = true;
			this->cbo_snap_reg->Location = System::Drawing::Point(0, 0);
			this->cbo_snap_reg->Name = L"cbo_snap_reg";
			this->cbo_snap_reg->Size = System::Drawing::Size(905, 20);
			this->cbo_snap_reg->TabIndex = 0;
			this->cbo_snap_reg->KeyPress += gcnew System::Windows::Forms::KeyPressEventHandler(this, &Form1::cbo_snap_reg_KeyPress);
			// 
			// tabPage5
			// 
			this->tabPage5->Controls->Add(this->lv_snap_reg_analysis);
			this->tabPage5->Location = System::Drawing::Point(4, 21);
			this->tabPage5->Name = L"tabPage5";
			this->tabPage5->Padding = System::Windows::Forms::Padding(3);
			this->tabPage5->Size = System::Drawing::Size(911, 454);
			this->tabPage5->TabIndex = 3;
			this->tabPage5->Text = L"注册表快照分析";
			this->tabPage5->UseVisualStyleBackColor = true;
			// 
			// lv_snap_reg_analysis
			// 
			this->lv_snap_reg_analysis->AllowColumnReorder = true;
			this->lv_snap_reg_analysis->AllowDrop = true;
			this->lv_snap_reg_analysis->Columns->AddRange(gcnew cli::array< System::Windows::Forms::ColumnHeader^  >(3) {this->columnHeader183, 
				this->columnHeader184, this->columnHeader185});
			this->lv_snap_reg_analysis->ContextMenuStrip = this->cms_snap_reg_analysis;
			this->lv_snap_reg_analysis->Dock = System::Windows::Forms::DockStyle::Fill;
			this->lv_snap_reg_analysis->FullRowSelect = true;
			this->lv_snap_reg_analysis->Location = System::Drawing::Point(3, 3);
			this->lv_snap_reg_analysis->Name = L"lv_snap_reg_analysis";
			this->lv_snap_reg_analysis->ShowItemToolTips = true;
			this->lv_snap_reg_analysis->Size = System::Drawing::Size(905, 448);
			this->lv_snap_reg_analysis->TabIndex = 3;
			this->lv_snap_reg_analysis->UseCompatibleStateImageBehavior = false;
			this->lv_snap_reg_analysis->View = System::Windows::Forms::View::Details;
			this->lv_snap_reg_analysis->ColumnClick += gcnew System::Windows::Forms::ColumnClickEventHandler(this, &Form1::lv_snap_reg_analysis_ColumnClick);
			this->lv_snap_reg_analysis->ItemDrag += gcnew System::Windows::Forms::ItemDragEventHandler(this, &Form1::lv_snap_reg_analysis_ItemDrag);
			this->lv_snap_reg_analysis->DragDrop += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_reg_analysis_DragDrop);
			this->lv_snap_reg_analysis->DragEnter += gcnew System::Windows::Forms::DragEventHandler(this, &Form1::lv_snap_reg_analysis_DragEnter);
			this->lv_snap_reg_analysis->MouseUp += gcnew System::Windows::Forms::MouseEventHandler(this, &Form1::lv_snap_reg_analysis_MouseUp);
			// 
			// columnHeader183
			// 
			this->columnHeader183->Text = L"注册表名称";
			this->columnHeader183->Width = 216;
			// 
			// columnHeader184
			// 
			this->columnHeader184->Text = L"注册表路径";
			this->columnHeader184->Width = 399;
			// 
			// columnHeader185
			// 
			this->columnHeader185->Text = L"备注";
			this->columnHeader185->Width = 266;
			// 
			// cms_snap_reg_analysis
			// 
			this->cms_snap_reg_analysis->Items->AddRange(gcnew cli::array< System::Windows::Forms::ToolStripItem^  >(8) {this->cms_snap_reg_analysis_one, 
				this->cms_snap_reg_analysis_two, this->toolStripSeparator182, this->cms_snap_reg_analysis_clear, this->toolStripSeparator189, 
				this->cms_snap_reg_analysis_explorer, this->toolStripSeparator185, this->cms_snap_reg_analysis_export});
			this->cms_snap_reg_analysis->Name = L"cms_sysSnap_file_analysis";
			this->cms_snap_reg_analysis->Size = System::Drawing::Size(131, 132);
			// 
			// cms_snap_reg_analysis_one
			// 
			this->cms_snap_reg_analysis_one->Name = L"cms_snap_reg_analysis_one";
			this->cms_snap_reg_analysis_one->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_analysis_one->Text = L"第一个文件";
			this->cms_snap_reg_analysis_one->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_analysis_one_Click);
			// 
			// cms_snap_reg_analysis_two
			// 
			this->cms_snap_reg_analysis_two->Name = L"cms_snap_reg_analysis_two";
			this->cms_snap_reg_analysis_two->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_analysis_two->Text = L"第二个文件";
			this->cms_snap_reg_analysis_two->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_analysis_two_Click);
			// 
			// toolStripSeparator182
			// 
			this->toolStripSeparator182->Name = L"toolStripSeparator182";
			this->toolStripSeparator182->Size = System::Drawing::Size(127, 6);
			// 
			// cms_snap_reg_analysis_clear
			// 
			this->cms_snap_reg_analysis_clear->Name = L"cms_snap_reg_analysis_clear";
			this->cms_snap_reg_analysis_clear->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_analysis_clear->Text = L"清空";
			this->cms_snap_reg_analysis_clear->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_analysis_clear_Click);
			// 
			// toolStripSeparator189
			// 
			this->toolStripSeparator189->Name = L"toolStripSeparator189";
			this->toolStripSeparator189->Size = System::Drawing::Size(127, 6);
			// 
			// cms_snap_reg_analysis_explorer
			// 
			this->cms_snap_reg_analysis_explorer->Name = L"cms_snap_reg_analysis_explorer";
			this->cms_snap_reg_analysis_explorer->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_analysis_explorer->Text = L"定位注册表";
			this->cms_snap_reg_analysis_explorer->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_analysis_explorer_Click);
			// 
			// toolStripSeparator185
			// 
			this->toolStripSeparator185->Name = L"toolStripSeparator185";
			this->toolStripSeparator185->Size = System::Drawing::Size(127, 6);
			// 
			// cms_snap_reg_analysis_export
			// 
			this->cms_snap_reg_analysis_export->Name = L"cms_snap_reg_analysis_export";
			this->cms_snap_reg_analysis_export->Size = System::Drawing::Size(130, 22);
			this->cms_snap_reg_analysis_export->Text = L"导出";
			this->cms_snap_reg_analysis_export->Click += gcnew System::EventHandler(this, &Form1::cms_snap_reg_analysis_export_Click);
			// 
			// lblMenu
			// 
			this->lblMenu->AutoSize = true;
			this->lblMenu->Location = System::Drawing::Point(895, 29);
			this->lblMenu->Name = L"lblMenu";
			this->lblMenu->Size = System::Drawing::Size(29, 12);
			this->lblMenu->TabIndex = 1;
			this->lblMenu->Text = L"<<<<";
			this->lblMenu->Click += gcnew System::EventHandler(this, &Form1::lblMenu_Click);
			// 
			// lbl_quit
			// 
			this->lbl_quit->Anchor = static_cast<System::Windows::Forms::AnchorStyles>((System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right));
			this->lbl_quit->AutoSize = true;
			this->lbl_quit->Font = (gcnew System::Drawing::Font(L"宋体", 9, System::Drawing::FontStyle::Underline, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->lbl_quit->Location = System::Drawing::Point(876, 540);
			this->lbl_quit->Name = L"lbl_quit";
			this->lbl_quit->Size = System::Drawing::Size(29, 12);
			this->lbl_quit->TabIndex = 18;
			this->lbl_quit->Text = L"取消";
			this->lbl_quit->Visible = false;
			this->lbl_quit->Click += gcnew System::EventHandler(this, &Form1::lbl_quit_Click);
			// 
			// imageList2
			// 
			this->imageList2->ImageStream = (cli::safe_cast<System::Windows::Forms::ImageListStreamer^  >(resources->GetObject(L"imageList2.ImageStream")));
			this->imageList2->TransparentColor = System::Drawing::Color::Transparent;
			this->imageList2->Images->SetKeyName(0, L"8.ico");
			this->imageList2->Images->SetKeyName(1, L"9.ico");
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 12);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(933, 556);
			this->Controls->Add(this->lbl_quit);
			this->Controls->Add(this->lblMenu);
			this->Controls->Add(this->tc_main);
			this->Controls->Add(this->statusStrip1);
			this->Controls->Add(this->menuStrip1);
			this->Icon = (cli::safe_cast<System::Drawing::Icon^  >(resources->GetObject(L"$this.Icon")));
			this->MainMenuStrip = this->menuStrip1;
			this->Name = L"Form1";
			this->StartPosition = System::Windows::Forms::FormStartPosition::CenterScreen;
			this->Text = L"Deianeira 1.0 beta";
			this->FormClosing += gcnew System::Windows::Forms::FormClosingEventHandler(this, &Form1::Form1_FormClosing);
			this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load);
			this->menuStrip1->ResumeLayout(false);
			this->menuStrip1->PerformLayout();
			this->statusStrip1->ResumeLayout(false);
			this->statusStrip1->PerformLayout();
			this->tp_about->ResumeLayout(false);
			this->groupBox3->ResumeLayout(false);
			this->groupBox3->PerformLayout();
			this->groupBox2->ResumeLayout(false);
			this->groupBox2->PerformLayout();
			this->tp_monitor->ResumeLayout(false);
			this->cms_monitor->ResumeLayout(false);
			this->tp_srcshot->ResumeLayout(false);
			this->cms_srcshot->ResumeLayout(false);
			this->tp_other->ResumeLayout(false);
			this->tc_other->ResumeLayout(false);
			this->tp_other_table->ResumeLayout(false);
			this->splitContainer12->Panel1->ResumeLayout(false);
			this->splitContainer12->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer12))->EndInit();
			this->splitContainer12->ResumeLayout(false);
			this->cms_other_table->ResumeLayout(false);
			this->tp_other_md5->ResumeLayout(false);
			this->cms_other_md5->ResumeLayout(false);
			this->tp_other_menu->ResumeLayout(false);
			this->splitContainer5->Panel1->ResumeLayout(false);
			this->splitContainer5->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer5))->EndInit();
			this->splitContainer5->ResumeLayout(false);
			this->cms_other_menu->ResumeLayout(false);
			this->groupBox1->ResumeLayout(false);
			this->groupBox1->PerformLayout();
			this->tp_other_proxy->ResumeLayout(false);
			this->cms_other_proxy->ResumeLayout(false);
			this->tp_other_sigverif->ResumeLayout(false);
			this->cms_other_sigverif->ResumeLayout(false);
			this->tp_other_mbr->ResumeLayout(false);
			this->cms_other_mbr->ResumeLayout(false);
			this->tp_other_share->ResumeLayout(false);
			this->cms_other_share->ResumeLayout(false);
			this->tp_other_user->ResumeLayout(false);
			this->cms_other_user->ResumeLayout(false);
			this->tp_other_clean->ResumeLayout(false);
			this->splitContainer7->Panel1->ResumeLayout(false);
			this->splitContainer7->Panel2->ResumeLayout(false);
			this->splitContainer7->Panel2->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer7))->EndInit();
			this->splitContainer7->ResumeLayout(false);
			this->splitContainer8->Panel1->ResumeLayout(false);
			this->splitContainer8->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer8))->EndInit();
			this->splitContainer8->ResumeLayout(false);
			this->cms_other_clean_trace->ResumeLayout(false);
			this->tp_other_trace->ResumeLayout(false);
			this->splitContainer9->Panel1->ResumeLayout(false);
			this->splitContainer9->Panel2->ResumeLayout(false);
			this->splitContainer9->Panel2->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer9))->EndInit();
			this->splitContainer9->ResumeLayout(false);
			this->splitContainer10->Panel1->ResumeLayout(false);
			this->splitContainer10->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer10))->EndInit();
			this->splitContainer10->ResumeLayout(false);
			this->tp_run->ResumeLayout(false);
			this->cms_run->ResumeLayout(false);
			this->tp_win->ResumeLayout(false);
			this->cms_win->ResumeLayout(false);
			this->tp_reg->ResumeLayout(false);
			this->splitContainer3->Panel1->ResumeLayout(false);
			this->splitContainer3->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer3))->EndInit();
			this->splitContainer3->ResumeLayout(false);
			this->splitContainer4->Panel1->ResumeLayout(false);
			this->splitContainer4->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer4))->EndInit();
			this->splitContainer4->ResumeLayout(false);
			this->cms_tv_reg->ResumeLayout(false);
			this->cms_reg->ResumeLayout(false);
			this->tp_file->ResumeLayout(false);
			this->splitContainer1->Panel1->ResumeLayout(false);
			this->splitContainer1->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer1))->EndInit();
			this->splitContainer1->ResumeLayout(false);
			this->splitContainer2->Panel1->ResumeLayout(false);
			this->splitContainer2->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer2))->EndInit();
			this->splitContainer2->ResumeLayout(false);
			this->cms_tv_file->ResumeLayout(false);
			this->cms_file->ResumeLayout(false);
			this->tp_net->ResumeLayout(false);
			this->tc_net->ResumeLayout(false);
			this->tp_net_port->ResumeLayout(false);
			this->cms_net_port->ResumeLayout(false);
			this->tp_net_iePlugin->ResumeLayout(false);
			this->cms_net_iePlugin->ResumeLayout(false);
			this->tp_net_ieMenu->ResumeLayout(false);
			this->cms_net_ieMenu->ResumeLayout(false);
			this->tp_net_lsp->ResumeLayout(false);
			this->cms_net_lsp->ResumeLayout(false);
			this->tp_net_host->ResumeLayout(false);
			this->tp_net_host->PerformLayout();
			this->cms_net_host->ResumeLayout(false);
			this->tp_app->ResumeLayout(false);
			this->tc_app->ResumeLayout(false);
			this->tp_app_msg->ResumeLayout(false);
			this->cms_app_msg->ResumeLayout(false);
			this->tp_app_hook->ResumeLayout(false);
			this->splitContainer11->Panel1->ResumeLayout(false);
			this->splitContainer11->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer11))->EndInit();
			this->splitContainer11->ResumeLayout(false);
			this->cms_app_hook2->ResumeLayout(false);
			this->cms_app_hook->ResumeLayout(false);
			this->tp_kernel->ResumeLayout(false);
			this->tc_kernel->ResumeLayout(false);
			this->tp_kernel_ssdt->ResumeLayout(false);
			this->cms_kernel_ssdt->ResumeLayout(false);
			this->tp_kernel_shadow->ResumeLayout(false);
			this->cms_kernel_shadow->ResumeLayout(false);
			this->tp_kernel_fsd->ResumeLayout(false);
			this->cms_kernel_fsd->ResumeLayout(false);
			this->tp_kernel_callback->ResumeLayout(false);
			this->cms_kernel_callback->ResumeLayout(false);
			this->tp_kernel_filter->ResumeLayout(false);
			this->cms_kernel_filter->ResumeLayout(false);
			this->tp_kernel_hook->ResumeLayout(false);
			this->tabPage4->ResumeLayout(false);
			this->cms_sysmodule->ResumeLayout(false);
			this->tp_eventlog->ResumeLayout(false);
			this->cms_eventlog->ResumeLayout(false);
			this->tp_service->ResumeLayout(false);
			this->cms_service->ResumeLayout(false);
			this->tp_process->ResumeLayout(false);
			this->splitContainer6->Panel1->ResumeLayout(false);
			this->splitContainer6->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer6))->EndInit();
			this->splitContainer6->ResumeLayout(false);
			this->cms_process->ResumeLayout(false);
			this->cms_module->ResumeLayout(false);
			this->tc_main->ResumeLayout(false);
			this->tp_snap->ResumeLayout(false);
			this->tc_snap->ResumeLayout(false);
			this->tabPage1->ResumeLayout(false);
			this->cms_snap_file->ResumeLayout(false);
			this->tabPage2->ResumeLayout(false);
			this->cms_snap_file_analysis->ResumeLayout(false);
			this->tabPage3->ResumeLayout(false);
			this->splitContainer13->Panel1->ResumeLayout(false);
			this->splitContainer13->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer13))->EndInit();
			this->splitContainer13->ResumeLayout(false);
			this->splitContainer14->Panel1->ResumeLayout(false);
			this->splitContainer14->Panel2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->splitContainer14))->EndInit();
			this->splitContainer14->ResumeLayout(false);
			this->cms_snap_reg->ResumeLayout(false);
			this->tabPage5->ResumeLayout(false);
			this->cms_snap_reg_analysis->ResumeLayout(false);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion

		 // 存放插件
		 static Dictionary<Plugin::plugin^,Type^>^ plugins = gcnew Dictionary<Plugin::plugin^,Type^>();
		 //ListViewItem排序所需，记录当前列
		 int lv_item_curColumn; 
		 //表示降序还是升序
		 bool lv_item_bAsc; 
		 //
		 Thread^ thread_sigverif;

	     //重写窗体消息函数
protected: virtual void WndProc(Message% msg) override {
			   if (msg.Msg == WM_SYSCOMMAND) 
			   {
				   switch (msg.WParam.ToInt32())   
				   {   
					   //与上面的新菜单项的标识符相同
				   case 0x10000:   
					   {
						   //实例化一个窗体然后调用
						   AboutForm^ aboutForm=gcnew AboutForm();
						   aboutForm->ShowDialog();
					   } 
					   break;
				   default:   
					   break;   
				   }   
			   } 
			   //处理其他消息
			   Form::WndProc(msg);		   
		   } 

		 //判断是否是预定义接口
private: bool IsValidPlugin(Type^ tyte){
			 bool ret = false;

			 if (tyte->FullName == "MyPlugin.myPlugin")
			 {
				 ret = true;
			 }

			 return ret;
		 }

		 //加载插件
private: System::Void LoadPlugin(){
			 try
			 {
				 array<String^>^ str_files = Directory::GetFiles(Application::StartupPath + "\\plugins");
				 for each (String^ str_ in str_files)
				 {  
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 //如果扩展名
					 if (fi_->Extension == ".dll")
					 {
						 try
						 {
							 //加载
							 Assembly^ assembly = Assembly::LoadFile(str_);
							 //获得载入的dll中的所有类
							 array<Type^>^ types = assembly->GetTypes();

							 //遍历该类集合
							 for each (Type^ t in types)
							 {
								 if (IsValidPlugin(t))
								 {
									 Plugin::plugin^ plugin = (Plugin::plugin^)assembly->CreateInstance(t->FullName);

									 //实例化该类,并将对象装入动态数组plugins
									 plugins->Add(plugin,t);

									 //实例化一个菜单
									 Plugin::InitData^ initData;
									 //获得初始化信息
									 initData = plugin->Init();

									 if (!initData->IsWindowApp)
									 {
										 switch(initData->tc_)
										 {
										 case Plugin::TabControls::tc_main:
											 plugin->InitializeComponent(tc_main);
											 break;
										 case Plugin::TabControls::tc_kernel:
											 plugin->InitializeComponent(tc_kernel);
											 break;
										 case Plugin::TabControls::tc_app:
											 plugin->InitializeComponent(tc_app);
											 break;
										 case Plugin::TabControls::tc_net:
											 plugin->InitializeComponent(tc_net);
											 break;
										 case Plugin::TabControls::tc_other:
											 plugin->InitializeComponent(tc_other);
											 break;
										 }									 
									 }

									 ToolStripMenuItem^ tsmi_ = gcnew ToolStripMenuItem(initData->Name);
									 tsmi_->Click += gcnew System::EventHandler(this,&Form1::plugin_item_Click);
									 this->tsmibtnPlugin->DropDownItems->Add(tsmi_);

									 tsmi_->Tag = plugin;
								 }
							 }
						 }
						 catch(Exception^ ex) { }
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //插件的单击事件
private: System::Void plugin_item_Click(System::Object^  sender, System::EventArgs^  e)
		 {
			 try
			 {
				 Plugin::InitData^ initData;
				 Plugin::plugin^ plugin;
				 Type^ type;
				 TabControl^ tc_;

				 plugin = (Plugin::plugin^)((ToolStripMenuItem^)sender)->Tag;

				 plugins->TryGetValue(plugin,type);

				 //获得初始化信息
				 initData = plugin->Init();

				 //
				 if (initData->GetHDriver)
				 {
					 plugin->GetHDriver(hDriver);
				 }

				 //
				 if (initData->IsWindowApp)
				 {
					 plugin->Run();
				 }
				 else
				 {
					 switch(initData->tc_)
					 {
					 case Plugin::TabControls::tc_main:
						 break;
					 case Plugin::TabControls::tc_kernel:
						 tc_main->SelectedIndex = 4;
						 break;
					 case Plugin::TabControls::tc_app:
						 tc_main->SelectedIndex = 5;
						 break;
					 case Plugin::TabControls::tc_net:
						 tc_main->SelectedIndex = 6;
						 break;
					 case Plugin::TabControls::tc_other:
						 tc_main->SelectedIndex = 12;
						 break;
					 }

					 if (initData->IsDoAnythingBeforeLoad)
					 {
						 plugin->Load();
					 }

					 tc_ = plugin->GetTabControl();
					 tc_->SelectedIndex = tc_->TabCount - 1;
				 }
			 }
			 catch(Exception^ ex) { MessageBox::Show(ex->Message); }
		 }

		 //
private: System::Void SetPrivilege(){
			 //
			 HANDLE hToken = NULL;

			 //提升进程权限
			 if(OpenProcessToken(GetCurrentProcess(),TOKEN_ADJUST_PRIVILEGES,&hToken))
			 {
				 //
				 common_setPrivilege(hToken,SE_DEBUG_NAME,TRUE);
				 //
				 common_setPrivilege(hToken,SE_SHUTDOWN_NAME,TRUE);
			 }
			 else
			 {
				 //
				 MessageBox::Show("打开进程访问令牌失败！");
			 }
		 }

		 //
private: System::Void AppendAboutMenu(){
			 //添加任务栏右键菜单，this代表的是本地应用窗体
			 HMENU hAboutMenu = GetSystemMenu((HWND)(int)this->Handle, false);   
			 //添加一个分隔线
			 AppendMenu(hAboutMenu, MF_SEPARATOR, 0, NULL);
			 //添加一个“About Deianeira(A)..."的菜单项 ，0x10000 一个菜单常量，自己可以随意指定一个数值
			 AppendMenu(hAboutMenu, MF_STRING, 0x10000, L"About Deianeira(A)...");  
		 }

		 //
private: System::Void LoadDriver(){
			 //
			 hDriver = common_loadDriver((LPTSTR)(LPVOID)Marshal::StringToHGlobalUni(Application::StartupPath+"\\Deianeira.sys"),L"Deianeira");

			 //第一次加载失败，可能是内存中的驱动已经被卸载了
			 if (!hDriver)
			 {		 
				 //从资源中释放驱动
				 if (common_createFileFromResource(IDR_ATTACHMENT_DRIVER,L"Attachment",common_net::common_stringToHGlobalUni(Application::StartupPath + "\\Deianeira.sys")))
				 {
					 //再次加载
					 hDriver = common_loadDriver((LPTSTR)(LPVOID)Marshal::StringToHGlobalUni(Application::StartupPath+"\\Deianeira.sys"),L"Deianeira");
					 //
					 try
					 {
						 //如果驱动文件存在的话
						 if (File::Exists(Application::StartupPath + "\\Deianeira.sys"))
						 {
							 File::Delete(Application::StartupPath + "\\Deianeira.sys");
						 }
					 }
					 catch(Exception^ ex){ }		 
				 }					 
			 }

			 //如果还加载失败，说明问题不是程序本身鸟
			 if (!hDriver)
			 {
				 //
				 MessageBox::Show("驱动加载失败！");
				 //
				 return;
			 }

			 //清空初始化
			 init_hdriver(bRet,dwRet);
			 //发送系统版本号给驱动
			 DeviceIoControl(hDriver, IOCTL_GETOSVERSION, &ulOSVersion, sizeof(ULONG), NULL, 0, &dwRet, NULL);
			 //发送程序进程ID给驱动
			 DeviceIoControl(hDriver, IOCTL_GETPROCESSID, &ulProcessID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
		 }

		 //释放配置文件
private: System::Void config_release(){
			 //如果配置文件不存在的话，就释放
			 if (!File::Exists(Application::StartupPath + "\\Deianeira.config"))
			 {
				 common_createFileFromResource(IDR_ATTACHMENT_CONFIG,L"Attachment",common_net::common_stringToHGlobalUni(Application::StartupPath + "\\Deianeira.config"));
			 }
		 }

		 //
private: System::Void config_menustrip(){
			 try
			 {
				 //
				 String^ str_menustrip_visible = common_net::config_getPrivateProfileString("menu","menustrip_visible",Application::StartupPath + "\\Deianeira.config");
				 
				 //菜单栏的显现
				 if (str_menustrip_visible == "true")
				 {			 
					 //重定位
					 menuStrip1->Visible = true;
					 tsmibtnMenu->Checked = true;
				 }
				 else
				 {
					 //重定位
					 lblMenu->Location = Point(lblMenu->Location.X,lblMenu->Location.Y-menuStrip1->Height);
					 menuStrip1->Visible = false;
					 tsmibtnMenu->Checked = false;
				 }
			 }
			 catch (Exception^ ex){ }
		 }

		 //从配置文件中加载“常用功能”菜单
private: System::Void config_loadCommonFunc(){
			 //
			 try
			 {
				 //
				 String^ str_commonFunc1 = common_net::config_getPrivateProfileString("menu","common_func1",Application::StartupPath + "\\Deianeira.config");
				 //
				 String^ str_commonFunc2 = common_net::config_getPrivateProfileString("menu","common_func2",Application::StartupPath + "\\Deianeira.config");
				 //
				 array<String^>^ strs_commonFunc1 = str_commonFunc1->Split(gcnew array<String^>{","},StringSplitOptions::RemoveEmptyEntries);
				 //
				 array<String^>^ strs_commonFunc2 = str_commonFunc2->Split(gcnew array<String^>{","},StringSplitOptions::RemoveEmptyEntries);
				 //
				 for (int i = 0;i < strs_commonFunc1->Length;i ++)
				 {
					 //显示名称
					 ToolStripMenuItem^ item = gcnew ToolStripMenuItem(strs_commonFunc1[i]);
					 //设置tag标志
					 item->Tag = strs_commonFunc2[i];
					 //
					 item->Click += gcnew System::EventHandler(this,&Form1::tsmibtnCommon_subItems_Click);
					 //
					 this->tsmibtnCommonFunc->DropDownItems->Add(item);
				 }	 
			 }
			 catch (Exception^ ex){ }
		 }

		 //从配置文件中加载“常用URL”菜单
private: System::Void config_loadCommonUrl(){
			 //
			 try
			 {
				 //
				 String^ str_commonURL1 = common_net::config_getPrivateProfileString("menu","common_url1",Application::StartupPath + "\\Deianeira.config");
				 //
				 String^ str_commonURL2 = common_net::config_getPrivateProfileString("menu","common_url2",Application::StartupPath + "\\Deianeira.config");
				 //
				 array<String^>^ strs_commonURL1 = str_commonURL1->Split(gcnew array<String^>{","},StringSplitOptions::RemoveEmptyEntries);
				 //
				 array<String^>^ strs_commonURL2 = str_commonURL2->Split(gcnew array<String^>{","},StringSplitOptions::RemoveEmptyEntries);
				 //
				 for (int i = 0;i < strs_commonURL1->Length;i ++)
				 {
					 //显示名称
					 ToolStripMenuItem^ item = gcnew ToolStripMenuItem(strs_commonURL1[i]);
					 //设置tag标志
					 item->Tag = strs_commonURL2[i];
					 //
					 item->Click += gcnew System::EventHandler(this,&Form1::tsmibtnCommon_subItems_Click);
					 //
					 this->tsmibtnCommonURL->DropDownItems->Add(item);
				 }	 
			 }
			 catch (Exception^ ex){ }
		 }

		 //lv_module
private: System::Void config_lv_module(){
			 //
			 try
			 {
				 //
				 String^ str_lv_module_visible = common_net::config_getPrivateProfileString("main","lv_module_visible",Application::StartupPath + "\\Deianeira.config");

				 //
				 if (str_lv_module_visible == "true")
				 {
					 //
					 cms_process_showModuleForm->Checked = true;
					 //
					 String^ str_lv_module_height = common_net::config_getPrivateProfileString("main","lv_module_height",Application::StartupPath + "\\Deianeira.config");
					 //
					 splitContainer6->SplitterDistance = splitContainer6->Height - int::Parse(str_lv_module_height);
					 //
					 lv_module->Height = splitContainer6->Panel2->Height;
					 //
					 lv_module->Visible = true;
				 }
				 else if(str_lv_module_visible == "false")
				 {
					 //
					 cms_process_showModuleForm->Checked =false;
					 //
					 splitContainer6->Panel2MinSize = 0;
					 //
					 lv_module->Visible = false;
					 //
					 splitContainer6->SplitterDistance = splitContainer6->Height;
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //开启自我保护
private: System::Void SelfProtection(){
			 //
			 init_hdriver(bRet,dwRet);

			 //开启自我保护
			 String^ str_SelfProtection = common_net::config_getPrivateProfileString("main","SelfProtection",Application::StartupPath + "\\Deianeira.config");
			 
			 //不开启保护
			 if(str_SelfProtection == "0")
			 {
				 tsmibtnSelfProtectionStart->Enabled = false;
				 tsmibtnSelfProtectionStop->Enabled = false;
			 }
			 //开启ssdt保护
			 else if (str_SelfProtection == "1")
			 {
				 //
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_START_SSDT, NULL, 0, NULL, 0, &dwRet, NULL);

				 //如果成功
				 if (bRet)
				 {
					 //
					 tsmibtnSelfProtectionStart->Enabled = false;
					 tsmibtnSelfProtectionStop->Enabled = true;
				 }
				 else
				 {
					 //
					 tsmibtnSelfProtectionStart->Enabled = true;
					 tsmibtnSelfProtectionStop->Enabled = false;
				 }
			 }
			 //开启shadow保护
			 else if (str_SelfProtection == "2")
			 {
				 //
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_START_SHADOW, NULL, 0, NULL, 0, &dwRet, NULL);

				 //如果成功
				 if (bRet)
				 {
					 //
					 tsmibtnSelfProtectionStart->Enabled = false;
					 tsmibtnSelfProtectionStop->Enabled = true;
				 }
				 else
				 {
					 //
					 tsmibtnSelfProtectionStart->Enabled = true;
					 tsmibtnSelfProtectionStop->Enabled = false;
				 }
			 }
			 //开启所有保护
			 else if (str_SelfProtection == "3")
			 {
				 //
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_START_ALL, NULL, 0, NULL, 0, &dwRet, NULL);

				 //如果成功
				 if (bRet)
				 {
					 //
					 tsmibtnSelfProtectionStart->Enabled = false;
					 tsmibtnSelfProtectionStop->Enabled = true;
				 }
				 else
				 {
					 //
					 tsmibtnSelfProtectionStart->Enabled = true;
					 tsmibtnSelfProtectionStop->Enabled = false;
				 }
			 }
		 }

		 //插件
private: System::Void ShowPlugin(){
			 try
			 {
				 //
				 String^ str_enable_plugin = common_net::config_getPrivateProfileString("main","enable_plugin",Application::StartupPath + "\\Deianeira.config");
				 
				 //
				 if (str_enable_plugin == "true")
				 {			 
					 //
					 if (!File::Exists(Application::StartupPath + "\\plugin.dll"))
					 {
						 //释放dll文件
						 if(common_createFileFromResource(IDR_ATTACHMENT_PLUGIN,L"Attachment",common_net::common_stringToHGlobalUni(Application::StartupPath + "\\plugin.dll")))
						 {
							 //
							 if (Directory::Exists(Application::StartupPath + "\\plugins"))
							 {
								 //加载插件
								 LoadPlugin();
							 } 
						 }
						 //
						 return;
					 }

					 //
					 if (Directory::Exists(Application::StartupPath + "\\plugins"))
					 {
						 //加载插件
						 LoadPlugin();
					 } 
				 }
			 }
			 catch (Exception^ ex){ }
		 }

	     //窗体的加载事件
private: System::Void Form1_Load(System::Object^  sender, System::EventArgs^  e) {
			 //
			 SetPrivilege();

			 //获得系统版本号
			 ulOSVersion = common_net::common_getOSVersion();
			 //获得当前进程ID
			 ulProcessID = Process::GetCurrentProcess()->Id;
			 
			 //
			 AppendAboutMenu();
			 
			 //
			 LoadDriver();
 
			 //
			 config_release();
			 //
			 config_menustrip();
			 //
			 config_loadCommonFunc();
			 //
			 config_loadCommonUrl();
			 //
			 config_lv_module();
			 //
			 SelfProtection();
			 //
			 ShowPlugin();

			 //在窗体运行的时候，显示进程
			 lv_process_show();

			 //注册表解析时需要初始化相关信息
			 ntreg_init_func(map_ntreg,map2_ntreg);
		 }

		 //在这里处理监控相关，以免蓝屏
private: System::Void Form1_FormClosing(System::Object^  sender, System::Windows::Forms::FormClosingEventArgs^  e) {
			 if (tsmibtnSelfProtectionStop->Enabled)
			 {
				 tsmibtnSelfProtectionStop_Click(sender,e);
			 }		 

			 if (cms_monitor_stop->Enabled)
			 {
				 cms_monitor_stop_Click(sender,e);
			 }

			 lv_monitor_free();
		 }

		 //子菜单的单击事件
private: System::Void tsmibtnCommon_subItems_Click(System::Object^ sender, System::EventArgs^ e)
		 {
			 try
			 {
				 Process::Start(((ToolStripMenuItem^)sender)->Tag->ToString());
			 }
			 catch (Exception^ ex){ MessageBox::Show(ex->Message);}
		 }


	   //菜单栏相关按钮事件
#pragma region menu
		 //开启自我保护
private: System::Void tsmibtnSelfProtectionStart_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 //发送控制代码，开启自我保护
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //开启自我保护
			 String^ str_SelfProtection = common_net::config_getPrivateProfileString("main","SelfProtection",Application::StartupPath+"\\Deianeira.config");
			 //开启ssdt保护
			 if (str_SelfProtection=="1")
			 {
				 //发送控制代码
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_START_SSDT, NULL, 0, NULL, 0, &dwRet, NULL);
			 }
			 //开启shadow保护
			 else if (str_SelfProtection=="2")
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_START_SHADOW, NULL, 0, NULL, 0, &dwRet, NULL);
			 }
			 //开启所有保护
			 else if (str_SelfProtection=="3")
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_START_ALL, NULL, 0, NULL, 0, &dwRet, NULL);
			 }

			 //如果成功
			 if (bRet)
			 {
				 tsmibtnSelfProtectionStart->Enabled=false;
				 tsmibtnSelfProtectionStop->Enabled=true;
			 }
			 //失败
			 else
			 {
				 tsmibtnSelfProtectionStart->Enabled=true;
				 tsmibtnSelfProtectionStop->Enabled=false;
				 //
				 MessageBox::Show("开启自我保护失败！");
			 }
		 }

		 //结束自我保护
private: System::Void tsmibtnSelfProtectionStop_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 //发送控制代码，开启自我保护
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //开启自我保护
			 String^ str_SelfProtection = common_net::config_getPrivateProfileString("main","SelfProtection",Application::StartupPath+"\\Deianeira.config");
			
			 //开启ssdt保护
			 if (str_SelfProtection=="1")
			 {
				 //发送控制代码
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_STOP_SSDT, NULL, 0, NULL, 0, &dwRet, NULL);
			 }
			 //开启shadow保护
			 else if (str_SelfProtection=="2")
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_STOP_SHADOW, NULL, 0, NULL, 0, &dwRet, NULL);
			 }
			 //开启所有保护
			 else if (str_SelfProtection=="3")
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_SELFPROTECTION_STOP_ALL, NULL, 0, NULL, 0, &dwRet, NULL);
			 }

			 //如果成功
			 if (bRet)
			 {
				 tsmibtnSelfProtectionStart->Enabled=true;
				 tsmibtnSelfProtectionStop->Enabled=false;
			 }
			 //失败
			 else
			 {
				 tsmibtnSelfProtectionStart->Enabled=false;
				 tsmibtnSelfProtectionStop->Enabled=true;
				 //
				 MessageBox::Show("停止自我保护失败！");
			 }
		 }

		 //退出
private: System::Void tsmibtnQuit_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (tsmibtnSelfProtectionStop->Enabled)
			 {
				 tsmibtnSelfProtectionStop_Click(sender,e);
			 }
			 //如果开启了自我保护，则要关闭自我保护后在退出
			 Application::Exit();
		 }

		 //菜单栏的显现和隐藏
private: System::Void tsmibtnMenu_Click(System::Object^  sender, System::EventArgs^  e) {
			 //如果已经显现
			 if(tsmibtnMenu->Checked)
			 {
				 //重定位
				 lblMenu->Location = Point(lblMenu->Location.X,lblMenu->Location.Y-menuStrip1->Height);
				 //隐藏菜单栏
				 menuStrip1->Visible=false;
				 tsmibtnMenu->Checked=false;
				 //保存信息到配置文件
				 common_net::config_writePrivateProfileString("menu","menustrip_visible","false",Application::StartupPath+"\\Deianeira.config");
			 }
			 else
			 {
				 //重定位
				 lblMenu->Location = Point(lblMenu->Location.X,lblMenu->Location.Y+menuStrip1->Height);
				 //显现菜单栏
				 menuStrip1->Visible=true;
				 tsmibtnMenu->Checked=true;
				 //保存信息到配置文件
				 common_net::config_writePrivateProfileString("menu","menustrip_visible","true",Application::StartupPath+"\\Deianeira.config");			 
			 }
		 }

		 //修复LSP
private: System::Void tsmibtnFixLSP_Click(System::Object^  sender, System::EventArgs^  e) {
			 cms_net_lsp_fix_Click(sender,e);
		 }

		 //修复安全模式
private: System::Void tsmibtnSecMode_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (common_createFileFromResource(IDR_ATTACHMENT_SAFEBOOT,L"Attachment",common_net::common_stringToHGlobalUni(Application::StartupPath+"\\SafeBoot.reg")))
			 {
				 try
				 {
					 Process::Start("regedit.exe","SafeBoot.reg");
				 }
				 catch(Exception^ ex){ MessageBox::Show(ex->Message); }

				 //如果存在的话就删除掉
				 if (File::Exists(Application::StartupPath+"\\SafeBoot.reg"))
				 {
					 File::Delete(Application::StartupPath+"\\SafeBoot.reg");
				 }
			 }
		 }

		 //构造安全环境
private: System::Void tsmibtnSecEnv_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //构造安全环境，但保留外壳程序
private: System::Void tsmibtnSecEnv2_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //强制关机
private: System::Void tsmibtnForceShutdown_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (!common_shutdown(FALSE))
			 {
				 MessageBox::Show("强制关机失败！");
			 }
		 }

		 //强制重启
private: System::Void tsmibtnForceReboot_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (!common_shutdown(TRUE))
			 {
				 MessageBox::Show("强制重启失败！");
			 }
		 }

		 //置顶
private: System::Void tsmibtnTopMost_Click(System::Object^  sender, System::EventArgs^  e) {
			 //如果已经置顶
			 if(tsmibtnTopMost->Checked)
			 {
				 //取消置顶
				 this->TopMost = false;
				 //
				 tsmibtnTopMost->Checked = false;
			 }
			 else
			 {
				 //取消置顶
				 this->TopMost = true;
				 //
				 tsmibtnTopMost->Checked = true;
			 }
		 }

		 //禁止加载驱动
private: System::Void tsmibtnDriverDisableLoad_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnDriverDisableLoad->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_SYSMODULE_DISABLELOADDRIVER_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止驱动加载失败！");
					 return;
				 }				 

				 //
				 tsmibtnDriverDisableLoad->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_SYSMODULE_DISABLELOADDRIVER, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止驱动加载失败！");
					 return;
				 }

				 //
				 tsmibtnDriverDisableLoad->Checked = true;
			 }
		 }

		 //全局 禁止进程创建
private: System::Void tsmibtnProcessDisableCreate_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnProcessDisableCreate->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLECREATE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止进程创建失败！");
					 return;
				 }				 

				 //
				 tsmibtnProcessDisableCreate->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLECREATE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止进程创建失败！");
					 return;
				 }

				 //
				 tsmibtnProcessDisableCreate->Checked = true;
			 }
		 }

		 //全局 禁止结束进程
private: System::Void tsmibtnProcessDisableKill_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnProcessDisableKill->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLETERMINATE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止进程结束失败！");
					 return;
				 }				 

				 //
				 tsmibtnProcessDisableKill->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLETERMINATE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止进程结束失败！");
					 return;
				 }

				 //
				 tsmibtnProcessDisableKill->Checked = true;
			 }
		 }

		 //全局 禁止进程创建线程
private: System::Void tsmibtnProcessDisableCreateThread_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnProcessDisableCreateThread->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_THREAD_DISABLECREATE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止线程创建失败！");
					 return;
				 }				 

				 //
				 tsmibtnProcessDisableCreateThread->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_THREAD_DISABLECREATE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止线程创建失败！");
					 return;
				 }

				 //
				 tsmibtnProcessDisableCreateThread->Checked = true;
			 }
		 }

		 //全局 禁止结束线程
private: System::Void tsmibtnProcessDisableKillThread_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnProcessDisableKillThread->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_THREAD_DISABLETERMINATE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止线程结束失败！");
					 return;
				 }				 

				 //
				 tsmibtnProcessDisableKillThread->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_THREAD_DISABLETERMINATE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止线程结束失败！");
					 return;
				 }

				 //
				 tsmibtnProcessDisableKillThread->Checked = true;
			 }
		 }

		 //全局 禁止文件创建
private: System::Void tsmibtnFileDisableCreate_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnFileDisableCreate->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLECREATE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止文件创建失败！");
					 return;
				 }				 

				 //
				 tsmibtnFileDisableCreate->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLECREATE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止文件创建失败！");
					 return;
				 }

				 //
				 tsmibtnFileDisableCreate->Checked = true;
			 }
		 }

		 //全局 禁止文件删除
private: System::Void tsmibtnFileDisableDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnFileDisableDelete->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEDELETE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止文件删除失败！");
					 return;
				 }				 

				 //
				 tsmibtnFileDisableDelete->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEDELETE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止文件删除失败！");
					 return;
				 }

				 //
				 tsmibtnFileDisableDelete->Checked = true;
			 }
		 }

		 //全局 禁止文件读写
private: System::Void tsmibtnFileDisableOpenRead_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnFileDisableOpenRead->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEOPEN_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止文件读写失败！");
					 return;
				 }				 

				 //
				 tsmibtnFileDisableOpenRead->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEOPEN, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止文件读写失败！");
					 return;
				 }

				 //
				 tsmibtnFileDisableOpenRead->Checked = true;
			 }
		 }

		 //全局 禁止注册表创建
private: System::Void tsmibtnRegDisableCreate_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnRegDisableCreate->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLECREATE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止注册表创建失败！");
					 return;
				 }				 

				 //
				 tsmibtnRegDisableCreate->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLECREATE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止注册表创建失败！");
					 return;
				 }

				 //
				 tsmibtnRegDisableCreate->Checked = true;
			 }
		 }

		 //全局 禁止注册表删除
private: System::Void tsmibtnRegDisableDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnRegDisableDelete->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEDELETE_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止注册表删除失败！");
					 return;
				 }				 

				 //
				 tsmibtnRegDisableDelete->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEDELETE, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止注册表删除失败！");
					 return;
				 }

				 //
				 tsmibtnRegDisableDelete->Checked = true;
			 }
		 }

		 //禁止 注册表查询
private: System::Void tsmibtnRegDisableOpenRead_Click(System::Object^  sender, System::EventArgs^  e) {
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet=0;

			 if (tsmibtnRegDisableOpenRead->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEQUERY_STOP, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止注册表查询失败！");
					 return;
				 }				 

				 //
				 tsmibtnRegDisableOpenRead->Checked = false;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEQUERY, NULL, 0, NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止注册表查询失败！");
					 return;
				 }

				 //
				 tsmibtnRegDisableOpenRead->Checked = true;
			 }
		 }

		 //关于
private: System::Void tsmibtnAbout_Click(System::Object^  sender, System::EventArgs^  e) {
			 AboutForm^ aboutForm = gcnew AboutForm();
			 aboutForm->ShowDialog();
		 }

		 //报告bug
private: System::Void tsmibtnReportBug_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 Process::Start("http://www.badteen.net");
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }
		 }

		 //联系作者
private: System::Void tsmibtnContact_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 Process::Start("mailto:badteen@sina.com");
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }
		 }

		 //检测更新
private: System::Void tsmibtnUpdate_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 Process::Start("http://www.badteen.net");
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }
		 }

		 //我博客
private: System::Void tsmibtnBlog_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 Process::Start("http://www.badteen.net");
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }
		 }

		 //菜单栏的显现和隐藏
private: System::Void lblMenu_Click(System::Object^  sender, System::EventArgs^  e) {
			 tsmibtnMenu_Click(sender,e);
		 }

		 //取消校验全部数字签名
private: System::Void lbl_quit_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (thread_sigverif!=nullptr && thread_sigverif->IsAlive)
			 {
				 //终止线程运行
				 thread_sigverif->Abort();
				 tc_main->Enabled = true;
				 tsp_lbl_msg->Text = nullptr;
				 lbl_quit->Visible = false;
			 }
		 }
#pragma endregion menu

	   //进程
#pragma region tp_process
		 //跳到窗体管理
		 static int tp_process_int_currentPID = -1;
		 static bool tp_process_bl_toWin = false;

		 //
private: System::Void lv_process_show()
		 {
			 try
			 {
				 array<Process^>^ ps = Process::GetProcesses(Environment::MachineName);
				 for each (Process^ p in ps)
				 {
					 ListViewItem^ item = gcnew ListViewItem(common_net::common_getProcessName(p->Id));
					 try
					 {
						 String^ str_path = common_net::common_getProcessPath(p->Id)->Replace("\\??\\","");
						 //tag标志
						 item->Tag = p->Id;

						 if (p->Id!=0 && p->Id!=4)
						 {
							 item->SubItems->AddRange(gcnew array<String^>{ p->Id.ToString(),process_getProcessParentPID(p->Id).ToString(),str_path, 
								 common_net::common_getFileCompanyName(str_path),p->MainWindowTitle});

							 //在这里判断文件厂商
							 if (!common_net::common_getFileCompanyName(str_path)->Contains("Microsoft Cor"))
							 {
								 item->ForeColor=Color::Blue;
							 }
						 }
						 else
						 {
							 item->SubItems->AddRange(gcnew array<String^>{ p->Id.ToString(),"-",str_path});
						 }

						 lv_process->Items->Add(item);					 
					 }
					 catch(Exception^ ex){ }
				 }
			 }
			 catch(Exception^ ex){}
		 }

		 //
private: System::Void lv_process_do(ULONG ulType,ULONG ulIOCTLCode,ToolStripMenuItem^ tsmi_,String^ str_)
		 {
			 check_hdriver(hDriver);

			 ULONG ulRet;
			 DWORD dwRet=0;
			 BOOL bRet = FALSE;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 bRet = DeviceIoControl(hDriver, ulIOCTLCode, &ulPID, sizeof(ULONG), &ulRet, sizeof(ULONG), &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show(str_);
				 return;
			 }
			 else
			 {
				 if (ulRet==1)
				 {
					 tsmi_->Checked = true;
				 }
				 else
				 {
					 tsmi_->Checked = false;
				 }
			 }
		 }

		 //控制右键菜单的显示
private: System::Void lv_process_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_process->Items->Count == 0)
			 {
				 cms_process_module->Enabled=false;
				 cms_process_thread->Enabled=false;
				 cms_process_handle->Enabled = false;
				 cms_process_win->Enabled = false;
				 cms_process_kill->Enabled=false;
				 cms_process_forceKill->Enabled=false;
				 cms_process_killAndDelete->Enabled=false;
				 cms_process_sigverif->Enabled=false;
				 cms_process_sigverifAll->Enabled = false;
				 cms_process_hide->Enabled = false;
				 cms_process_lock->Enabled=false;
				 cms_process_unlock->Enabled=false;
				 cms_process_onlineFind->Enabled=false;
				 cms_process_inject->Enabled=false;
				 cms_process_copy->Enabled=false;
				 cms_process_explorer->Enabled=false;
				 cms_process_explorer2->Enabled=false;
				 cms_process_showProperty->Enabled=false;
			 }
			 else if (lv_process->SelectedItems->Count==0)
			 {
				 cms_process_module->Enabled=false;
				 cms_process_thread->Enabled=false;
				 cms_process_handle->Enabled = false;
				 cms_process_win->Enabled = false;
				 cms_process_kill->Enabled=false;
				 cms_process_forceKill->Enabled=false;
				 cms_process_killAndDelete->Enabled=false;
				 cms_process_sigverif->Enabled=false;
				 cms_process_sigverifAll->Enabled = true;
				 cms_process_hide->Enabled = false;
				 cms_process_lock->Enabled=false;
				 cms_process_unlock->Enabled=false;
				 cms_process_onlineFind->Enabled=false;
				 cms_process_inject->Enabled=false;
				 cms_process_copy->Enabled=false;
				 cms_process_explorer->Enabled=false;
				 cms_process_explorer2->Enabled=false;
				 cms_process_showProperty->Enabled=false;
			 }
			 else
			 {
				 //这里处理
				 if (cms_process_showModuleForm->Checked)
				 {
					 cms_module_refresh_Click(sender,e);
				 }
				 cms_process_module->Enabled=true;
				 cms_process_thread->Enabled=true;
				 cms_process_handle->Enabled = true;
				 cms_process_win->Enabled = true;
				 cms_process_kill->Enabled=true;
				 cms_process_forceKill->Enabled=true;
				 cms_process_killAndDelete->Enabled=true;
				 cms_process_sigverif->Enabled=true;

				 if (lv_process->SelectedItems[0]->ForeColor == Color::Red)
				 {
					 cms_process_hide->Enabled = false;
				 }
				 else
				 {
					 cms_process_hide->Enabled = true;
				 }

				 //判断进程状态
				 switch (process_getProcessState((int)lv_process->SelectedItems[0]->Tag))
				 {
				 case 0:
				 	break;
					 //处于挂起状态
				 case 1:
					 {
						 cms_process_lock->Enabled=false;
						 cms_process_unlock->Enabled=true;
					 }
					 break;
					 //没有挂起
				 case 2:
					 {
						 cms_process_lock->Enabled=true;
						 cms_process_unlock->Enabled=false;
					 }
					 break;
				 }

				 cms_process_onlineFind->Enabled=true;
				 cms_process_inject->Enabled=true;
				 cms_process_copy->Enabled=true;
				 cms_process_explorer->Enabled=true;
				 cms_process_explorer2->Enabled=true;
				 cms_process_showProperty->Enabled=true;
				 
				 //在这里处理“操作”菜单的子菜单的子菜单
				 lv_process_do(0,IOCTL_MONITOR2_PROCESS_DISABLECREATE2_FINDPID,cms_process_do_process_disableCreate,"禁止创建进程，查询链表失败！");
				 lv_process_do(0,IOCTL_MONITOR2_PROCESS_DISABLETERMINATE2_FINDPID,cms_process_do_process_disableDelete,"禁止进程结束，查询链表失败！");
				 
				 lv_process_do(1,IOCTL_MONITOR2_FILE_DISABLECREATE2_FINDPID,cms_process_do_file_disableCreate,"禁止文件创建，查询链表失败！");
				 lv_process_do(1,IOCTL_MONITOR2_FILE_DISABLEDELETE2_FINDPID,cms_process_do_file_disableDelete,"禁止文件删除，查询链表失败！");
				 lv_process_do(1,IOCTL_MONITOR2_FILE_DISABLEOPEN2_FINDPID,cms_process_do_file_disableRead,"禁止文件读写，查询链表失败！");

				 lv_process_do(2,IOCTL_MONITOR2_REG_DISABLECREATE2_FINDPID,cms_process_do_reg_disableCreate,"禁止注册表创建，查询链表失败！");
				 lv_process_do(2,IOCTL_MONITOR2_REG_DISABLEDELETE2_FINDPID,cms_process_do_reg_disableDelete,"禁止注册表删除，查询链表失败！");
				 lv_process_do(2,IOCTL_MONITOR2_REG_DISABLEQUERY2_FINDPID,cms_process_do_reg_disableQuery,"禁止注册表查询，查询链表失败！");
			 }
		 }

		 //排序
private: System::Void lv_process_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 1 || e->Column == 2)
				 {
					 //数子排序
					 lv_process->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_process->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 1 || e->Column == 2)
				 {
					 //数字排序
					 lv_process->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_process->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_process_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_process->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_process);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新 
private: System::Void cms_process_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_process->Items->Clear();
			 lv_process_show();
		 }

		 //查看进程模块
private: System::Void cms_process_module_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_process->SelectedItems[0];
			 ProcessModuleForm^ processModuleForm = gcnew ProcessModuleForm((int)item_->Tag,item_->SubItems[0]->Text,hDriver,lv_process);
			 processModuleForm->ShowDialog();
		 }

		 //查看进程线程
private: System::Void cms_process_thread_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_process->SelectedItems[0];
			 ProcessThreadForm^ processThreadForm = gcnew ProcessThreadForm((int)item_->Tag,item_->SubItems[0]->Text,hDriver);
			 processThreadForm->ShowDialog();
		 }

		 //查看进程句柄
private: System::Void cms_process_handle_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_process->SelectedItems[0];
			 ProcessHandleInfoForm^ processHandleInfoForm = gcnew ProcessHandleInfoForm(hDriver,int::Parse(item_->SubItems[1]->Text),item_->SubItems[0]->Text);
			 processHandleInfoForm->ShowDialog();
		 }

		 //查看进程窗口
private: System::Void cms_process_win_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_process->SelectedItems[0];

			 //
			 tp_process_int_currentPID = (int)item_->Tag;
			 tp_process_bl_toWin = true;

			 tc_main->SelectedIndex = 9;

			 //重新赋值
			 tp_process_bl_toWin = false;
		 }

		 //在下方显示进程模块窗体
private: System::Void cms_process_showModuleForm_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (cms_process_showModuleForm->Checked)
			 {
				 cms_process_showModuleForm->Checked = false;
				 //保存信息到配置文件
				 common_net::config_writePrivateProfileString("main","lv_module_visible","false",Application::StartupPath+"\\Deianeira.config");

				 splitContainer6->Panel2MinSize = 0;
				 lv_module->Visible = false;
				 splitContainer6->SplitterDistance = splitContainer6->Height;

				 tsp_lbl_msg->Text = nullptr;
			 }
			 else
			 {
				 cms_process_showModuleForm->Checked = true;
				 //保存信息到配置文件
				 common_net::config_writePrivateProfileString("main","lv_module_visible","true",Application::StartupPath+"\\Deianeira.config");

				 String^ str_lv_module_height = common_net::config_getPrivateProfileString("main","lv_module_height",Application::StartupPath+"\\Deianeira.config");
				 splitContainer6->SplitterDistance = splitContainer6->Height - int::Parse(str_lv_module_height);
				 lv_module->Height = splitContainer6->Panel2->Height;
				 lv_module->Visible = true;
			 }
		 }

		 //在进程中查找模块
private: System::Void cms_process_findModule_Click(System::Object^  sender, System::EventArgs^  e) {
			 ProcessFindModuleForm^ processFindModuleForm = gcnew ProcessFindModuleForm(hDriver);
			 processFindModuleForm->ShowDialog();
		 }

		 //在进程中查找没有数字签名模块
private: System::Void cms_process_findSigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 ProcessSigverifForm^ processFindModuleForm = gcnew ProcessSigverifForm();
			 processFindModuleForm->ShowDialog();
		 }

		 //禁止目标进程创建子进程
private: System::Void cms_process_do_process_disableCreate_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_process_disableCreate->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLECREATE2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止进程创建失败！");
					 return;
				 }

				 cms_process_do_process_disableCreate->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLECREATE2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止进程创建失败！");
					 return;
				 }

				 cms_process_do_process_disableCreate->Checked = false;
			 }
		 }

		 //禁止目标进程被结束掉
private: System::Void cms_process_do_process_disableDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_process_disableDelete->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLETERMINATE2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止进程创建失败！");
					 return;
				 }

				 cms_process_do_process_disableDelete->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_PROCESS_DISABLETERMINATE2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止进程创建失败！");
					 return;
				 }
				 cms_process_do_process_disableDelete->Checked = false;
			 }
		 }

		 //禁止目标进程创建文件
private: System::Void cms_process_do_file_disableCreate_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_file_disableCreate->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLECREATE2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止文件创建失败！");
					 return;
				 }

				 cms_process_do_file_disableCreate->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLECREATE2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止文件创建失败！");
					 return;
				 }
				 cms_process_do_file_disableCreate->Checked = false;
			 }
		 }

		 //禁止目标进程删除文件
private: System::Void cms_process_do_file_disableDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_file_disableDelete->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEDELETE2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止文件删除失败！");
					 return;
				 }

				 cms_process_do_file_disableDelete->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEDELETE2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止文件删除失败！");
					 return;
				 }

				 cms_process_do_file_disableDelete->Checked = false;
			 }
		 }

		 //禁止目标进程读写文件
private: System::Void cms_process_do_file_disableRead_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_file_disableRead->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEOPEN2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止文件读写失败！");
					 return;
				 }

				 cms_process_do_file_disableRead->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_FILE_DISABLEOPEN2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止文件读写失败！");
					 return;
				 }

				 cms_process_do_file_disableRead->Checked = false;
			 }
		 }

		 //禁止目标进程创建注册表项(值)
private: System::Void cms_process_do_reg_disableCreate_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_reg_disableCreate->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLECREATE2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止注册表创建失败！");
					 return;
				 }

				 cms_process_do_reg_disableCreate->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLECREATE2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止注册表创建失败！");
					 return;
				 }

				 cms_process_do_reg_disableCreate->Checked = false;
			 }
		 }

		 //禁止目标进程删除注册表项(值)
private: System::Void cms_process_do_reg_disableDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_reg_disableDelete->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEDELETE2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止注册表删除失败！");
					 return;
				 }

				 cms_process_do_reg_disableDelete->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEDELETE2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止注册表删除失败！");
					 return;
				 }

				 cms_process_do_reg_disableDelete->Checked = false;
			 }
		 }

		 //禁止注册表查询
private: System::Void cms_process_do_reg_disableQuery_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;

			 if (!cms_process_do_reg_disableQuery->Checked)
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEQUERY2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("禁止注册表查询失败！");
					 return;
				 }

				 cms_process_do_reg_disableQuery->Checked = true;
			 }
			 else
			 {
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR2_REG_DISABLEQUERY2_DELETEPID, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
				 if (!bRet)
				 {
					 MessageBox::Show("停止禁止注册表查询失败！");
					 return;
				 }

				 cms_process_do_reg_disableQuery->Checked = false;
			 }
		 }

		 //结束进程
private: System::Void cms_process_kill_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 ListViewItem^ item_ = lv_process->SelectedItems[0];
				 Process^ p =Process::GetProcessById((int)item_->Tag);
				 p->Kill();

				 //刷新列表
				 item_->Remove();
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }
		 }

		 //强制结束进程
private: System::Void cms_process_forceKill_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 ListViewItem^ item_ = lv_process->SelectedItems[0];
			 //得到本地进程ID
			 ULONG ulPID = (int)item_->Tag;
			 bRet = DeviceIoControl(hDriver, IOCTL_PROCESS_KILL2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("强制结束进程失败！");
				 return;
			 }

			 //刷新列表
			 item_->Remove();
		 }

		 //暴力结束
private: System::Void cms_process_forceKill2_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 ListViewItem^ item_ = lv_process->SelectedItems[0];
			 //得到本地进程ID
			 ULONG ulPID = (int)item_->Tag;
			 bRet = DeviceIoControl(hDriver, IOCTL_PROCESS_KILL, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("暴力结束进程失败！");
				 return;
			 }

			 //刷新列表
			 item_->Remove();
		 }

		 //强制结束进程并删除文件
private: System::Void cms_process_killAndDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;
			 bRet = DeviceIoControl(hDriver, IOCTL_PROCESS_KILL2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("强制结束进程失败！");
				 return;
			 }

			 //删除文件
			 LPTSTR lpFilePath = common_net::common_stringToHGlobalUni("\\??\\" + lv_process->SelectedItems[0]->SubItems[3]->Text);

			 bRet = DeviceIoControl(hDriver, IOCTL_FILE_DELETE, lpFilePath, wcslen(lpFilePath)*sizeof(WCHAR), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("删除文件失败！");
				 return;
			 }

			 //刷新列表
			 cms_process_refresh_Click(sender,e);
		 }

		 //校验数字签名
private: System::Void cms_process_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(lv_process->SelectedItems[0]->SubItems[3]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_process_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_process->Items)
			 {
				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[3]->Text + "]";
				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(item->SubItems[3]->Text)))
				 {
					 lst_item_red->Add(item);
				 }
				 else
				 if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_process->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_process->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_process->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_process->Items[index] = item_;
				 index++;
			 }
			 lv_process->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }

		 //校验所有数字签名
private: System::Void cms_process_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {;
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif= gcnew Thread(gcnew ThreadStart(this,&Form1::thread_process_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //隐藏
private: System::Void cms_process_hide_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_process->SelectedItems[0]->Tag;
			 bRet = DeviceIoControl(hDriver, IOCTL_PROCESS_HIDE, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("进程隐藏失败！");
				 return;
			 }

			 //刷新列表
			 cms_process_refresh_Click(sender,e);
		 }

		 //挂起进程
private: System::Void cms_process_lock_Click(System::Object^  sender, System::EventArgs^  e) {
			 process_suspendProcess((int)lv_process->SelectedItems[0]->Tag);
		 }

		 //恢复进程
private: System::Void cms_process_unlock_Click(System::Object^  sender, System::EventArgs^  e) {
			 process_resumeProcess((int)lv_process->SelectedItems[0]->Tag);
		 }

		 //在线搜索进程名
private: System::Void cms_process_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineFind(lv_process->SelectedItems[0]->SubItems[0]->Text);
		 }

		 //在线分析
private: System::Void cms_process_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

		 //注入DLL
private: System::Void cms_process_inject_Click(System::Object^  sender, System::EventArgs^  e) {
			 ProcessInjectDllForm^ processInjectDllForm = gcnew ProcessInjectDllForm((int)lv_process->SelectedItems[0]->Tag,
				 lv_process->SelectedItems[0]->SubItems[0]->Text);
			 processInjectDllForm->ShowDialog();
		 }

		 //DLL消息钩子注入1
private: System::Void cms_process_injectByHookMsg1_Click(System::Object^  sender, System::EventArgs^  e) {
			 ProcessInjectDllByHookMsg1Form^ processInjectDllByHookMsg1Form = gcnew ProcessInjectDllByHookMsg1Form();
			 processInjectDllByHookMsg1Form->ShowDialog();
		 }

		 //DLL消息钩子注入2
private: System::Void cms_process_injectByHookMsg2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ProcessInjectDllByHookMsg2Form^ processInjectDllByHookMsg2Form = gcnew ProcessInjectDllByHookMsg2Form();
			 processInjectDllByHookMsg2Form->ShowDialog();
		 }

		 //复制进程路径
private: System::Void cms_process_copy_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制到剪切板
			 Clipboard::SetDataObject(lv_process->SelectedItems[0]->SubItems[3]->Text, true);
		 }

		 //定位进程文件
private: System::Void cms_process_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_process->SelectedItems[0]->SubItems[3]->Text));
		 }

		 ////定位进程文件2
private: System::Void cms_process_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_process->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[3]->Text);
		 }

		 //查看进程文件属性
private: System::Void cms_process_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_process->SelectedItems[0]->SubItems[3]->Text));
		 }

		 //导出
private: System::Void cms_process_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_process);
		 }
#pragma endregion tp_process

	   //模块
#pragma region tp_module
private: System::Void lv_module_show()
		 {
			 try
			 {
				 ULONG ulTotalCount =0;
				 ULONG ulBlueCount=0;

				 Process^ p = Process::GetProcessById((int)lv_process->SelectedItems[0]->Tag);
				 ProcessModuleCollection^ pmc_ = p->Modules;

				 for each(ProcessModule^ pm_ in pmc_)
				 {
					 try
					 {
						 ListViewItem^ item_ = gcnew ListViewItem(pm_->FileName);

						 if (File::Exists(pm_->FileName))
						 {
							 item_->SubItems->AddRange(gcnew array<String^>{"0x" + pm_->BaseAddress.ToString("X8"),"0x" + pm_->ModuleMemorySize.ToString("X8"),
								 pm_->FileVersionInfo->CompanyName});

							 //在这里判断文件厂商
							 if (!pm_->FileVersionInfo->CompanyName->Contains("Microsoft Cor"))
							 {
								 item_->ForeColor=Color::Blue;
								 ulBlueCount++;
							 }
						 }
						 else
						 {
							 item_->SubItems->AddRange(gcnew array<String^>{"0x" + pm_->BaseAddress.ToString("X8"),"0x" + pm_->ModuleMemorySize.ToString("X8"),
								 "文件不存在！"});
							 item_->ForeColor=Color::Blue;
							 ulBlueCount++;
						 }

						 if (!cms_module_all->Checked)
						 {
							 if (item_->ForeColor == Color::Blue)
							 {
								 lv_module->Items->Add(item_);
							 }			 
						 }
						 else
						 {
							 lv_module->Items->Add(item_);
						 }

						 ulTotalCount++;
					 }
					 catch(Exception^ ex){ }
				 }	 

				 //记录信息
				 tsp_lbl_msg->Text = "--->>>[" + lv_process->SelectedItems[0]->SubItems[0]->Text +"]模块数：" + ulBlueCount.ToString() + "/" + ulTotalCount.ToString();
			 }
			 catch(Exception^ ex){  }
		 }

		 //控制右键菜单显示
private: System::Void lv_module_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_module->Items->Count ==0)
			 {
				 cms_module_unload->Enabled = false;
				 cms_module_unloadAll->Enabled = false;
				 cms_module_delete->Enabled = false;
				 cms_module_sigverif->Enabled = false;
				 cms_module_sigverifAll->Enabled = false;
				 cms_module_copyAddr->Enabled = false;
				 cms_module_explorer->Enabled = false;
				 cms_module_showProperty->Enabled = false;
			 }
			 else if (lv_module->SelectedItems->Count ==0)
			 {
				 cms_module_unload->Enabled = false;
				 cms_module_unloadAll->Enabled = false;
				 cms_module_delete->Enabled = false;
				 cms_module_sigverif->Enabled = false;
				 cms_module_sigverifAll->Enabled = true;
				 cms_module_copyAddr->Enabled = false;
				 cms_module_explorer->Enabled = false;
				 cms_module_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_module_unload->Enabled = true;
				 cms_module_unloadAll->Enabled = true;
				 cms_module_delete->Enabled = true;
				 cms_module_sigverif->Enabled = true;
				 cms_module_sigverifAll->Enabled = true;
				 cms_module_copyAddr->Enabled = true;
				 cms_module_explorer->Enabled = true;
				 cms_module_showProperty->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_module_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 2 || e->Column == 3)
				 {
					 //数子排序
					 lv_module->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_module->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 2 || e->Column == 3)
				 {
					 //数字排序
					 lv_module->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_module->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_module_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_module->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_module);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //大小改变
private: System::Void lv_module_Resize(System::Object^  sender, System::EventArgs^  e) {
			 //保存信息到配置文件
			 common_net::config_writePrivateProfileString("main","lv_module_height",lv_module->Height.ToString(),Application::StartupPath+"\\Deianeira.config");
		 }

		 //刷新
private: System::Void cms_module_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_module->Items->Clear();
			 lv_module_show();
		 }

		 //显示全部
private: System::Void cms_module_all_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (cms_module_all->Checked)
			 {
				 cms_module_all->Checked = false;
			 }
			 else
			 {
				 cms_module_all->Checked = true;
			 }

			 //刷新
			 cms_module_refresh_Click(sender,e);
		 }

		 //卸载单一
private: System::Void cms_module_unload_Click(System::Object^  sender, System::EventArgs^  e) {
			 UNLOADDLL_CLIENT_ID clientID;
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 ListViewItem^ item_ = lv_module->SelectedItems[0];

			 clientID.ulPID = (int)lv_process->SelectedItems[0]->Tag;
			 clientID.ulBaseAddress = Convert::ToUInt32(item_->SubItems[1]->Text->Replace("0x",""),16);

			 bRet = DeviceIoControl(hDriver, IOCTL_PROCESS_MODULE_UNLOAD, &clientID, sizeof(UNLOADDLL_CLIENT_ID), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("卸载失败！");
				 return;
			 }

			 //刷新列表
			 item_->Remove();
		 }

		 //卸载全部
private: System::Void cms_module_unloadAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 DWORD dwRet=0;
			 try
			 {
				 ListViewItem^ item_ = lv_module->SelectedItems[0];

				 for each(ListViewItem^ item_1 in lv_process->Items)
				 {
					 try
					 {
						 int pid = int::Parse(item_1->SubItems[1]->Text);

						 //判定是否是自己的进程ID
						 if (pid == Process::GetCurrentProcess()->Id)
						 {
							 //如果是，跳出继续
							 continue;
						 }

						 Process^ p = Process::GetProcessById(pid);
						 ProcessModuleCollection^ pmc_ = p->Modules;

						 for each(ProcessModule^ pm_ in pmc_)
						 {
							 try
							 {
								 if (item_->SubItems[1]->Text == "0x" + pm_->BaseAddress.ToString("X8"))
								 {
									 UNLOADDLL_CLIENT_ID clientID;

									 clientID.ulPID = pid;
									 clientID.ulBaseAddress = (ULONG)(int)pm_->BaseAddress;

									 DeviceIoControl(hDriver, IOCTL_PROCESS_MODULE_UNLOAD, &clientID, sizeof(UNLOADDLL_CLIENT_ID), NULL, 0, &dwRet, NULL);

									 break;
								 }
							 }
							 catch(Exception^ ex){ }
						 }
					 }
					 catch(Exception^ ex){ }		 
				 }	 
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }
		 }

		 //删除文件
private: System::Void cms_module_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 ListViewItem^ item_ = lv_module->SelectedItems[0];
			 LPTSTR lpFilePath = common_net::common_stringToHGlobalUni("\\??\\" + item_->SubItems[0]->Text);

			 bRet = DeviceIoControl(hDriver, IOCTL_FILE_DELETE, lpFilePath, wcslen(lpFilePath)*sizeof(WCHAR), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("删除失败！");
				 return;
			 }
		 }

		 //验证单一
private: System::Void cms_module_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_module->SelectedItems[0];
			 if (sigverif_check(common_net::common_stringToHGlobalUni(item_->SubItems[0]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

		 //
private: System::Void thread_lv_module_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_module->Items)
			 {
				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[0]->Text + "]";
				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(item->SubItems[0]->Text)))
				 {
					 lst_item_red->Add(item);
				 }
				 else
					 if(item->ForeColor==Color::Blue)
					 {
						 lst_item_blue->Add(item);
					 }
					 else
					 {
						 lst_item_default->Add(item);			
					 }
			 }

			 lv_module->BeginUpdate();
			 int index=0;

			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_module->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_module->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_module->Items[index] = item_;
				 index++;
			 }

			 lv_module->EndUpdate();

			 tsp_lbl_msg->Text = nullptr;

			 tc_main->Enabled = true;
			 lbl_quit->Visible = false;
		 }

		 //验证全部
private: System::Void cms_module_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 tc_main->Enabled = false;
			 lbl_quit->Visible = true;

			 //开启线程验证
			 thread_sigverif= gcnew Thread(gcnew ThreadStart(this,&Form1::thread_lv_module_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //复制
private: System::Void cms_module_copyAddr_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_module->SelectedItems[0];
			 //复制到剪切板
			 Clipboard::SetDataObject(item_->SubItems[0]->Text, true);
		 }

		 //定位
private: System::Void cms_module_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_module->SelectedItems[0];
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[0]->Text));
		 }

		 //属性
private: System::Void cms_module_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_module->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[0]->Text));
		 }

		 //导出
private: System::Void cms_module_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_module);
		 }
#pragma endregion tp_module

	   //服务
#pragma region tp_service
		 //打印出服务相关信息 
private: System::Void lv_service_show() 
		 { 
			 try 
			 { 
				 //检索本地计算机上的所有服务（设备驱动程序服务除外） 
				 array<ServiceController^>^ scs = ServiceController::GetServices(); 
				 for each (ServiceController^ sc in scs) 
				 { 
					 try
					 {
						 //判断标志
						 bool isSvchost=false;
						 String^ str_path = String::Empty;
						 String^ str_dllName = String::Empty;
						 String^ str_compName = String::Empty;

						 ListViewItem^ item = gcnew ListViewItem(sc->ServiceName); 
						 //获得路径
						 str_path = common_net::common_getServiceInformain(sc->ServiceName,"PathName")->ToString();

						 //判断是不是svchost开启的服务
						 if (str_path->ToLower()->Contains("svchost"))
						 {
							 //如果是的话
							 isSvchost=true;
							 //得出dll的路径
							 str_dllName = common_net::common_getServiceDllName(sc->ServiceName);
							 str_compName = common_net::common_getFileCompanyName(str_dllName);
						 }			 	 
						 else
						 {
							 str_compName = common_net::common_getFileCompanyName(common_net::common_formatString(str_path));
						 }

						 if (isSvchost)
						 {
							 item->SubItems->AddRange(gcnew array<String^>{sc->Status.ToString(),common_net::common_getServiceInformain(sc->ServiceName,"StartMode")->ToString(), 
								 str_path,common_net::common_getFileCompanyName(common_net::common_formatString(str_path)),str_dllName,str_compName}); 
						 }
						 else
						 {
							 item->SubItems->AddRange(gcnew array<String^>{sc->Status.ToString(),common_net::common_getServiceInformain(sc->ServiceName,"StartMode")->ToString(), 
								 str_path,common_net::common_getFileCompanyName(common_net::common_formatString(str_path)),"",""}); 
						 }

						 lv_service->Items->Add(item);

						 //设置tag标括 
						 item->Tag = sc; 

						 //在这里判断文件厂商
						 if (!str_compName->Contains("Microsoft Cor"))
						 {
							 item->ForeColor=Color::Blue;
						 }
					 }
					 catch(Exception^ ex){} 
				 } 
			 } 
			 catch (Exception^ ex) { } 
		 }

         //控制右键菜单的显示
private: System::Void lv_service_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_service->SelectedItems->Count==0)
			 {
				 cms_service_do->Enabled=false;
				 cms_service_config->Enabled=false;
				 cms_service_sigverif->Enabled=false;
				 cms_service_sigverifDll->Enabled=false;
				 cms_service_onlineFind->Enabled=false;
				 cms_service_explorer->Enabled=false;
				 cms_service_explorer2->Enabled=false;
				 cms_service_showProperty->Enabled=false;
				 cms_service_explorerDll->Enabled=false;
				 cms_service_explorerDll2->Enabled=false;
				 cms_service_showPropertyDll->Enabled=false;
				 cms_service_reg->Enabled=false;
			 }
			 else
			 {
				 cms_service_do->Enabled=true;
				 cms_service_config->Enabled=true;
				 cms_service_sigverif->Enabled=true;
				 cms_service_sigverifDll->Enabled=true;
				 cms_service_onlineFind->Enabled=true;
				 cms_service_explorer->Enabled=true;
				 cms_service_explorer2->Enabled=true;
				 cms_service_showProperty->Enabled=true;
				 cms_service_explorerDll->Enabled=true;
				 cms_service_explorerDll2->Enabled=true;
				 cms_service_showPropertyDll->Enabled=true;
				 cms_service_reg->Enabled=true;

				 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;

				 if (sc_->Status == ServiceControllerStatus::Running)
				 {
					 cms_service_do_start->Enabled=false;
					 cms_service_do_stop->Enabled=true;

					 if (sc_->CanPauseAndContinue)
					 {
						 cms_service_do_pause->Enabled=true;
					 }
					 else
					 {
						 cms_service_do_pause->Enabled=false;
					 }

					 cms_service_do_resume->Enabled=false;
				 }
				 else if (sc_->Status == ServiceControllerStatus::Stopped)
				 {
					 cms_service_do_start->Enabled=true;
					 cms_service_do_stop->Enabled=false;
					 cms_service_do_pause->Enabled=false;
					 cms_service_do_resume->Enabled=false;
				 }
				 else if(sc_->Status == ServiceControllerStatus::Paused)
				 {
					 cms_service_do_start->Enabled=false;
					 cms_service_do_stop->Enabled=true;
					 cms_service_do_pause->Enabled=false;
					 cms_service_do_resume->Enabled=true;
				 }

				 //配置启动类型按钮
				 if (common_net::common_getServiceInformain(sc_->ServiceName,"StartMode")->ToString()=="Auto")
				 {
					 cms_service_config_auto->Enabled=false;
					 cms_service_config_manual->Enabled=true;
					 cms_service_config_disabled->Enabled=true;
				 }
				 else if (common_net::common_getServiceInformain(sc_->ServiceName,"StartMode")->ToString()=="Manual")
				 {
					 cms_service_config_auto->Enabled=true;
					 cms_service_config_manual->Enabled=false;
					 cms_service_config_disabled->Enabled=true;
				 }
				 else
				 {
					 cms_service_config_auto->Enabled=true;
					 cms_service_config_manual->Enabled=true;
					 cms_service_config_disabled->Enabled=false;
				 }
			 }
		 }

private: System::Void lv_service_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_service->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_service->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_service_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_service->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_service);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //双击事件
private: System::Void lv_service_MouseDoubleClick(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 ServiceForm^ serviceForm = gcnew ServiceForm(lv_service->SelectedItems[0]);
			 serviceForm->ShowDialog();
		 }

		 //刷新
private: System::Void cms_service_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_service->Items->Clear();
			 lv_service_show();
		 }

		 //开始
private: System::Void cms_service_do_start_Click(System::Object^  sender, System::EventArgs^  e) {
			 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			 //
			 try
			 {
				 sc_->Start();
				 sc_->WaitForStatus(ServiceControllerStatus::Running);

				 //修改信息
				 lv_service->SelectedItems[0]->SubItems[1]->Text = sc_->Status.ToString();
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message);}
		 }

		 //停止
private: System::Void cms_service_do_stop_Click(System::Object^  sender, System::EventArgs^  e) {
			 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			 //
			 try
			 {
				 sc_->Stop();
				 sc_->WaitForStatus(ServiceControllerStatus::Stopped);

				 //修改信息
				 lv_service->SelectedItems[0]->SubItems[1]->Text = sc_->Status.ToString();
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message);}
		 }

		 //暂停
private: System::Void cms_service_do_pause_Click(System::Object^  sender, System::EventArgs^  e) 
		 {
			 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			 //
			 try
			 {
				 sc_->Pause();
				 sc_->WaitForStatus(ServiceControllerStatus::Paused);

				 //修改信息
				 lv_service->SelectedItems[0]->SubItems[1]->Text = sc_->Status.ToString();
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message);}
		 }

		 //恢复
private: System::Void cms_service_do_resume_Click(System::Object^  sender, System::EventArgs^  e) {
			 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			 //
			 try
			 {
				 sc_->Continue();
				 sc_->WaitForStatus(ServiceControllerStatus::Running);

				 //修改信息
				 lv_service->SelectedItems[0]->SubItems[1]->Text = sc_->Status.ToString();
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message);}
		 }

		 //创建
private: System::Void cms_service_do_create_Click(System::Object^  sender, System::EventArgs^  e) {
			 ServiceCreateForm^ serviceCreateForm = gcnew ServiceCreateForm();
			 serviceCreateForm->ShowDialog();
		 }

		 //删除
private: System::Void cms_service_do_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			  ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			  //
			  if (common_delService(common_net::common_stringToHGlobalUni(sc_->ServiceName)))
			  {
				  lv_service->SelectedItems[0]->Remove();
			  }
			  else
			  {
				  MessageBox::Show("服务删除失败！");
			  }
		 }

		 //自动
private: System::Void cms_service_config_auto_Click(System::Object^  sender, System::EventArgs^  e) {
			 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			 if (!common_net::common_changeServiceStartMode(sc_->ServiceName,2))
			 {
				 MessageBox::Show("更改启动类型失败！");
			 }	 
			 //刷新单个
			 lv_service->SelectedItems[0]->SubItems[2]->Text = common_net::common_getServiceInformain(sc_->ServiceName,"StartMode")->ToString();
		 }

		 //手动
private: System::Void cms_service_config_manual_Click(System::Object^  sender, System::EventArgs^  e) {
			 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			 if (!common_net::common_changeServiceStartMode(sc_->ServiceName,3))
			 {
				 MessageBox::Show("更改启动类型失败！");
			 }	 
			 //刷新单个
			 lv_service->SelectedItems[0]->SubItems[2]->Text = common_net::common_getServiceInformain(sc_->ServiceName,"StartMode")->ToString();
		 }

		 //禁用
private: System::Void cms_service_config_disabled_Click(System::Object^  sender, System::EventArgs^  e) {
			 ServiceController^ sc_ = (ServiceController^)lv_service->SelectedItems[0]->Tag;
			 if (!common_net::common_changeServiceStartMode(sc_->ServiceName,4))
			 {
				 MessageBox::Show("更改启动类型失败！");
			 }	 
			 //刷新单个
			 lv_service->SelectedItems[0]->SubItems[2]->Text = common_net::common_getServiceInformain(sc_->ServiceName,"StartMode")->ToString();
		 }

		 //验证数字签名
private: System::Void cms_service_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_service->SelectedItems[0]->SubItems[3]->Text))))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

		 //验证动态链接库
private: System::Void cms_service_sigverifDll_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_service->SelectedItems[0]->SubItems[5]->Text))))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_service_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_service->Items)
			 {
				 String^ str_filePath = nullptr;
				 if (String::IsNullOrEmpty(item->SubItems[5]->Text))
				 {
					 //操作信息
					 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[3]->Text + "]";
					 str_filePath = item->SubItems[3]->Text;
				 }
				 else
				 {
					 //操作信息
					 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[5]->Text + "]";
					 str_filePath = item->SubItems[5]->Text;
				 }

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_service->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_service->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_service->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_service->Items[index] = item_;
				 index++;
			 }
			 lv_service->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }

		 //验证全部
private: System::Void cms_service_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_service_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //在线搜索服务名
private: System::Void cms_service_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineFind(lv_service->SelectedItems[0]->SubItems[0]->Text);
		 }

		 //在线分析
private: System::Void cms_service_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

		 //定位
private: System::Void cms_service_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(common_net::common_formatString(lv_service->SelectedItems[0]->SubItems[3]->Text)));
		 }

		 //
private: System::Void cms_service_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_service->SelectedItems[0];
			 lv_file_jmp(common_net::common_formatString(item_->SubItems[3]->Text));
		 }

		 //查看属性
private: System::Void cms_service_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_service->SelectedItems[0]->SubItems[3]->Text)));
		 }

		 //定位动态链接库
private: System::Void cms_service_explorerDll_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(common_net::common_formatString(lv_service->SelectedItems[0]->SubItems[5]->Text)));
		 }

		 //
private: System::Void cms_service_explorerDll2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_service->SelectedItems[0];
			 lv_file_jmp(common_net::common_formatString(item_->SubItems[5]->Text));
		 }

		 //查看动态链接库属性
private: System::Void cms_service_showPropertyDll_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_service->SelectedItems[0]->SubItems[5]->Text)));
		 }

		 //定位到注册表
private: System::Void cms_service_reg_Click(System::Object^  sender, System::EventArgs^  e) {
			 if(common_explorerReg(common_net::common_stringToHGlobalUni("HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\"+lv_service->SelectedItems[0]->Tag->ToString())))
			 {
				 Process::Start("regedit.exe");
			 }
		 }

		 //导出
private: System::Void cms_service_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_service);
		 }
#pragma endregion tp_service

       //事件日志
#pragma region tp_eventlog
private: System::Void lv_eventlog_show()
		 {
			 try
			 {
				 //获得所有类型的日志
				 array<EventLog^> ^els = EventLog::GetEventLogs();
				 //遍历
				 for each (EventLog^ el in els)
				 {
					 //不同类型
					 EventLogEntryCollection^ elec = el->Entries;
					 //再次遍历
					 for (int i = 0; i < elec->Count; i++)
					 {
						 ListViewItem^ item = gcnew ListViewItem(el->LogDisplayName);				 
						 item->SubItems->AddRange(gcnew array<String^>{elec[i]->EntryType.ToString(),
							 elec[i]->TimeWritten.ToString()->Split(' ')[0],
							 elec[i]->TimeWritten.ToString()->Split(' ')[1],
							 elec[i]->Source,elec[i]->Category,
							 elec[i]->EventID.ToString(),elec[i]->UserName,elec[i]->MachineName});
						 lv_eventlog->Items->Add(item);

						 //设置Tag标志
						 item->Tag = elec[i];

						 //为错误类型显示红色，为警告类型显示蓝色
						 if (elec[i]->EntryType.ToString()=="Error")
						 {
							 item->ForeColor = Color::Red;
						 }
						 if (elec[i]->EntryType.ToString()=="Warning")
						 {
							 item->ForeColor = Color::Blue;
						 }
					 }
				 }
			 }
			 catch (Exception^ ex){ }
		 }

		 //
private: System::Void lv_eventlog_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 2 || e->Column == 3)
				 {
					 //时间
					 lv_eventlog->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else if ( e->Column == 6)
				 {
					 //数字排序
					 lv_eventlog->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_eventlog->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 2 || e->Column == 3)
				 {
					 //时间
					 lv_eventlog->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else if ( e->Column == 6)
				 {
					 //数字排序
					 lv_eventlog->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_eventlog->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //双击事件
private: System::Void lv_eventlog_MouseDoubleClick(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_eventlog->SelectedItems->Count!=0)
			 {
				 EventlogForm^ eventlogForm = gcnew EventlogForm((EventLogEntry^)lv_eventlog->SelectedItems[0]->Tag);
				 eventlogForm->ShowDialog();
			 }
		 }

		 //拖放保存
private: System::Void lv_eventlog_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_eventlog->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_eventlog);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_eventlog_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_eventlog->Items->Clear();
			 lv_eventlog_show();
		 }

		 //清除系统日志
private: System::Void cms_eventlog_clearSys_Click(System::Object^  sender, System::EventArgs^  e) {
			 EventLog^ el = gcnew EventLog("System");
			 el->Clear();
			 //刷新
			 cms_eventlog_refresh_Click(sender,e);
		 }

		 //清除安全日志
private: System::Void cms_eventlog_clearSec_Click(System::Object^  sender, System::EventArgs^  e) {
			 EventLog^ el = gcnew EventLog("Security");
			 el->Clear();
			 //刷新
			 cms_eventlog_refresh_Click(sender,e);
		 }

		 //清除应用程序日志
private: System::Void cms_eventlog_clearApp_Click(System::Object^  sender, System::EventArgs^  e) {
			 EventLog^ el = gcnew EventLog("Application");
			 el->Clear();
			 //刷新
			 cms_eventlog_refresh_Click(sender,e);
		 }

		 //清除所有
private: System::Void cms_eventlog_clearAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 array<EventLog^> ^els = EventLog::GetEventLogs();
			 for each (EventLog^ el in els)
			 {
				 el->Clear();
			 }
			 //刷新
			 cms_eventlog_refresh_Click(sender,e);
		 }
		 
		 //导出
private: System::Void cms_eventlog_export_Click(System::Object^  sender, System::EventArgs^  e) {
			  common_net::common_getListViewData(lv_eventlog);
		 }
#pragma endregion tp_eventlog

	   //驱动模块
#pragma region tp_sysmodule
		 //从注册表中检索出服务名
private: bool lv_sysmodule_findServiceName(String^ str_name)
		 {
			 try
			 {
				 RegistryKey^ rk_ = Registry::LocalMachine->OpenSubKey("SYSTEM\\CurrentControlSet\\Services");
				 //如果存在的话
				 if (common_net::common_checkRegkey(rk_,str_name))
				 {
					 return true;
				 }
				 else
				 {
					 return false;
				 }
			 }
			 catch(Exception^ ex){ return false;} 
		 }

		 //
private: System::Void lv_sysmodule_show() 
		 { 
			 check_hdriver(hDriver);

			 BOOL bRet=FALSE;
			 DWORD dwRet=0;
			 ULONG ulSize=0;
			 PSYSTEM_MODULE_INFO pSystemModuleInfo;

			 //获得返回的大小
			 bRet = DeviceIoControl(hDriver, IOCTL_SYSMODULE_GETSIZE, NULL, 0, &ulSize, sizeof(ULONG), &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("获得驱动模块列表大小失败！");
				 return;
			 }

			 //分配内存
			 pSystemModuleInfo = new SYSTEM_MODULE_INFO[ulSize];
			 //
			 ZeroMemory(pSystemModuleInfo,ulSize);

			 //获得返回的数据
			 bRet = DeviceIoControl(hDriver, IOCTL_SYSMODULE_GETINFO, NULL, 0, pSystemModuleInfo, ulSize*sizeof(SYSTEM_MODULE_INFO), &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("获得驱动模块列表信息失败！");
				 return;
			 }

			 for (UINT32 i =0;i<ulSize;i++)
			 {
				 String^ str_name = (gcnew String(pSystemModuleInfo[i].BaseName))->ToLower()->Replace(".sys","");
				 String^ str_path = common_net::common_formatString_lv_sysmodule(gcnew String(pSystemModuleInfo[i].FullName));
				 String^ str_comp = common_net::common_getFileCompanyName(str_path);

				 ListViewItem^ item_ = gcnew ListViewItem(gcnew String(pSystemModuleInfo[i].BaseName));
				 item_->SubItems->AddRange(gcnew array<String^>{"0x"+pSystemModuleInfo[i].ulBaseAddress.ToString("X8"),
				 "0x"+pSystemModuleInfo[i].ulSize.ToString("X8"),str_path,(lv_sysmodule_findServiceName(str_name)==true?str_name:""),i.ToString(),str_comp});
				 lv_sysmodule->Items->Add(item_);

				 //在这里判断文件厂商
				 if (!str_comp->Contains("Microsoft Cor"))
				 {
					 item_->ForeColor=Color::Blue;
				 }
			 }
			 
			 //释放内存
			 free(pSystemModuleInfo);
		 }

		 //控制右键菜单的显示
private: System::Void lv_sysmodule_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_sysmodule->Items->Count==0)
			 {
				 cms_sysmodule_delete1->Enabled = false;
				 cms_sysmodule_delete2->Enabled = false;
				 cms_sysmodule_sigverif->Enabled = false;
				 cms_sysmodule_sigverifAll->Enabled = false;
				 cms_sysmodule_copy1->Enabled = false;
				 cms_sysmodule_copy2->Enabled = false;
				 cms_sysmodule_onlineFind->Enabled = false;
				 cms_sysmodule_explorer->Enabled = false;
				 cms_sysmodule_explorer2->Enabled = false;
				 cms_sysmodule_showProperty->Enabled = false;
				 cms_sysmodule_reg->Enabled = false;
			 }
			 else if (lv_sysmodule->SelectedItems->Count==0)
			 {
				 cms_sysmodule_delete1->Enabled = false;
				 cms_sysmodule_delete2->Enabled = false;
				 cms_sysmodule_sigverif->Enabled = false;
				 cms_sysmodule_sigverifAll->Enabled = true;
				 cms_sysmodule_copy1->Enabled = false;
				 cms_sysmodule_copy2->Enabled = false;
				 cms_sysmodule_onlineFind->Enabled = false;
				 cms_sysmodule_explorer->Enabled = false;
				 cms_sysmodule_explorer2->Enabled = false;
				 cms_sysmodule_showProperty->Enabled = false;
				 cms_sysmodule_reg->Enabled = false;
			 }
			 else
			 {
				 cms_sysmodule_delete1->Enabled = true;
				 if (String::IsNullOrEmpty(lv_sysmodule->SelectedItems[0]->SubItems[4]->Text))
				 {
					 cms_sysmodule_delete2->Enabled = false;
					 cms_sysmodule_reg->Enabled = false;
				 }
				 else
				 {
					 cms_sysmodule_delete2->Enabled = true;
					 cms_sysmodule_reg->Enabled = true;
				 }
				 cms_sysmodule_sigverif->Enabled = true;
				 cms_sysmodule_sigverifAll->Enabled = true;
				 cms_sysmodule_copy1->Enabled = true;
				 cms_sysmodule_copy2->Enabled = true;
				 cms_sysmodule_onlineFind->Enabled = true;
				 cms_sysmodule_explorer->Enabled = true;
				 cms_sysmodule_explorer2->Enabled = true;
				 cms_sysmodule_showProperty->Enabled = true;
				 
			 }
		 }

		 //
private: System::Void lv_sysmodule_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 1 ||e->Column == 2 || e->Column == 3)
				 {
					 //16进制
					 lv_sysmodule->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else if ( e->Column == 5)
				 {
					 //数字排序
					 lv_sysmodule->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_sysmodule->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 1 || e->Column == 2 || e->Column == 3)
				 {
					 //16进制
					 lv_sysmodule->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else if ( e->Column == 5)
				 {
					 //数字排序
					 lv_sysmodule->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_sysmodule->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_sysmodule_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_sysmodule->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_sysmodule);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_sysmodule_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_sysmodule->Items->Clear();
			 lv_sysmodule_show();
		 }

		 //删除1
private: System::Void cms_sysmodule_delete1_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 //判断文件是否存在
			 if (File::Exists(item_->SubItems[3]->Text))
			 {
				 try
				 {
					 File::Delete(item_->SubItems[3]->Text);
				 }
				 catch(Exception^ ex){ MessageBox::Show(ex->Message);}		 
			 }
		 }

		 //删除2
private: System::Void cms_sysmodule_delete2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 //判断文件是否存在
			 if (File::Exists(item_->SubItems[3]->Text))
			 {
				 try
				 {
					 File::Delete(item_->SubItems[3]->Text);
				 }
				 catch(Exception^ ex)
				 { 
					 MessageBox::Show(ex->Message);
					 return;
				 }		 
			 }

			 //删除
			 try
			 {
				 RegistryKey^ rk_ = Registry::LocalMachine->OpenSubKey("SYSTEM\\CurrentControlSet\\Services",true);
				 rk_->DeleteSubKeyTree(item_->SubItems[4]->Text);
				 rk_->Close();
			 }
			 catch(Exception^ ex)
			 {
				 MessageBox::Show(ex->Message);
			 }
		 }

		 //验证数字签名
private: System::Void cms_sysmodule_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 if (sigverif_check(common_net::common_stringToHGlobalUni(item_->SubItems[3]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

		 //
private: System::Void thread_sysmodule_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_sysmodule->Items)
			 {
				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[3]->Text + "]";
				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(item->SubItems[3]->Text)))
				 {
					 lst_item_red->Add(item);
				 }
				 else
					 if(item->ForeColor==Color::Blue)
					 {
						 lst_item_blue->Add(item);
					 }
					 else
					 {
						 lst_item_default->Add(item);			
					 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_sysmodule->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_sysmodule->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_sysmodule->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_sysmodule->Items[index] = item_;
				 index++;
			 }
			 lv_sysmodule->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }

		 //验证全部数字签名
private: System::Void cms_sysmodule_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif= gcnew Thread(gcnew ThreadStart(this,&Form1::thread_sysmodule_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //复制1
private: System::Void cms_sysmodule_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 //复制到剪切板
			 Clipboard::SetDataObject(item_->SubItems[0]->Text, true);
		 }

		 //复制2
private: System::Void cms_sysmodule_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 //复制到剪切板
			 Clipboard::SetDataObject(item_->SubItems[3]->Text, true);
		 }

		 //在线查找
private: System::Void cms_sysmodule_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 common_net::common_onlineFind(item_->SubItems[0]->Text);
		 }

		 //在线分析
private: System::Void cms_sysmodule_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

		 //定位文件
private: System::Void cms_sysmodule_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[3]->Text));
		 }

		 //
private: System::Void cms_sysmodule_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[3]->Text);
		 }

		 //属性
private: System::Void cms_sysmodule_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[3]->Text));
		 }

		 //定位注册表
private: System::Void cms_sysmodule_reg_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_sysmodule->SelectedItems[0];
			 common_explorerReg(common_net::common_stringToHGlobalUni( "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\" + item_->SubItems[4]->Text));
			 try
			 {
				 Process::Start("regedit.exe");
			 }
			 catch(Exception^ ex)
			 {
				 MessageBox::Show(ex->Message);
			 }
		 }

		 //导出
private: System::Void cms_sysmodule_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_sysmodule);
		 }
#pragma endregion tp_sysmodule

	   //内核相关 --》ssdt
#pragma region tp_kernel_ssdt

private: System::Void lv_kernel_ssdt_show()
		 {
			 if (!GetCurrentSSDTFunc(hDriver))
			 {
				 return;
			 }	 

			 //排序
			 SSDTSTOrderByServiceNum();

			 //获取原始地址
			 GetOldSSDTAddress();

			 //便利
			 for (UINT32 i =0;i<ulSSDTTotal;i++)
			 {
				 PSSDTSaveTable pSSDTSaveTable_tmp = (PSSDTSaveTable)((ULONG)pSSDTSaveTable + i * sizeof(SSDTSaveTable));

				 ListViewItem^ item_ = gcnew ListViewItem(pSSDTSaveTable_tmp->ulServiceNumber.ToString());
				 item_->SubItems->AddRange(gcnew array<String^>{gcnew String(pSSDTSaveTable_tmp->ServiceFunctionName),"0x" + pSSDTSaveTable_tmp->ulCurrentFuncAddress.ToString("X8"),
					 "0x" + pSSDTSaveTable_tmp->ulOriginalFuncAddress.ToString("X8"),common_net::common_formatString_lv_kernel(gcnew String(pSSDTSaveTable_tmp->ModuleName))});
				 
				 //判定地址
				 if (pSSDTSaveTable_tmp->ulCurrentFuncAddress != pSSDTSaveTable_tmp->ulOriginalFuncAddress)
				 {
					 item_->ForeColor = Color::Red;
				 }	

				 //如果只显示挂钩函数的话
				 if (cms_kernel_ssdt_only->Checked)
				 {
					 if (item_->ForeColor == Color::Red)
					 {
						 lv_kernel_ssdt->Items->Add(item_);
					 }		 
				 }
				 else
				 {
					 lv_kernel_ssdt->Items->Add(item_);
				 }		 	 
			 }			 
		 }

		 //控制右键菜单的显示
private: System::Void lv_kernel_ssdt_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_kernel_ssdt->Items->Count==0)
			 {
				 cms_kernel_ssdt_disasmCur->Enabled=false;
				 cms_kernel_ssdt_disasmOri->Enabled=false;
				 cms_kernel_ssdt_sigverif->Enabled = false;
				 cms_kernel_ssdt_sigverifAll->Enabled = false;
				 cms_kernel_ssdt_recovery->Enabled = false;
				 cms_kernel_ssdt_recoveryAll->Enabled = false;
				 cms_kernel_ssdt_explorer->Enabled = false;
				 cms_kernel_ssdt_explorer2->Enabled = false;
				 cms_kernel_ssdt_showProperty->Enabled = false;
			 }
			 else if (lv_kernel_ssdt->SelectedItems->Count==0 )
			 {
				 cms_kernel_ssdt_disasmCur->Enabled=false;
				 cms_kernel_ssdt_disasmOri->Enabled=false;
				 cms_kernel_ssdt_sigverif->Enabled = false;
				 cms_kernel_ssdt_sigverifAll->Enabled = true;
				 cms_kernel_ssdt_recovery->Enabled = false;
				 cms_kernel_ssdt_recoveryAll->Enabled = true;
				 cms_kernel_ssdt_explorer->Enabled = false;
				 cms_kernel_ssdt_explorer2->Enabled = false;
				 cms_kernel_ssdt_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_kernel_ssdt_disasmCur->Enabled=true;
				 cms_kernel_ssdt_disasmOri->Enabled=true;
				 cms_kernel_ssdt_sigverif->Enabled = true;
				 cms_kernel_ssdt_sigverifAll->Enabled = true;

				 if (lv_kernel_ssdt->SelectedItems[0]->SubItems[2]->Text != lv_kernel_ssdt->SelectedItems[0]->SubItems[3]->Text)
				 {
					 cms_kernel_ssdt_recovery->Enabled = true;
				 }
				 else
				 {
					 cms_kernel_ssdt_recovery->Enabled = false;
				 }

				 cms_kernel_ssdt_recoveryAll->Enabled = true;

				 cms_kernel_ssdt_explorer->Enabled = true;
				 cms_kernel_ssdt_explorer2->Enabled = true;
				 cms_kernel_ssdt_showProperty->Enabled = true;
			 }
		 }

private: System::Void lv_kernel_ssdt_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_ssdt->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 2 || e->Column == 3)
				 {
					 //数子排序
					 lv_kernel_ssdt->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_ssdt->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_ssdt->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 2 || e->Column == 3)
				 {
					 //数字排序
					 lv_kernel_ssdt->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_ssdt->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_kernel_ssdt_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_kernel_ssdt->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_kernel_ssdt);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_kernel_ssdt_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_kernel_ssdt->Items->Clear();
			 lv_kernel_ssdt_show();
		 }

		 //仅显示
private: System::Void cms_kernel_ssdt_only_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (cms_kernel_ssdt_only->Checked)
			 {
				 cms_kernel_ssdt_only->Checked = false;
			 }
			 else
			 {
				 cms_kernel_ssdt_only->Checked = true;
			 }

			 //刷新
			 cms_kernel_ssdt_refresh_Click(sender,e);
		 }

		 //反汇编当前函数
private: System::Void cms_kernel_ssdt_disasmCur_Click(System::Object^  sender, System::EventArgs^  e) {
			 DisasmForm^ disasmForm = gcnew DisasmForm(lv_kernel_ssdt->SelectedItems[0]->SubItems[2]->Text,hDriver);
			 disasmForm->ShowDialog();
		 }

		 //反汇编原始函数
private: System::Void cms_kernel_ssdt_disasmOri_Click(System::Object^  sender, System::EventArgs^  e) {
			 DisasmForm^ disasmForm = gcnew DisasmForm(lv_kernel_ssdt->SelectedItems[0]->SubItems[3]->Text,hDriver);
			 disasmForm->ShowDialog();
		 }

		 //校验数字签名
private: System::Void cms_kernel_ssdt_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(lv_kernel_ssdt->SelectedItems[0]->SubItems[4]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_kernel_ssdt_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_kernel_ssdt->Items)
			 {
				 String^ str_filePath = item->SubItems[4]->Text;
				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[4]->Text + "]";

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 //操作信息
			 tsp_lbl_msg->Text = nullptr;

			 lv_kernel_ssdt->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_kernel_ssdt->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_kernel_ssdt->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_kernel_ssdt->Items[index] = item_;
				 index++;
			 }

			 lv_kernel_ssdt->EndUpdate();
			 //
			 tc_main->Enabled = true;
		 }

		 //校验所有数字签名
private: System::Void cms_kernel_ssdt_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //开启线程验证
			 Thread^ thd = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_kernel_ssdt_sigverifAll_func));
			 thd->IsBackground = true;
			 thd->Start();
		 }

		 //恢复
private: System::Void cms_kernel_ssdt_recovery_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;
			 SSDT_CLIENT_ID SSDTClientID;

			 SSDTClientID.ulIndex = Convert::ToInt32(lv_kernel_ssdt->SelectedItems[0]->SubItems[0]->Text);
			 SSDTClientID.ulAddress = Convert::ToUInt32(lv_kernel_ssdt->SelectedItems[0]->SubItems[3]->Text,16);

			 bRet = DeviceIoControl(hDriver, IOCTL_SSDT_SETFUNCADDR, &SSDTClientID, sizeof(SSDT_CLIENT_ID), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("恢复失败！");
				 return;
			 }

			 if (cms_kernel_ssdt_only->Checked)
			 {
				 lv_kernel_ssdt->SelectedItems[0]->Remove();
			 }
			 else
			 {
				 cms_kernel_ssdt_refresh_Click(sender,e);
			 }

			 free(&SSDTClientID);
		 }

		 //恢复所有
private: System::Void cms_kernel_ssdt_recoveryAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 for each(ListViewItem^ item_ in lv_kernel_ssdt->Items)
			 {
				 if (item_->ForeColor == Color::Red)
				 {
					 SSDT_CLIENT_ID SSDTClientID;
					 SSDTClientID.ulIndex = Convert::ToInt32(item_->SubItems[0]->Text);
					 SSDTClientID.ulAddress = Convert::ToUInt32(item_->SubItems[3]->Text,16);

					 bRet = DeviceIoControl(hDriver, IOCTL_SSDT_SETFUNCADDR, &SSDTClientID, sizeof(SSDT_CLIENT_ID), NULL, 0, &dwRet, NULL);
					 if (!bRet)
					 {
						 MessageBox::Show("恢复失败！");
						 return;
					 }

					 if (cms_kernel_ssdt_only->Checked)
					 {
						 item_->Remove();
					 }

					 free(&SSDTClientID);
				 }
			 }
			 
			 if (!cms_kernel_ssdt_only->Checked)
			 {
				 cms_kernel_ssdt_refresh_Click(sender,e);
			 }
		 }

		 //定位
private: System::Void cms_kernel_ssdt_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_kernel_ssdt->SelectedItems[0]->SubItems[4]->Text));
		 }

		 //
private: System::Void cms_kernel_ssdt_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_ssdt->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[4]->Text);
		 }

		 //查看文件属性
private: System::Void cms_kernel_ssdt_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_kernel_ssdt->SelectedItems[0]->SubItems[4]->Text));
		 }

		 //导出
private: System::Void cms_kernel_ssdt_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_kernel_ssdt);
		 }
#pragma endregion tp_kernel_ssdt

       //内核相关 --》shadow
#pragma region tp_kernel_shadow
private: System::Void lv_kernel_shadow_show()
		 {
			 check_hdriver(hDriver);

			 array<String^>^ strs_shadow = nullptr;
			 
			 //如果系统版本为xp
			 if (ulOSVersion == OS_WINDOWS_XP)
			 {
				 strs_shadow = common_net::common_getXPShadowAPI();
			 }
			 //如果为win7/2008r2
			 else if (ulOSVersion == OS_WINDOWS_7_2008R2)
			 {
				 strs_shadow = common_net::common_getWIN7ShadowAPI();
			 }

			 //遍历xp函数列表
			 for(int i=0;i<strs_shadow->Length;i++)
			 {
				 DWORD dwRet=0;
				 ULONG ulAddr = 0;
				 ULONG ulOriAddr=0;

				 DeviceIoControl(hDriver, IOCTL_SHADOW_GETFUNCADDR, &i, sizeof(ULONG), &ulAddr, sizeof(ULONG), &dwRet, NULL);
				 DeviceIoControl(hDriver, IOCTL_SHADOW_GETFUNCADDR_ORI, &i, sizeof(ULONG), &ulOriAddr, sizeof(ULONG), &dwRet, NULL);

				 //通过地址得到模块名
				 char buffer[MAX_PATH];
				 memset(buffer, 0, sizeof(buffer));

				 //获得模块名
				 if(GetModuleNameByAddr(ulAddr, pSystem_Module_List, buffer))
				 {
					 ListViewItem^ item_ = gcnew ListViewItem(i.ToString());
					 item_->SubItems->AddRange(gcnew array<String^>{strs_shadow[i],"0x" + ulAddr.ToString("X8"),"0x" + ulOriAddr.ToString("X8"),common_net::common_formatString_lv_kernel(gcnew String(buffer))});
					 
					 //判定地址
					 if (ulAddr != ulOriAddr)
					 {
						 item_->ForeColor = Color::Red;
					 }	

					 //如果只显示挂钩函数的话
					 if (cms_kernel_shadow_only->Checked)
					 {
						 if (item_->ForeColor == Color::Red)
						 {
							 lv_kernel_shadow->Items->Add(item_);
						 }		 
					 }
					 else
					 {
						 lv_kernel_shadow->Items->Add(item_);
					 }	
				 }
			 }
		 }

		 //控制右键菜单的显示
private: System::Void lv_kernel_shadow_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_kernel_shadow->Items->Count==0)
			 {
				 cms_kernel_shadow_disasmCur->Enabled=false;
				 cms_kernel_shadow_disasmOri->Enabled=false;
				 cms_kernel_shadow_sigverif->Enabled = false;
				 cms_kernel_shadow_sigverifAll->Enabled = false;
				 cms_kernel_shadow_recovery->Enabled = false;
				 cms_kernel_shadow_recoveryAll->Enabled = false;
				 cms_kernel_shadow_explorer->Enabled = false;
				 cms_kernel_shadow_explorer2->Enabled = false;
				 cms_kernel_shadow_showProperty->Enabled = false;
			 }
			 else if (lv_kernel_shadow->SelectedItems->Count==0 )
			 {
				 cms_kernel_shadow_disasmCur->Enabled=false;
				 cms_kernel_shadow_disasmOri->Enabled=false;
				 cms_kernel_shadow_sigverif->Enabled = false;
				 cms_kernel_shadow_sigverifAll->Enabled = true;
				 cms_kernel_shadow_recovery->Enabled = false;
				 cms_kernel_shadow_recoveryAll->Enabled = true;
				 cms_kernel_shadow_explorer->Enabled = false;
				 cms_kernel_shadow_explorer2->Enabled = false;
				 cms_kernel_shadow_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_kernel_shadow_disasmCur->Enabled=true;
				 cms_kernel_shadow_disasmOri->Enabled=true;
				 cms_kernel_shadow_sigverif->Enabled = true;
				 cms_kernel_shadow_sigverifAll->Enabled = true;

				 if (lv_kernel_shadow->SelectedItems[0]->SubItems[2]->Text != lv_kernel_shadow->SelectedItems[0]->SubItems[3]->Text)
				 {
					 cms_kernel_shadow_recovery->Enabled = true;
				 }
				 else
				 {
					 cms_kernel_shadow_recovery->Enabled = false;
				 }

				 cms_kernel_shadow_recoveryAll->Enabled = true;

				 cms_kernel_shadow_explorer->Enabled = true;
				 cms_kernel_shadow_explorer2->Enabled = true;
				 cms_kernel_shadow_showProperty->Enabled = true;
			 }
		 }

private: System::Void lv_kernel_shadow_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_shadow->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 2 || e->Column == 3)
				 {
					 //数子排序
					 lv_kernel_shadow->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_shadow->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_shadow->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 2 || e->Column == 3)
				 {
					 //数字排序
					 lv_kernel_shadow->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_shadow->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_kernel_shadow_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_kernel_shadow->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_kernel_shadow);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_kernel_shadow_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_kernel_shadow->Items->Clear();
			 lv_kernel_shadow_show();
		 }

		 //仅显示挂钩
private: System::Void cms_kernel_shadow_only_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (cms_kernel_shadow_only->Checked)
			 {
				 cms_kernel_shadow_only->Checked = false;
			 }
			 else
			 {
				 cms_kernel_shadow_only->Checked = true;
			 }

			 //刷新
			 cms_kernel_shadow_refresh_Click(sender,e);
		 }

		 //反汇编当前函数地址
private: System::Void cms_kernel_shadow_disasmCur_Click(System::Object^  sender, System::EventArgs^  e) {
			 DisasmForm^ disasmForm = gcnew DisasmForm(lv_kernel_shadow->SelectedItems[0]->SubItems[2]->Text,hDriver);
			 disasmForm->ShowDialog();
		 }

		 //反汇编原始函数地址
private: System::Void cms_kernel_shadow_disasmOri_Click(System::Object^  sender, System::EventArgs^  e) {
			 DisasmForm^ disasmForm = gcnew DisasmForm(lv_kernel_shadow->SelectedItems[0]->SubItems[3]->Text,hDriver);
			 disasmForm->ShowDialog();
		 }

		 //校验
private: System::Void cms_kernel_shadow_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(lv_kernel_shadow->SelectedItems[0]->SubItems[4]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_kernel_shadow_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_kernel_shadow->Items)
			 {
				 String^ str_filePath = common_net::common_formatString_lv_kernel(item->SubItems[4]->Text);
				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[4]->Text + "]";

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_kernel_shadow->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_kernel_shadow->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_kernel_shadow->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_kernel_ssdt->Items[index] = item_;
				 index++;
			 }

			 lv_kernel_shadow->EndUpdate();
			 //
			 tc_main->Enabled = true;
		 }		 

		 //校验所有
private: System::Void cms_kernel_shadow_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //开启线程验证
			 Thread^ thd = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_kernel_shadow_sigverifAll_func));
			 thd->IsBackground = true;
			 thd->Start();
		 }

		 //恢复
private: System::Void cms_kernel_shadow_recovery_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;
			 SHADOW_SSDT_CLIENT_ID ShadowSSDTClientID;

			 ShadowSSDTClientID.ulIndex = Convert::ToInt32(lv_kernel_shadow->SelectedItems[0]->SubItems[0]->Text);
			 ShadowSSDTClientID.ulAddress = Convert::ToUInt32(lv_kernel_shadow->SelectedItems[0]->SubItems[3]->Text,16);

			 bRet = DeviceIoControl(hDriver, IOCTL_SHADOW_SETFUNCADDR, &ShadowSSDTClientID, sizeof(SHADOW_SSDT_CLIENT_ID), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("恢复失败！");
				 return;
			 }

			 if (cms_kernel_shadow_only->Checked)
			 {
				 lv_kernel_shadow->SelectedItems[0]->Remove();
			 }
			 else
			 {
				 cms_kernel_shadow_refresh_Click(sender,e);
			 }

			 free(&ShadowSSDTClientID);	 
		 }

		 //恢复所有
private: System::Void cms_kernel_shadow_recoveryAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 for each(ListViewItem^ item_ in lv_kernel_shadow->Items)
			 {
				 if (item_->ForeColor == Color::Red)
				 {
					 SHADOW_SSDT_CLIENT_ID ShadowSSDTClientID;
					 ShadowSSDTClientID.ulIndex = Convert::ToInt32(item_->SubItems[0]->Text);
					 ShadowSSDTClientID.ulAddress = Convert::ToUInt32(item_->SubItems[3]->Text,16);

					 bRet = DeviceIoControl(hDriver, IOCTL_SHADOW_SETFUNCADDR, &ShadowSSDTClientID, sizeof(SHADOW_SSDT_CLIENT_ID), NULL, 0, &dwRet, NULL);
					 if (!bRet)
					 {
						 MessageBox::Show("恢复失败！");
						 return;
					 }

					 if (cms_kernel_shadow_only->Checked)
					 {
						 item_->Remove();
					 }

					 free(&ShadowSSDTClientID);
				 }
			 }

			 if (!cms_kernel_shadow_only->Checked)
			 {
				 cms_kernel_shadow_refresh_Click(sender,e);
			 }
		 }

		 //定位
private: System::Void cms_kernel_shadow_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_kernel_shadow->SelectedItems[0]->SubItems[4]->Text));
		 }

		 //
private: System::Void cms_kernel_shadow_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_shadow->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[4]->Text);
		 }

		 //查看文件属性
private: System::Void cms_kernel_shadow_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_kernel_shadow->SelectedItems[0]->SubItems[4]->Text));
		 }

		 //导出
private: System::Void cms_kernel_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_kernel_shadow);
		 }
#pragma endregion tp_kernel_shadow

	   //内核相关 --》fsd
#pragma region tp_kernel_fsd

private: System::Void lv_kernel_fsd_show()
		 {

		 }

		 //控制右键菜单的显示
private: System::Void lv_kernel_fsd_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_kernel_fsd->Items->Count==0)
			 {
				 cms_kernel_fsd_disasmCur->Enabled=false;
				 cms_kernel_fsd_disasmOri->Enabled=false;
				 cms_kernel_fsd_sigverif->Enabled = false;
				 cms_kernel_fsd_sigverifAll->Enabled = false;
				 cms_kernel_fsd_recovery->Enabled = false;
				 cms_kernel_fsd_recoveryAll->Enabled = false;
				 cms_kernel_fsd_explorer->Enabled = false;
				 cms_kernel_fsd_showProperty->Enabled = false;
			 }
			 else if (lv_kernel_fsd->SelectedItems->Count==0 )
			 {
				 cms_kernel_fsd_disasmCur->Enabled=false;
				 cms_kernel_fsd_disasmOri->Enabled=false;
				 cms_kernel_fsd_sigverif->Enabled = false;
				 cms_kernel_fsd_sigverifAll->Enabled = false;
				 cms_kernel_fsd_recovery->Enabled = false;
				 cms_kernel_fsd_recoveryAll->Enabled = true;
				 cms_kernel_fsd_explorer->Enabled = false;
				 cms_kernel_fsd_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_kernel_fsd_disasmCur->Enabled=true;
				 cms_kernel_fsd_disasmOri->Enabled=true;
				 cms_kernel_fsd_sigverif->Enabled = true;
				 cms_kernel_fsd_sigverifAll->Enabled = true;

				 if (lv_kernel_fsd->SelectedItems[0]->SubItems[2]->Text != lv_kernel_fsd->SelectedItems[0]->SubItems[3]->Text)
				 {
					 cms_kernel_fsd_recovery->Enabled = true;
				 }
				 else
				 {
					 cms_kernel_ssdt_recovery->Enabled = false;
				 }

				 cms_kernel_fsd_recoveryAll->Enabled = true;

				 cms_kernel_fsd_explorer->Enabled = true;
				 cms_kernel_fsd_showProperty->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_kernel_fsd_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_fsd->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 2 || e->Column == 3)
				 {
					 //数子排序
					 lv_kernel_fsd->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_fsd->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_fsd->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 2 || e->Column == 3)
				 {
					 //数字排序
					 lv_kernel_fsd->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_fsd->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_kernel_fsd_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_kernel_fsd->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_kernel_fsd);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_kernel_fsd_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_kernel_fsd->Items->Clear();
			 lv_kernel_fsd_show();
		 }

		 //仅显示挂钩
private: System::Void cms_kernel_fsd_only_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //反汇编当前函数地址
private: System::Void cms_kernel_fsd_disasmCur_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //反汇编原始函数地址
private: System::Void cms_kernel_fsd_disasmOri_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //验证数字签名
private: System::Void cms_kernel_fsd_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //验证所有数字签名
private: System::Void cms_kernel_fsd_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //恢复
private: System::Void cms_kernel_fsd_recovery_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //恢复所有
private: System::Void cms_kernel_fsd_recoveryAll_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //定位
private: System::Void cms_kernel_fsd_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_fsd->SelectedItems[0];
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[4]->Text));
		 }

		 //查看文件属性
private: System::Void cms_kernel_fsd_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_fsd->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[4]->Text));
		 }

		 //导出
private: System::Void cms_kernel_fsd_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_kernel_fsd);
		 }
#pragma endregion tp_kernel_fsd

       //内核相关 --》系统回调
#pragma region tp_kernel_callback
		 //系统回调
private: System::Void lv_kernel_callback_show() 
		 { 
			 check_hdriver(hDriver);

			 BOOL bRet=FALSE;
			 DWORD dwRet=0;
			 ULONG ulSize=0;
			 PKERNEL_SYSTEM_CALLBACK_INFO pKernelSystemCallbackInfo;

			 //获得返回的大小
			 bRet = DeviceIoControl(hDriver, IOCTL_KERNEL_SYSTEMCALLBACK_GETSIZE, NULL, 0, &ulSize, sizeof(ULONG), &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("获得系统回调大小失败！");
				 return;
			 }

			 //分配内存
			 pKernelSystemCallbackInfo = new KERNEL_SYSTEM_CALLBACK_INFO[ulSize];
			 //
			 ZeroMemory(pKernelSystemCallbackInfo,ulSize);

			 //获得返回的数据
			 bRet = DeviceIoControl(hDriver, IOCTL_KERNEL_SYSTEMCALLBACK_GETINFO, NULL, 0, pKernelSystemCallbackInfo, ulSize*sizeof(KERNEL_SYSTEM_CALLBACK_INFO), &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("获得系统回调信息失败！");
				 return;
			 }

			 for (UINT32 i =0;i<ulSize;i++)
			 {
				 String^ str_path = common_net::common_formatString_lv_sysmodule(gcnew String(pKernelSystemCallbackInfo[i].PathName));
				 String^ str_comp = common_net::common_getFileCompanyName(str_path);

				 ListViewItem^ item_ = gcnew ListViewItem("0x"+pKernelSystemCallbackInfo[i].ulCallBackAddress.ToString("X8"));
				 switch(pKernelSystemCallbackInfo[i].ulType)
				 {
				 case 1:
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{"CreateProcess",str_path,str_comp});
					 }				 
					 break;
				 case 2:
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{"CreateThread",str_path,str_comp});
					 }		 
					 break;
				 case 3:
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{"LoadImage",str_path,str_comp});
					 }					 
					 break;
				 case 4:
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{"CmRCallback",str_path,str_comp});
					 }				 
					 break;
				 case 5:
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{"BugCheck",str_path,str_comp});
					 }				 
					 break;
				 case 6:
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{"BugCheckReason",str_path,str_comp});
					 }			 
					 break;
				 case 7:
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{"Shutdown",str_path,str_comp,"0x" + pKernelSystemCallbackInfo[i].ulAttatch.ToString("X8")});
					 }		 
					 break;
				 }

				 lv_kernel_callback->Items->Add(item_);

				 //在这里判断文件厂商
				 if (!str_comp->Contains("Microsoft Cor"))
				 {
					 item_->ForeColor=Color::Blue;
				 }
			 }
		 }

		 //控制右键菜单的显示
private: System::Void lv_kernel_callback_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_kernel_callback->Items->Count==0)
			 {
				 cms_kernel_callback_delete->Enabled = false;
				 cms_kernel_callback_disasm->Enabled = false;
				 cms_kernel_callback_explorer->Enabled = false;
				 cms_kernel_callback_explorer2->Enabled = false;
				 cms_kernel_callback_showProperty->Enabled = false;
			 }
			 else if (lv_kernel_callback->SelectedItems->Count==0)
			 {
				 cms_kernel_callback_delete->Enabled = false;
				 cms_kernel_callback_disasm->Enabled = false;
				 cms_kernel_callback_explorer->Enabled = false;
				 cms_kernel_callback_explorer2->Enabled = false;
				 cms_kernel_callback_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_kernel_callback_delete->Enabled = true;
				 cms_kernel_callback_disasm->Enabled = true;
				 cms_kernel_callback_explorer->Enabled = true;
				 cms_kernel_callback_explorer2->Enabled = true;
				 cms_kernel_callback_showProperty->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_kernel_callback_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_callback->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_callback->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 0)
				 {
					 //数字排序
					 lv_kernel_callback->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_callback->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_kernel_callback_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_kernel_callback->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_kernel_callback);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_kernel_callback_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_kernel_callback->Items->Clear();
			 lv_kernel_callback_show();
		 }

		 //删除
private: System::Void cms_kernel_callback_delete_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //反汇编
private: System::Void cms_kernel_callback_disasm_Click(System::Object^  sender, System::EventArgs^  e) {
			 DisasmForm^ disasmForm = gcnew DisasmForm(lv_kernel_callback->SelectedItems[0]->SubItems[0]->Text,hDriver);
			 disasmForm->ShowDialog();
		 }

		 //定位
private: System::Void cms_kernel_callback_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_shadow->SelectedItems[0];
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[2]->Text));
		 }

		 //
private: System::Void cms_kernel_callback_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_callback->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[2]->Text);
		 }

		 //查看文件属性
private: System::Void cms_kernel_callback_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_shadow->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[2]->Text));
		 }

		 //导出
private: System::Void cms_kernel_callback_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_kernel_callback);
		 }
#pragma endregion tp_kernel_callback

	   //内核相关 --》过滤驱动
#pragma region tp_kernel_filter
		 //过滤驱动
private: System::Void lv_kernel_filter_show() 
		 { 
			 check_hdriver(hDriver);

			 BOOL bRet=FALSE;
			 DWORD dwRet=0;
			 ULONG ulSize=0;
			 PKERNEL_FILTERDRIVER_INFO pKernelFilterDriverInfo;

			 //获得返回的大小
			 bRet = DeviceIoControl(hDriver, IOCTL_KERNEL_FILTERDRIVER_GETSIZE, NULL, 0, &ulSize, sizeof(ULONG), &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("获得过滤驱动大小失败！");
				 return;
			 }

			 //分配内存
			 pKernelFilterDriverInfo = new KERNEL_FILTERDRIVER_INFO[ulSize];
			 //
			 ZeroMemory(pKernelFilterDriverInfo,ulSize);

			 //获得返回的数据
			 bRet = DeviceIoControl(hDriver, IOCTL_KERNEL_FILTERDRIVER_GETINFO, NULL, 0, pKernelFilterDriverInfo, ulSize*sizeof(KERNEL_FILTERDRIVER_INFO), &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("获得过滤驱动信息失败！");
				 return;
			 }

			 for (UINT32 i =0;i<ulSize;i++)
			 {
				 String^ str_path = common_net::common_formatString_lv_sysmodule(gcnew String(pKernelFilterDriverInfo[i].FilePath));
				 String^ str_comp = common_net::common_getFileCompanyName(str_path);

				 ListViewItem^ item_ = gcnew ListViewItem();

				 switch(pKernelFilterDriverInfo[i].ulObjType)
				 {
				 case FILE_DEVICE_DISK:
					 item_->Text = "Disk";
					 break;

				 case FILE_DEVICE_DFS_FILE_SYSTEM:
				 case FILE_DEVICE_DISK_FILE_SYSTEM:
				 case FILE_DEVICE_FILE_SYSTEM:
					 item_->Text = "File";
					 break;

				 case FILE_DEVICE_DFS_VOLUME:
					 item_->Text = "Volume";
					 break;		 
				 case FILE_DEVICE_KEYBOARD:
					 item_->Text = "Keyboard";
					 break;
				 case FILE_DEVICE_MOUSE:
					 item_->Text = "Mouse";
					 break;
				 case FILE_DEVICE_NETWORK:
					 item_->Text = "Network";
					 break;
				 case FILE_DEVICE_8042_PORT:
					 item_->Text = "I8042Port";
					 break;
				 case FILE_DEVICE_UNKNOWN:
					 item_->Text = "Unknown";
					 break;
				 }		 

				 item_->SubItems->AddRange(gcnew array<String^>{gcnew String(pKernelFilterDriverInfo[i].FileName),str_path,
				 "0x"+pKernelFilterDriverInfo[i].ulAttachDevice.ToString("X8"),gcnew String(pKernelFilterDriverInfo[i].HostFileName),str_comp});

				 lv_kernel_filter->Items->Add(item_);

				 //在这里判断文件厂商
				 if (!str_comp->Contains("Microsoft Cor"))
				 {
					 item_->ForeColor=Color::Blue;
				 }
			 }
		 }

		 //控制右键菜单的显示
private: System::Void lv_kernel_filter_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_kernel_filter->Items->Count==0)
			 {
				 cms_kernel_filter_delete->Enabled = false;
				 cms_kernel_filter_explorer->Enabled = false;
				 cms_kernel_filter_explorer2->Enabled = false;
				 cms_kernel_filter_showProperty->Enabled = false;
			 }
			 else if (lv_kernel_filter->SelectedItems->Count==0)
			 {
				 cms_kernel_filter_delete->Enabled = false;
				 cms_kernel_filter_explorer->Enabled = false;
				 cms_kernel_filter_explorer2->Enabled = false;
				 cms_kernel_filter_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_kernel_filter_delete->Enabled = true;
				 cms_kernel_filter_explorer->Enabled = true;
				 cms_kernel_filter_explorer2->Enabled = true;
				 cms_kernel_filter_showProperty->Enabled = true;
			 }
		 }

private: System::Void lv_kernel_filter_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 3)
				 {
					 //数字排序
					 lv_kernel_filter->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_filter->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 3)
				 {
					 //数字排序
					 lv_kernel_filter->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_kernel_filter->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_kernel_filter_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_kernel_filter->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_kernel_filter);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_kernel_filter_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_kernel_filter->Items->Clear();
			 lv_kernel_filter_show();
		 }

		 //删除
private: System::Void cms_kernel_filter_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;
			 ULONG ulAttachObj=0;

			 ListViewItem^ item_ = lv_kernel_filter->SelectedItems[0];

			 ulAttachObj = Convert::ToUInt32(item_->SubItems[3]->Text,16);

			 //获得返回的大小
			 bRet = DeviceIoControl(hDriver, IOCTL_KERNEL_FILTERDRIVER_KILL, &ulAttachObj, sizeof(ULONG), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("摘除失败！");
				 return;
			 }

			 item_->Remove();
		 }

		 //定位
private: System::Void cms_kernel_filter_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_filter->SelectedItems[0];
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[2]->Text));
		 }

		 //
private: System::Void cms_kernel_filter_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_filter->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[2]->Text);
		 }

		 //查看属性
private: System::Void cms_kernel_filter_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_kernel_filter->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[2]->Text));
		 }

		 //导出
private: System::Void cms_kernel_filter_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_kernel_filter);
		 }
#pragma endregion tp_kernel_filter

	   //文件
#pragma region tp_file

		 //记录当前目录
		 static String^ tp_file_str_currentDir;
		 
		 //跳转到文件快照
		 static String^ tp_file_str_snapDir = nullptr;
		 static bool tp_file_bl_toSnap = false;

		 //跳到输入输出表面板
		 static String^ tp_file_str_tableFile;
		 static bool tp_file_bl_toTable = false;

		 //跳转到MD5面板
		 static String^ tp_file_str_md5Dir;
		 static bool tp_file_bl_toMD5 = false;

		 //跳转到验证数字签名面板
		 static String^ tp_file_str_sigverifDir;
		 static bool tp_file_bl_toSigverif = false;

		 //文件跳转
private: System::Void lv_file_jmp(String^ str_){
			 tc_main->SelectedIndex = 7;

			 cbo_file->Text = str_;
			 array<String^>^ strs_ = str_->Split('\\');
			 tv_file_findNode_func3(strs_,true);
		 }

		 //获取目录下面的所有子目录
private: array<String^>^ lv_file_get_all_subDir(String^ str_path)
		 {
			 try
			 {
				 return  Directory::GetDirectories(str_path);
			 }
			 catch(Exception^ ex) { }
		 }

		 //获取当前节点下的所有子节点
private: System::Void lv_file_get_all_subNode(String^ str_path,TreeNode^ tn_)
		 {
			 try
			 {
				 //重新获得所有的目录
				 array<String^>^ strs_subDir = lv_file_get_all_subDir(str_path);
				 for each (String^ str_subDir in strs_subDir)
				 {
					 DirectoryInfo^ directoryInfo_ = gcnew DirectoryInfo(str_subDir);
					 TreeNode^  tn_sub = gcnew TreeNode(directoryInfo_->Name,1,2);
					 tn_sub->Tag = str_subDir;
					 //添加子节点
					 tn_->Nodes->Add(tn_sub);
					 tn_->Collapse();
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //获取目录下面的所有文件
private: array<String^>^ lv_file_get_all_file(String^ str_path)
		 {
			 try
			 {
				 return  Directory::GetFiles(str_path);
			 }
			 catch(Exception^ ex) { }
		 }

		 //列出当前目录下所有的文件
private: System::Void lv_file_get_current_file_directory(String^ str_path)
		 {
			 try
			 {
				 //清空原有记录
				 lv_file->Items->Clear();
				 //获得当前目录下所有文件
				 array<String^>^ strs_file = lv_file_get_all_file(str_path);
				 //获得当前目录下所有子目录
				 array<String^>^ strs_dir = lv_file_get_all_subDir(str_path);

				 //遍历
				 for each (String^ str_dir in strs_dir)
				 {
					 DirectoryInfo^ directoryInfo_ = gcnew DirectoryInfo(str_dir);
					 ListViewItem^ item = gcnew ListViewItem(directoryInfo_->Name);

					 //tag,目录绝对路径
					 item->Tag = str_dir;

					 item->SubItems->AddRange(gcnew array<String^> { "", "文件夹", 
						 Directory::GetCreationTime(str_dir).ToString(),
					     Directory::GetLastAccessTime(str_dir).ToString()});
					 lv_file->Items->Add(item);
				 }

				 for each (String^ str_file in strs_file)
				 {
					 FileInfo^ fileInfo_ = gcnew FileInfo(str_file);
					 ListViewItem^ item = gcnew ListViewItem(fileInfo_->Name);

					 //tag,文件绝对路径
					 item->Tag = str_file;

					 item->SubItems->AddRange(gcnew array<String^> {
						 (fileInfo_->Length / 1024).ToString() + "KB", 
						  fileInfo_->Extension, 
						  File::GetCreationTime(str_file).ToString(),
					      File::GetLastAccessTime(str_file).ToString(),
					      File::GetAttributes(str_file).ToString()});

					 lv_file->Items->Add(item);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //显示文件树
private: System::Void lv_file_show()
		 {
			 //情况节点
			 tv_file->Nodes->Clear();

			 TreeNode^ tn_ = gcnew TreeNode("我的电脑",0,0);
			 tv_file->Nodes->Add(tn_);

			 //获得所有驱动器结构
			 array<DriveInfo^>^ driveInfos_ = DriveInfo::GetDrives();
			 //遍历
			 for each(DriveInfo^ d in driveInfos_ )
			 {
				 switch (d->DriveType)
				 {
					 //固定磁盘驱动器
				 case DriveType::Fixed:
					 {
						 TreeNode^ tn_sub = gcnew TreeNode(d->Name->Replace("\\",""),1,2);
						 tn_sub->Tag = d->Name;
						 tn_->Nodes->Add(tn_sub);
						 //获得所有子节点
						 lv_file_get_all_subNode(d->Name, tn_sub);
					 }

					 break;
					 //移动磁盘驱动器
				 case DriveType::Removable:
					 {
						 TreeNode^ tn_sub = gcnew TreeNode(d->Name->Replace("\\",""),1,2);
						 tn_sub->Tag = d->Name;
						 tn_->Nodes->Add(tn_sub);
						 //获得所有子节点
						 lv_file_get_all_subNode(d->Name, tn_sub);
					 }
					 break;
					 //光驱
				 case DriveType::CDRom:
					 {
						 TreeNode^ tn_sub = gcnew TreeNode(d->Name->Replace("\\",""),1,2);
						 tn_sub->Tag = d->Name;
						 tn_->Nodes->Add(tn_sub);
						 //获得所有子节点
						 lv_file_get_all_subNode(d->Name, tn_sub);
					 }
					 break;
				 default:
					 break;
				 }
			 }

			 tv_file->Nodes[0]->Expand();

			 //从配置文件中加载信息
			 try
			 {
				 String^ str_cbo_file_items = common_net::config_getPrivateProfileString("main","cbo_file_items",Application::StartupPath+"\\Deianeira.config");
				 array<String^>^ strs_ = str_cbo_file_items->Split(gcnew array<String^>{";"},StringSplitOptions::RemoveEmptyEntries);
				 for (int i = 0;i<strs_->Length;i++)
				 {
					 //显示名称
					 cbo_file->Items->Add(strs_[i]);
				 }	 
			 }
			 catch (Exception^ ex){ }

			 //往cbo_file添加常用想
			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::Windows));
			 cbo_file->Items->Add(Environment::SystemDirectory);

			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::ProgramFiles));
			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::CommonApplicationData));
			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData));

			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::CommonStartup));
			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::Startup));
			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::Programs));

			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::CommonDesktopDirectory));
			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::DesktopDirectory));

			 cbo_file->Items->Add(Environment::GetFolderPath(Environment::SpecialFolder::LocalApplicationData));
		 }

private: System::Void tv_file_AfterCollapse(System::Object^  sender, System::Windows::Forms::TreeViewEventArgs^  e) {
			 try
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 //清空原有的记录
					 tn_->Nodes->Clear();
					 //重新获得所有子节点
					 lv_file_get_all_subNode(tn_->Tag->ToString(), tn_);
				 }

				 //记录当前目录
				 tp_file_str_currentDir = e->Node->Tag->ToString();

				 //列出当前目录下的所有文件和子目录
				 lv_file_get_current_file_directory(e->Node->Tag->ToString());
			 }
			 catch(Exception^ ex){ }
		 }

		 //
private: System::Void tv_file_BeforeSelect(System::Object^  sender, System::Windows::Forms::TreeViewCancelEventArgs^  e) {
			 try
			 {
				 //记录当前目录
				 tp_file_str_currentDir = e->Node->Tag->ToString();
				 //列出当前目录下的所有文件和子目录
				 lv_file_get_current_file_directory(e->Node->Tag->ToString());
			 }
			 catch(Exception^ ex){ }
		 }

private: System::Void tv_file_BeforeExpand(System::Object^  sender, System::Windows::Forms::TreeViewCancelEventArgs^  e) {
			 try
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 //清空原有的记录
					 tn_->Nodes->Clear();
					 //重新获得所有子节点
					 lv_file_get_all_subNode(tn_->Tag->ToString(), tn_);
				 }

				 //记录当前目录
				 tp_file_str_currentDir = e->Node->Tag->ToString();

				 //列出当前目录下的所有文件和子目录
				 lv_file_get_current_file_directory(e->Node->Tag->ToString());
			 }
			 catch(Exception^ ex){ }	 
		 }

private: System::Void tv_file_findNode_func(TreeNode^ tn_,String^ str_)
		 {
			 try
			 {
				 //遍历数组
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 if (tn_2->Tag->ToString()->ToLower() == str_->ToLower())
					 {
						 tn_2->Expand();
						 tv_file->Focus();
						 tv_file->SelectedNode = tn_2;

						 break;
					 }

					 tv_file_findNode_func(tn_2,str_);
				 }	 
			 }
			 catch(Exception^ ex) { }
		 }

private: System::Void tv_file_findNode_func2(TreeNode^ tn_,bool isFile,String^ str_,String^ str2_)
		 {
			 try
			 {
				 //遍历数组
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 if (tn_2->Text->ToLower() == str_->ToLower())
					 {
						 tn_2->Expand();
						 tv_file->Focus();
						 tv_file->SelectedNode = tn_2;

						 if (isFile)
						 {
							 for each(ListViewItem^ item_ in lv_file->Items)
							 {
								 if (item_->SubItems[0]->Text->ToLower() == str2_->ToLower())
								 {
									 lv_file->Focus();
									 item_->Selected = true;
									 lv_file->Items[item_->Index]->EnsureVisible();
								 }
							 }
						 }
						 
						 break;
					 }

					 tv_file_findNode_func(tn_2,str_);
				 }	 
			 }
			 catch(Exception^ ex) { }
		 }

private: System::Void tv_file_findNode_func3(array<String^>^ strs_,bool isFile)
		 {
			 try
			 {
				 tv_file->SelectedNode = tv_file->Nodes[0];

				 for (int i =0;i<strs_->Length;i++)
				 {
					 tv_file_findNode_func2(tv_file->SelectedNode,isFile,strs_[i],strs_[strs_->Length-1]);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

private: System::Void lv_file_ItemActivate(System::Object^  sender, System::EventArgs^  e) {
			 if(File::Exists(lv_file->SelectedItems[0]->Tag->ToString()))
			 {
				 Process::Start(lv_file->SelectedItems[0]->Tag->ToString());
			 }
			 else
			 { 
				 String^ str_ = lv_file->SelectedItems[0]->Tag->ToString();
				 //列出当前目录下的所有文件和子目录
				 lv_file_get_current_file_directory(str_);
				 //在这里处理树结构的排列
				 tv_file_findNode_func(tv_file->Nodes[0],str_);			 
			 }
		 }

		 //控制右键菜单的显示
private: System::Void tv_file_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (e->Button == System::Windows::Forms::MouseButtons::Right) 
			 { 
				 Point p =Point(e->X, e->Y); 
				 TreeNode^ tn_ = tv_file->GetNodeAt(p); 
				 tv_file->SelectedNode = tn_; 

				 if (tv_file->SelectedNode == nullptr)
				 {
					 //
					 cms_tv_file->Enabled = false;
					 return;
				 }
				 //
				 cms_tv_file->Enabled = true;
				 //
				 if(tv_file->SelectedNode->Level==0)
				 {
					 cms_tv_file_refresh->Enabled = true;
					 cms_tv_file_delete->Enabled = false;
					 cms_tv_file_forceDelete->Enabled = false;
					 cms_tv_file_rebootDelete->Enabled = false;
					 cms_tv_file_rename->Enabled = false;
					 cms_tv_file_copyTo->Enabled = false;
					 cms_tv_file_snap->Enabled = false;
					 cms_tv_file_copy1->Enabled = false;
					 cms_tv_file_copy2->Enabled = false;
					 cms_tv_file_md5->Enabled = false;
					 cms_tv_file_sigverif->Enabled = false;
				 }
				 else if(tv_file->SelectedNode->Level == 1)
				 {
					 cms_tv_file_rename->Enabled = false;
					 cms_tv_file_copyTo->Enabled = false;
					 cms_tv_file_snap->Enabled = true;
				 }
				 else
				 {
					 cms_tv_file_rename->Enabled = true;
					 cms_tv_file_copyTo->Enabled = true;
					 cms_tv_file_snap->Enabled = true;
				 }
			 } 
		 }

		 //
private: System::Void cbo_file_KeyPress(System::Object^  sender, System::Windows::Forms::KeyPressEventArgs^  e) {
			 if (e->KeyChar == (Char)13)
			 {
				 if (Directory::Exists(cbo_file->Text))
				 {
					 array<String^>^ strs_ = cbo_file->Text->Split('\\');
					 tv_file_findNode_func3(strs_,false);
				 }
				 else if (File::Exists(cbo_file->Text))
				 {
					 array<String^>^ strs_ = cbo_file->Text->Split('\\');
					 tv_file_findNode_func3(strs_,true);
				 }
				 else
				 {
					 MessageBox::Show("文件或目录不存在！");
					 return;
				 }

				 //把信息写入配置文件
				 //从配置文件中加载信息
				 try
				 {
					 //如果是已经在列表里面的话，就不要写入配置文件了
					 for each(String^ str_ in cbo_file->Items)
					 {
						 //如果已经存在相同记录的话就返回
						 if (str_ == cbo_file->Text)
						 {
							 return;
						 }
					 }

					 String^ str_cbo_file_items = common_net::config_getPrivateProfileString("main","cbo_file_items",Application::StartupPath+"\\Deianeira.config");
					 array<String^>^ strs_ = str_cbo_file_items->Split(gcnew array<String^>{";"},StringSplitOptions::RemoveEmptyEntries);
					 for (int i = 0;i<strs_->Length;i++)
					 {
						 //如果已经存在相同记录的话就返回
						 if (strs_[i] == cbo_file->Text)
						 {
							 return;
						 }
					 }	
					 str_cbo_file_items = cbo_file->Text + ";" + str_cbo_file_items;
					 common_net::config_writePrivateProfileString("main","cbo_file_items",str_cbo_file_items,Application::StartupPath+"\\Deianeira.config");
				 }
				 catch (Exception^ ex){ }
			 }
		 }

		 //控制右键菜单的显示
private: System::Void lv_file_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_file->Items->Count==0)
			 {
				 cms_file_delete->Enabled = false;
				 cms_file_forceDelete->Enabled = false;
				 cms_file_rebootDelete->Enabled = false;
				 cms_file_rename->Enabled = false;
				 cms_file_copyTo->Enabled = false;
				 cms_file_copy1->Enabled = false;
				 cms_file_copy2->Enabled = false;
				 cms_file_snap->Enabled = false;
				 cms_file_view->Enabled = false;
				 cms_file_sigverif->Enabled = false;
				 cms_file_sigverifAll->Enabled = false;
				 cms_file_md5->Enabled = false;
				 cms_file_md52->Enabled = false;
				 cms_file_onlineFind->Enabled = false;
				 cms_file_onlineAnalysis->Enabled = false; 
				 cms_file_explorer->Enabled = false;
				 cms_file_showProperty->Enabled = false;
				 cms_file_export->Enabled = false;				 
			 }
			 else if(lv_file->SelectedItems->Count==0)
			 {
				 cms_file_delete->Enabled = false;
				 cms_file_forceDelete->Enabled = false;
				 cms_file_rebootDelete->Enabled = false;
				 cms_file_rename->Enabled = false;
				 cms_file_copyTo->Enabled = false;
				 cms_file_copy1->Enabled = false;
				 cms_file_copy2->Enabled = false;
				 cms_file_snap->Enabled = false;
				 cms_file_view->Enabled = false;
				 cms_file_sigverif->Enabled = false;
				 cms_file_sigverifAll->Enabled = true;
				 cms_file_md5->Enabled = false;
				 cms_file_md52->Enabled = false;
				 cms_file_onlineFind->Enabled = false;
				 cms_file_onlineAnalysis->Enabled = true; 
				 cms_file_explorer->Enabled = false;
				 cms_file_showProperty->Enabled = false;
				 cms_file_export->Enabled = false;
			 }
			 else
			 {
				 cms_file_delete->Enabled = true;
				 
				 cms_file_rename->Enabled = true;
				 cms_file_copyTo->Enabled = true;
				 cms_file_copy1->Enabled = true;
				 cms_file_copy2->Enabled = true;
				 
				 cms_file_sigverifAll->Enabled = true;

				 if (lv_file->SelectedItems[0]->SubItems[2]->Text == "文件夹")
				 {
					 cms_file_snap->Enabled = true;
					 cms_file_view->Enabled = false;
					 cms_file_forceDelete->Enabled = false;
					 cms_file_md52->Enabled = false;
					 cms_file_onlineFind->Enabled = false;
				 }
				 else
				 {			 
					 //
					 cms_file_snap->Enabled = false;
					 //如果选中的文件为PE文件的话，就使能按钮
					 if (common_isPEFile(common_net::common_stringToHGlobalUni(lv_file->SelectedItems[0]->Tag->ToString())))
					 {
						 cms_file_view->Enabled = true;
					 }
					 else
					 {
						 //不是的话就变灰
						 cms_file_view->Enabled = false;
					 }

					 cms_file_forceDelete->Enabled = true;			 
					 cms_file_md52->Enabled = true;
					 cms_file_onlineFind->Enabled = true;
				 }

				 cms_file_rebootDelete->Enabled = true;
				 cms_file_sigverif->Enabled = true;
				 cms_file_md5->Enabled = true;
				 cms_file_onlineAnalysis->Enabled = true; 
				 cms_file_explorer->Enabled = true;
				 cms_file_showProperty->Enabled = true;
				 cms_file_export->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_file_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 1)
				 {
					 //数字排序
					 lv_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 3 || e->Column == 4)
				 {
					 //时间排序
					 lv_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else
				 {
					 //字符串排序
					 lv_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 1)
				 {
					 //数字排序
					 lv_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else if(e->Column == 3 || e->Column == 4)
				 {
					 //时间排序
					 lv_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else
				 {
					 //字符串排序
					 lv_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_file_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_file->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_file);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_file_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_file_get_current_file_directory(tp_file_str_currentDir);
		 }

		 //查看锁定情况
private: System::Void cms_file_unlockView_Click(System::Object^  sender, System::EventArgs^  e) {
			 //ListViewItem^ item_ = lv_file->SelectedItems[0];

			 FileUnlockViewForm^ fileUnlockViewForm = gcnew FileUnlockViewForm(hDriver,"\\WINDOWS\\system32");
			 fileUnlockViewForm->ShowDialog();
		 }

		 //删除
private: System::Void cms_file_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 ListViewItem^ item_ = lv_file->SelectedItems[0];
				 if (item_->SubItems[2]->Text == "文件夹")
				 {
					 FileSystem::DeleteDirectory((String^)item_->Tag, UIOption::AllDialogs,RecycleOption::DeletePermanently,UICancelOption::ThrowException);
					 //Directory::Delete((String^)item_->Tag,true);
				 }
				 else
				 {
					 File::Delete((String^)item_->Tag);
				 }

				 item_->Remove();
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message);}
		 }

		 //强制删除
private: System::Void cms_file_forceDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 LPTSTR lpFilePath = common_net::common_stringToHGlobalUni("\\??\\" + (String^)item_->Tag);

			 bRet = DeviceIoControl(hDriver, IOCTL_FILE_DELETE, lpFilePath, wcslen(lpFilePath)*sizeof(WCHAR), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("删除失败！");
				 return;
			 }

			 item_->Remove();
		 }

private: System::Void lv_file_forceDelete_func(String^ str_dir)
		 {
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dir= Directory::GetDirectories(str_dir);
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);

				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 DWORD dwRet = 0;
					 LPTSTR lpFilePath = common_net::common_stringToHGlobalUni("\\??\\" + str_);
					 DeviceIoControl(hDriver, IOCTL_FILE_DELETE, lpFilePath, wcslen(lpFilePath)*sizeof(WCHAR), NULL, 0, &dwRet, NULL);
				 }		 

				 //遍历当前目录下的子目录
				 for each (String^ str_ in strs_dir)
				 {
					 lv_file_rebootDelete_func(str_);
					 Directory::Delete(str_);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

private: System::Void lv_file_rebootDelete_func(String^ str_dir)
		 {
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dir= Directory::GetDirectories(str_dir);
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);

				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 MoveFileEx(common_net::common_stringToHGlobalUni(str_),NULL,MOVEFILE_DELAY_UNTIL_REBOOT);
				 }		 

				 //遍历当前目录下的子目录
				 for each (String^ str_ in strs_dir)
				 {
					 lv_file_rebootDelete_func(str_);		
					 MoveFileEx(common_net::common_stringToHGlobalUni(str_),NULL,MOVEFILE_DELAY_UNTIL_REBOOT);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //重启删除
private: System::Void cms_file_rebootDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];

			 if (item_->SubItems[2]->Text == "文件夹")
			 {
				 //重启删除目录的时候，只能目录里面没有文件
				 if (Directory::GetFiles(item_->Tag->ToString())->Length > 0 || Directory::GetDirectories(item_->Tag->ToString())->Length > 0 )
				 {
					 if (MessageBox::Show("目录不为空，确定要删除？","操作提示",MessageBoxButtons::YesNo,MessageBoxIcon::Information) == System::Windows::Forms::DialogResult::Yes)
					 {
						 lv_file_rebootDelete_func(item_->Tag->ToString());
						 MoveFileEx(common_net::common_stringToHGlobalUni(item_->Tag->ToString()),NULL,MOVEFILE_DELAY_UNTIL_REBOOT);
					 }	
				 }
			 }		 
			 else
			 {
				 /*
			     If dwFlags specifies MOVEFILE_DELAY_UNTIL_REBOOT and lpNewFileName is NULL, 
			     MoveFileEx registers the lpExistingFileName file to be deleted when the system restarts. 
			     If lpExistingFileName refers to a directory, the system removes the directory at restart only if the directory is empty.
			     */
				 if(MoveFileEx(common_net::common_stringToHGlobalUni((String^)item_->Tag),NULL,MOVEFILE_DELAY_UNTIL_REBOOT))
				 {
					 MessageBox::Show("添加重启删除成功！");
				 }
				 else
				 {
					 MessageBox::Show("添加重启删除失败！");
				 }
			 }
		 }

		 //重命名
private: System::Void cms_file_rename_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];

			 FileRenameForm^ fileRenameForm = gcnew FileRenameForm(item_);
			 fileRenameForm->ShowDialog(); 
		 }

		 //复制到
private: System::Void cms_file_copyTo_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 FBD->ShowNewFolderButton = true;
			 if (FBD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 if(item_->SubItems[2]->Text == "文件夹")
				 {
					 FileSystem::CopyDirectory(item_->Tag->ToString(),FBD->SelectedPath,UIOption::AllDialogs,UICancelOption::DoNothing);
				 }
				 else
				 {
					 FileSystem::CopyFile(item_->Tag->ToString(),FBD->SelectedPath,UIOption::AllDialogs,UICancelOption::DoNothing);
				 }
			 }
		 }

		 //
private: System::Void cms_file_snap_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 //
			 tp_file_str_snapDir = item_->Tag->ToString();
			 tp_file_bl_toSnap = true;

			 tc_main->SelectedIndex = 11;
			 tc_snap->SelectedIndex = 0;

			 //
			 lv_snap_file_show(tp_file_str_snapDir);
			 //重新赋值
			 tp_file_bl_toSnap = false;
		 }

		 //输入输出表查看
private: System::Void cms_file_view_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];

			 tp_file_str_tableFile = item_->Tag->ToString();
			 tp_file_bl_toTable= true;

			 tc_main->SelectedIndex = 12;
			 tc_other->SelectedIndex = 0;

			 cms_other_table_open_Click(sender,e);

			 //重新赋值
			 tp_file_bl_toTable = false;
		 }

		 //复制
private: System::Void cms_file_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 //复制到剪切板
			 Clipboard::SetDataObject(item_->SubItems[0]->Text, true);
		 }

		 //复制
private: System::Void cms_file_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 //复制到剪切板
			 Clipboard::SetDataObject((String^)item_->Tag, true);
		 }

		 //验证
private: System::Void cms_file_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];

			 //如果是文件夹就跳转到数字签名验证面板
			 if (item_->SubItems[2]->Text == "文件夹")
			 {
				 if (MessageBox::Show("此为文件夹，必须转到对应面板才能完成数字签名检测，是还是否？","操作提示",MessageBoxButtons::YesNo,MessageBoxIcon::Information) == System::Windows::Forms::DialogResult::Yes)
				 {
					 tp_file_str_sigverifDir = item_->Tag->ToString();
					 tp_file_bl_toSigverif = true;

					 tc_main->SelectedIndex = 12;
					 tc_other->SelectedIndex = 4;
				 }		 
			 }
			 else
			 {
				 if (sigverif_check(common_net::common_stringToHGlobalUni((String^)item_->Tag)))
				 {
					 MessageBox::Show("此文件已签名！");
				 }
				 else
				 {
					 MessageBox::Show("此文件没有签名！");
				 }
			 }	 
		 }

		 //
private: System::Void thread_lv_file_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_file->Items)
			 {
				 //如果是文件夹得话就跳过
				 if (item->SubItems[2]->Text == "文件夹")
				 {
					 lst_item_default->Add(item);
					 continue;
				 }
				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + (String^)item->Tag + "]";
				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni((String^)item->Tag)))
				 {
					 lst_item_red->Add(item);
				 }
				 else
					 if(item->ForeColor==Color::Blue)
					 {
						 lst_item_blue->Add(item);
					 }
					 else
					 {
						 lst_item_default->Add(item);			
					 }
			 }

			 lv_file->BeginUpdate();
			 int index=0;

			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_file->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_file->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_file->Items[index] = item_;
				 index++;
			 }

			 lv_file->EndUpdate();

			 tsp_lbl_msg->Text = nullptr;

			 tc_main->Enabled = true;
			 lbl_quit->Visible = false;
		 }

		 //验证全部
private: System::Void cms_file_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 tc_main->Enabled = false;
			 lbl_quit->Visible = true;

			 //开启线程验证
			 thread_sigverif= gcnew Thread(gcnew ThreadStart(this,&Form1::thread_lv_file_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //md5
private: System::Void cms_file_md5_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 ListViewItem^ item_ = lv_file->SelectedItems[0];

				 //如果是文件夹就跳转到数字签名验证面板
				 if (item_->SubItems[2]->Text == "文件夹")
				 {
					 if (MessageBox::Show("此为文件夹，必须转到对应面板才能完成MD5检测，是还是否？","操作提示",MessageBoxButtons::YesNo,MessageBoxIcon::Information) == System::Windows::Forms::DialogResult::Yes)
					 {
						 tp_file_str_md5Dir = item_->Tag->ToString();
						 tp_file_bl_toMD5 = true;

						 tc_main->SelectedIndex = 12;
						 tc_other->SelectedIndex = 1;
					 }		 
				 }
				 else
				 {			 
					 String^ str_md5 = common_net::common_getFileMD5((String^)item_->Tag);
					 MessageBox::Show(str_md5);
				 }
				 
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }	 
		 }

		 //md5，黏贴
private: System::Void cms_file_md52_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 ListViewItem^ item_ = lv_file->SelectedItems[0];
				 String^ str_md5 = common_net::common_getFileMD5((String^)item_->Tag);
				 //复制到剪切板
				 Clipboard::SetDataObject(str_md5, true);

				 MessageBox::Show("已复制到剪切板！");
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }	 	 
		 }

		 //在线查找
private: System::Void cms_file_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 common_net::common_onlineFind((String^)item_->Tag);
		 }

		 //在线分析
private: System::Void cms_file_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }
		 
		 //定位
private: System::Void cms_file_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 common_explorerFile(common_net::common_stringToHGlobalAnsi((String^)item_->Tag));
		 }

		 //属性
private: System::Void cms_file_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_file->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni((String^)item_->Tag));
		 }

		 //导出
private: System::Void cms_file_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_file);
		 }

		 //刷新
private: System::Void cms_tv_file_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;
			 bool isExpanded = false;

			 if (tn_->Level==0)
			 {
				 lv_file_show();
			 }
			 else
			 {
				 if (tn_->IsExpanded)
				 {
					 isExpanded = true;
				 }

				 //清空原有的记录
				 tn_->Nodes->Clear();
				 //重新获得所有子节点
				 lv_file_get_all_subNode(tn_->Tag->ToString(), tn_);

				 if (isExpanded)
				 {
					 tn_->Expand();
				 }	
			 }	  
		 }

		 //删除
private: System::Void cms_tv_file_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;

			 try
			 {
				 FileSystem::DeleteDirectory(tn_->Tag->ToString(), UIOption::AllDialogs,RecycleOption::DeletePermanently,UICancelOption::ThrowException);

				 tn_->Remove();
			 }
			 catch(Exception^ ex){ }	 
		 }

		 //强制删除
private: System::Void cms_tv_file_forceDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;

			 lv_file_forceDelete_func(tn_->Tag->ToString());
		 }

		 //添加到重启删除
private: System::Void cms_tv_file_rebootDelete_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;

			 //重启删除目录的时候，只能目录里面没有文件
			 lv_file_rebootDelete_func(tn_->Tag->ToString());
			 MoveFileEx(common_net::common_stringToHGlobalUni(tn_->Tag->ToString()),NULL,MOVEFILE_DELAY_UNTIL_REBOOT);
		 }

		 //重命名
private: System::Void cms_tv_file_rename_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;

			 FileRenameForm^ fileRenameForm = gcnew FileRenameForm(tn_);
			 fileRenameForm->ShowDialog();
		 }

		 //拷贝到
private: System::Void cms_tv_file_copyTo_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;
			 FBD->ShowNewFolderButton = true;
			 if (FBD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 FileSystem::CopyDirectory(tn_->Tag->ToString(),FBD->SelectedPath,UIOption::AllDialogs,UICancelOption::DoNothing);
			 }
		 }

		 //
private: System::Void cms_tv_file_snap_Click(System::Object^  sender, System::EventArgs^  e) {
			 //		 			
			 TreeNode^ tn_ = tv_file->SelectedNode;
			 //
			 tp_file_str_snapDir = tn_->Tag->ToString();
			 tp_file_bl_toSnap = true;

			 tc_main->SelectedIndex = 11;
			 tc_snap->SelectedIndex = 0;

			 //
			 lv_snap_file_show(tp_file_str_snapDir);
			 //重新赋值
			 tp_file_bl_toSnap = false;
		 }

		 //复制1
private: System::Void cms_tv_file_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;
			 //复制到剪切板
			 Clipboard::SetDataObject(tn_->Text, true);
		 }

		 //复制2
private: System::Void cms_tv_file_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;
			 //复制到剪切板
			 Clipboard::SetDataObject(tn_->Tag->ToString(), true);
		 }

		 //计算md5
private: System::Void cms_tv_file_md5_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;
			 tp_file_str_md5Dir = tn_->Tag->ToString();
			 tp_file_bl_toMD5 = true;

			 tc_main->SelectedIndex = 12;
			 tc_other->SelectedIndex = 1;
		 }

		 //校验数字签名
private: System::Void cms_tv_file_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_ = tv_file->SelectedNode;
			 tp_file_str_sigverifDir = tn_->Tag->ToString();
			 tp_file_bl_toSigverif = true;

			 tc_main->SelectedIndex = 12;
			 tc_other->SelectedIndex = 4;
		 }
#pragma endregion tp_file

	   //注册表
#pragma region tp_reg
		 //
		 static RegistryKey^ tp_reg_rk_currentKey = nullptr;
		 //
		 static String^ tp_reg_str_curEditItemText = nullptr;
		 static int tp_reg_int_newType = -1;
		 //
		 static RegistryKey^ tp_reg_rk_curEditItemTag = nullptr;
		 static bool tp_reg_bl_isNewItem = false;
		 //
		 static String^ tp_reg_str_snapKeyDir = nullptr;
		 static bool tp_reg_bl_toSnap = false;
		
		 //获取当前节点下的所有子节点
private: System::Void lv_reg_get_all_subNode(RegistryKey^ rk_, TreeNode^ tn_)
		 {
			 try
			 {
				 //获得所有子键
				 array<String^>^ strs_subKey = lv_reg_get_all_subKey(rk_);
				 //遍历
				 for each (String^ str_ in strs_subKey)
				 {
					 TreeNode^ tn_sub = gcnew TreeNode(str_,1,2);
					 //
					 try
					 {
						 RegistryKey^ rk_sub = rk_->OpenSubKey(str_,true);
						 //设置tag标志
						 tn_sub->Tag = rk_sub;
						 //
						 tn_->Nodes->Add(tn_sub);
					 }
					 catch (Exception^ ex)
					 {
						 //设置tag标志
						 tn_sub->Tag = nullptr;
						 //
						 tn_->Nodes->Add(tn_sub);
					 }		 
				 }
			 }
			 catch (Exception^ ex){ };
		 }

		 //递归复制
private: System::Void lv_reg_get_all_subNode2(RegistryKey^ rk_, TreeNode^ tn_)
		 {
			 try
			 {
				 //获得所有数值
				 array<String^>^ strs_value = lv_reg_get_all_value(rk_);
				 //获得所有子键
				 array<String^>^ strs_subKey = lv_reg_get_all_subKey(rk_);

				 //
				 RegistryKey^ rk2_ = (RegistryKey^)tn_->Tag;

				 //首先复制数值
				 for each(String^ str_ in strs_value)
				 {
					 try
					 {
						 //
						 rk2_->SetValue(str_,rk_->GetValue(str_),rk_->GetValueKind(str_));
					 }
					 catch(Exception^ ex){ }			 
				 }

				 //再次复制子健
				 for each (String^ str_ in strs_subKey)
				 {
					 TreeNode^ tn_sub = gcnew TreeNode(str_,1,2);
					 //
					 try
					 {
						 //
						 RegistryKey^ rk_sub = rk2_->CreateSubKey(str_,RegistryKeyPermissionCheck::ReadWriteSubTree);
						 //
						 RegistryKey^ rk_sub2 = rk_->OpenSubKey(str_,true);
						 //设置tag标志
						 tn_sub->Tag = rk_sub;
						 //
						 tn_->Nodes->Add(tn_sub);
						 //
						 lv_reg_get_all_subNode2(rk_sub2,tn_sub);
					 }
					 catch (Exception^ ex){ }			
				 }
			 }
			 catch (Exception^ ex){ };
		 }

		 //
private: List<String^>^ lv_reg_get_all_subKey_hive(struct hive *hdesc, char *path, int vofs, int type)
		 {
			 //
			 List<String^>^ lst_key = gcnew List<String^>();

			 struct ex_data ex;
			 int count,countri = 0;

			 //
			 int nkofs = trav_path(hdesc, vofs, path, 0);

			 //
			 if(!nkofs)
			 {
				 return nullptr;
			 }

			 //
			 nkofs += 4;

			 //
			 struct nk_key *key = (struct nk_key *)(hdesc->buffer + nkofs);

			 //
			 if (key->id != 0x6b6e) 
			 {
				 return nullptr;
			 }

			 //
			 if (key->no_subkeys) 
			 {
				 while ((ex_next_n(hdesc, nkofs, &count, &countri, &ex) > 0)) 
				 {			
					 //添加
					 lst_key->Add(gcnew String(ex.name));
					 //
					 FREE(ex.name);
				 }
			 }

			 //
			 return nullptr;
		 }

		 //
private: array<String^>^ lv_reg_get_all_value_hive(struct hive *hdesc, int nkofs, char *path)
		 {    
			 char string[SZ_MAX+1];

			 //
			 int type = get_val_type(hdesc, nkofs, path);

			 //
			 if (type == -1) 
			 {
				 return nullptr;
			 }

			 //
			 int len = get_val_len(hdesc, nkofs, path);

			 //
			 if (!len) 
			 {
				 return nullptr;
			 }

			 //
			 void *data = (void *)get_val_data(hdesc, nkofs, path, 0);

			 //
			 if (!data) 
			 {
				 return nullptr;
			 }

			 //
			 switch (type)
			 {
				 //
			 case REG_SZ:
			 case REG_EXPAND_SZ:
			 case REG_MULTI_SZ:
				 {
					 //
					 cheap_uni2ascii((char *)data,string,len);
					 //
					 for (int i = 0; i < (len>>1)-1; i++)
					 {
						 if (string[i] == 0) 
							 string[i] = '\n';
						 if (type == REG_SZ)
							 break;
					 }
					 //
					 puts(string);
				 }
				 break;
				 //
			 case REG_DWORD:
				 {
					 printf("0x%08x",*(unsigned short *)data);
				 }
				 break;
			 case REG_BINARY:
				 {
					 hexdump((char *)data, 0, len, 1);
				 }		 
				 //
			 default:
				 printf("Don't know how to handle type yet!\n");		 
			 }
		 }

		 //获取当前键下面的所有值
private: array<String^>^ lv_reg_get_all_value(RegistryKey^ rk_)
		 {
			 try
			 {
				 if (cms_tv_reg_hive->Checked)
				 {
					
				 }
				 else
				 {
					 return rk_->GetValueNames();
				 }			 
			 }
			 catch (Exception^ ex) { }
		 }

		 //获取当前键下面的所有子键
private: array<String^>^ lv_reg_get_all_subKey(RegistryKey^ rk_)
		 {
			 try
			 {
				 if (cms_tv_reg_hive->Checked)
				 {					 
					 //
					 struct hive* hive_ = ntreg_init_openHive(HIVE_MACHINE_SOFTWARE, HMODE_RW);
					 //
					 List<String^>^ lst_key = lv_reg_get_all_subKey_hive(hive_,"",hive_->rootofs + 4,0);
					 //
					 ntreg_init_closeHive(hive_);
				 }
				 else
				 {
					 //
					 return rk_->GetSubKeyNames();
				 }	
			 }
			 catch (Exception^ ex) { }
		 }

		 //
private: System::String^ lv_reg_get_current_value_func(RegistryValueKind rvk_){
			 //
			 switch(rvk_)
			 {
			 case RegistryValueKind::String:
				 //
				 return "REG_SZ";
				 break;
			 case RegistryValueKind::ExpandString:
				 //
				 return "REG_EXPAND_SZ";
				 break;
			 case RegistryValueKind::Binary:
				 //
				 return "REG_BINARY";
				 break;
			 case RegistryValueKind::DWord:
				 //
				 return "REG_DWORD";
				 break;
			 case RegistryValueKind::MultiString:
				 //
				 return "REG_MULTI_SZ";
				 break;
			 case RegistryValueKind::QWord:
				 //
				 return "REG_QWORD";
				 break;
			 }
		 }

		 //
private: int lv_reg_get_current_value_func2(RegistryValueKind rvk_){
			 //
			 switch(rvk_)
			 {
			 case RegistryValueKind::String:
				 //
				 return 3;
				 break;
			 case RegistryValueKind::ExpandString:
				 //
				 return 3;
				 break;
			 case RegistryValueKind::Binary:
				 //
				 return 4;
				 break;
			 case RegistryValueKind::DWord:
				 //
				 return 4;
				 break;
			 case RegistryValueKind::MultiString:
				 //
				 return 3;
				 break;
			 case RegistryValueKind::QWord:
				 //
				 return 4;
				 break;
			 }
		 }

		 //获取当前键下面的所有值
private: System::Void lv_reg_get_current_value(RegistryKey^ rk_)
		 {
			 try
			 {
				 lv_reg->Items->Clear();
				 //
				 //判断
				 if (tv_reg->SelectedNode->Tag == nullptr)
				 {
					 //
					 return;
				 }
				 //
				 array<String^>^ strs_value = lv_reg_get_all_value(rk_);
				 //
				 ListViewItem^ item_ = gcnew ListViewItem("(默认)",3);
				 //
				 item_->SubItems->AddRange(gcnew array<String^>{"REG_SZ", "(数值未设置)"});
				 //
				 item_->Tag = rk_;
				 //
				 lv_reg->Items->Add(item_);
				 //
				 for each (String^ str_ in strs_value)
				 {
					 //
					 if (String::IsNullOrEmpty(str_))
					 {
						 lv_reg->Items[0]->SubItems[2]->Text = rk_->GetValue(str_)->ToString();
					 }
					 else
					 {
						 ListViewItem^ item_ = gcnew ListViewItem(str_,lv_reg_get_current_value_func2(rk_->GetValueKind(str_)));
						 //
						 item_->Tag = rk_;
						 //
						 String^ str_value = nullptr;
						 //
						 switch(rk_->GetValueKind(str_))
						 {
						 case RegistryValueKind::Binary:
							 str_value = common_net::common_byteToString2((array<byte>^)rk_->GetValue(str_));
							 break;
						 case RegistryValueKind::MultiString:
							 for each(String^ str2_ in ((array<String^>^)rk_->GetValue(str_)))
							 {
								 str_value = str_value + str2_;
							 }
							 break;
						 case RegistryValueKind::ExpandString:
							 //
							 str_value = rk_->GetValue(str_,nullptr,RegistryValueOptions::DoNotExpandEnvironmentNames)->ToString();
							 break;						 
						 case RegistryValueKind::DWord:
							 //
							 str_value = "0x" + Convert::ToInt32(rk_->GetValue(str_)->ToString()).ToString("x8");
							 break;
						 default:
							 str_value = rk_->GetValue(str_)->ToString();
						 }
						 //
						 item_->SubItems->AddRange(gcnew array<String^>{lv_reg_get_current_value_func(rk_->GetValueKind(str_)),str_value});
						 //
						 lv_reg->Items->Add(item_);
					 }				 
				 }		 
			 }
			 catch (Exception^ ex) { }
		 }

		 //获取根节点
private: System::Void lv_reg_get_root(TreeNode^ tn_,String^ str_,RegistryKey^ rk_)
		 {
			 tn_ = gcnew TreeNode(str_,1,2);
			 tn_->Tag = rk_;
			 tv_reg->Nodes[0]->Nodes->Add(tn_);
			 lv_reg_get_all_subNode(rk_, tn_);
		 }

		 //选中后
private: System::Void tv_reg_AfterSelect(System::Object^  sender, System::Windows::Forms::TreeViewEventArgs^  e) {
			 try
			 {
				 //记录
				 tp_reg_rk_currentKey = (RegistryKey^)e->Node->Tag;
				 lv_reg_get_current_value((RegistryKey^)e->Node->Tag);
			 }
			 catch(Exception^ ex) { }
		 }

		 //扩展前
private: System::Void tv_reg_BeforeExpand(System::Object^  sender, System::Windows::Forms::TreeViewCancelEventArgs^  e) {
			 try
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 //清空原有的记录
					 tn_->Nodes->Clear();
					 //
					 lv_reg_get_all_subNode((RegistryKey^)tn_->Tag, tn_);
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //打印
private: System::Void lv_reg_show()
		 {
			 //清空
			 tv_reg->Nodes->Clear();

			 TreeNode^ tn_ = gcnew TreeNode("我的电脑",0,0);
			 tv_reg->Nodes->Add(tn_);

			 //枚举HKEY_CLASSES_ROOT
			 lv_reg_get_root(tn_, "HKEY_CLASSES_ROOT",Registry::ClassesRoot);

			 //枚举HKEY_CURRENT_USER
			 lv_reg_get_root(tn_, "HKEY_CURRENT_USER", Registry::CurrentUser);

			 //枚举HKEY_LOCAL_MACHINE
			 lv_reg_get_root(tn_, "HKEY_LOCAL_MACHINE", Registry::LocalMachine);

			 //枚举HKEY_USERS
			 lv_reg_get_root(tn_, "HKEY_USERS", Registry::Users);

			 //枚举HKEY_CURRENT_CONFIG
			 lv_reg_get_root(tn_, "HKEY_CURRENT_CONFIG", Registry::CurrentConfig);

			 tv_reg->Nodes[0]->Expand();

			 //从配置文件中加载信息
			 try
			 {
				 String^ str_cbo_reg_items = common_net::config_getPrivateProfileString("main","cbo_reg_items",Application::StartupPath+"\\Deianeira.config");
				 array<String^>^ strs_ = str_cbo_reg_items->Split(gcnew array<String^>{";"},StringSplitOptions::RemoveEmptyEntries);
				 for (int i = 0;i<strs_->Length;i++)
				 {
					 //显示名称
					 cbo_reg->Items->Add(strs_[i]);
				 }	 
			 }
			 catch (Exception^ ex){ }

			 //往cbo_reg添加常用想
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellExecuteHooks");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\IniFileMapping");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\IPSec\\Policy\\Local");
			 cbo_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace");

			 cbo_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run");
			 cbo_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer");
			 cbo_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows");
			 cbo_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon");
			 cbo_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer");
		 }

private: System::Void tv_reg_findNode_func(TreeNode^ tn_,String^ str_)
		 {
			 try
			 {
				 //遍历数组
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 if (tn_2->Tag->ToString() == str_)
					 {
						 tn_2->Expand();
						 tv_reg->SelectedNode = tn_2;
						 break;
					 }

					 tv_file_findNode_func(tn_2,str_);
				 }	 
			 }
			 catch(Exception^ ex) { }
		 }

private: System::Void tv_reg_findNode_func2(TreeNode^ tn_,String^ str_)
		 {
			 try
			 {
				 //遍历数组
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 if (tn_2->Text == str_)
					 {
						 tn_2->Expand();
						 tv_reg->SelectedNode = tn_2;
						 break;
					 }

					 tv_reg_findNode_func(tn_2,str_);
				 }	 
			 }
			 catch(Exception^ ex) { }
		 }

private: System::Void tv_reg_findNode_func3(array<String^>^ strs_)
		 {
			 try
			 {
				 //
				 tv_reg->SelectedNode = tv_reg->Nodes[0];

				 for (int i =0;i<strs_->Length;i++)
				 {
					 tv_reg_findNode_func2(tv_reg->SelectedNode,strs_[i]);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //
private: System::Void cbo_reg_KeyPress(System::Object^  sender, System::Windows::Forms::KeyPressEventArgs^  e) {
			 if (e->KeyChar == (Char)13)
			 {
				  array<String^>^ strs_ = cbo_reg->Text->Split('\\');
				  //
				  tv_reg_findNode_func3(strs_);

				  //把信息写入配置文件
				  try
				  {
					  //如果是已经在列表里面的话，就不要写入配置文件了
					  for each(String^ str_ in cbo_reg->Items)
					  {
						  //如果已经存在相同记录的话就返回
						  if (str_ == cbo_reg->Text)
						  {
							  return;
						  }
					  }

					  String^ str_cbo_reg_items = common_net::config_getPrivateProfileString("main","cbo_reg_items",Application::StartupPath+"\\Deianeira.config");
					  array<String^>^ strs_ = str_cbo_reg_items->Split(gcnew array<String^>{";"},StringSplitOptions::RemoveEmptyEntries);
					  for (int i = 0;i<strs_->Length;i++)
					  {
						  //如果已经存在相同记录的话就返回
						  if (strs_[i] == cbo_reg->Text)
						  {
							  return;
						  }
					  }	
					  str_cbo_reg_items = cbo_reg->Text + ";" + str_cbo_reg_items;
					  common_net::config_writePrivateProfileString("main","cbo_reg_items",str_cbo_reg_items,Application::StartupPath+"\\Deianeira.config");
				  }
				  catch (Exception^ ex){ }
			 }
		 }

		 //
private: RegistryValueKind lv_reg_AfterLabelEdit_func(ListViewItem^ item_){
			 //
			 if (item_->SubItems[1]->Text == "REG_SZ")
			 {
				 //
				 return RegistryValueKind::String;
			 }
			 //
			 if (item_->SubItems[1]->Text == "REG_BINARY")
			 {
				 //
				 return RegistryValueKind::Binary;
			 }
			 //
			 if (item_->SubItems[1]->Text == "REG_DWORD")
			 {
				 //
				 return RegistryValueKind::DWord;
			 }
			 //
			 if (item_->SubItems[1]->Text == "REG_MULTI_SZ")
			 {
				 //
				 return RegistryValueKind::MultiString;
			 }
			 //
			 if (item_->SubItems[1]->Text == "REG_EXPAND_SZ")
			 {
				 //
				 return RegistryValueKind::ExpandString;
			 }
		 }

		 //
private: System::Void lv_reg_AfterLabelEdit(System::Object^  sender, System::Windows::Forms::LabelEditEventArgs^  e) {
			 try
			 {
				 //没有改动
				 if (e->Label == nullptr)
				 {
					 //
					 return;
				 }
				 //不能为空
				 if (e->Label == "")
				 {
					 String^ str_err = String::Format("注册表编辑器无法重命名 {0} 。指定的值名为空。请键入其他名称，再试一次。",tp_reg_str_curEditItemText);
					 MessageBox::Show(str_err,"重命名值时产生错误",MessageBoxButtons::OK,MessageBoxIcon::Error);
					 e->CancelEdit = true;
					 return;
				 }
				 //项重复
				 if (cms_reg_new_string_func(e->Label))
				 {
					 String^ str_err = String::Format("注册表编辑器无法重命名 {0} 。指定的值名已经存在。键入另一个名称后再试。",lv_reg->Items[e->Item]->Text);
					 MessageBox::Show(str_err,"重命名值时产生错误",MessageBoxButtons::OK,MessageBoxIcon::Error);
					 e->CancelEdit = true;
					 return;
				 }
				 //创建新的，删除旧的
				 RegistryKey^ rk_ = (RegistryKey^)lv_reg->Items[e->Item]->Tag;
				 //
				 rk_->SetValue(e->Label,rk_->GetValue(tp_reg_str_curEditItemText),rk_->GetValueKind(tp_reg_str_curEditItemText));
				 //
				 rk_->DeleteValue(tp_reg_str_curEditItemText);
			 }
			 catch(Exception^ ex){ }
		 }

		 //
private: System::Void lv_reg_BeforeLabelEdit(System::Object^  sender, System::Windows::Forms::LabelEditEventArgs^  e) {
			 //
			 tp_reg_str_curEditItemText = lv_reg->Items[e->Item]->Text;
			 //
			 if (tp_reg_int_newType != -1)
			 {
				 //
				 RegistryKey^ rk_ = (RegistryKey^)lv_reg->Items[0]->Tag;
				 //
				 switch(tp_reg_int_newType)
				 {					 
				 case REG_SZ:
					 //
					 rk_->SetValue(tp_reg_str_curEditItemText,lv_reg->Items[e->Item]->SubItems[2]->Text,lv_reg_AfterLabelEdit_func(lv_reg->Items[e->Item]));
					 break;
				 case REG_BINARY:
					 {
						 //
						 rk_->SetValue(tp_reg_str_curEditItemText,gcnew array<Byte>{ },lv_reg_AfterLabelEdit_func(lv_reg->Items[e->Item]));
					 }					 
					 break;
				 case REG_DWORD:
					 //
					 rk_->SetValue(tp_reg_str_curEditItemText,0,lv_reg_AfterLabelEdit_func(lv_reg->Items[e->Item]));
					 break;
				 case REG_MULTI_SZ:
					 {
						 //
						 rk_->SetValue(tp_reg_str_curEditItemText,gcnew array<String^>{ },lv_reg_AfterLabelEdit_func(lv_reg->Items[e->Item]));
					 }
					 break;
				 case REG_EXPAND_SZ:
					 //
					 rk_->SetValue(tp_reg_str_curEditItemText,lv_reg->Items[e->Item]->SubItems[2]->Text,lv_reg_AfterLabelEdit_func(lv_reg->Items[e->Item]));
					 break;
				 }
				 //
				 tp_reg_int_newType = -1;
			 }
		 }

		 //
private: System::Void tv_reg_BeforeLabelEdit(System::Object^  sender, System::Windows::Forms::NodeLabelEditEventArgs^  e) {
			 //
			 if (tp_reg_bl_isNewItem)
			 {
				 //
				 RegistryKey^ rk_ = ((RegistryKey^)tv_reg->SelectedNode->Tag)->CreateSubKey(e->Node->Text,RegistryKeyPermissionCheck::ReadWriteSubTree);
				 //
				 e->Node->Tag = rk_;
				 //
				 tp_reg_bl_isNewItem = false;
				 //		 			
				 tv_reg->SelectedNode = e->Node;
			 }	
			 //
			 tp_reg_rk_curEditItemTag = (RegistryKey^)tv_reg->SelectedNode->Parent->Tag;		 
		 }

		 //
private: System::Void tv_reg_AfterLabelEdit(System::Object^  sender, System::Windows::Forms::NodeLabelEditEventArgs^  e) {
			 //
			 try
			 {
				 //没有改动
				 if (e->Label == nullptr)
				 {
					 //
					 return;
				 }
				 //不能为空
				 if (e->Label == "")
				 {
					 String^ str_err = String::Format("注册表编辑器无法重命名 {0} 。指定的项名为空。请键入其他名称，再试一次。",e->Node->Text);
					 MessageBox::Show(str_err,"重命名项时产生错误",MessageBoxButtons::OK,MessageBoxIcon::Error);
					 e->CancelEdit = true;
					 return;
				 }
				 //项重复
				 if (cms_reg_new_item_func(e->Label,e->Node->Parent))
				 {
					 String^ str_err = String::Format("注册表编辑器无法重命名 {0} 。指定的项名已经存在。键入另一个名称后再试。",e->Node->Text);
					 MessageBox::Show(str_err,"重命名项时产生错误",MessageBoxButtons::OK,MessageBoxIcon::Error);
					 e->CancelEdit = true;
					 return;
				 }
				 //创建新的，删除旧的
				 RegistryKey^ rk_ = tp_reg_rk_curEditItemTag;
				 //
				 RegistryKey^ rk_sub = rk_->CreateSubKey(e->Label);
				 //
				 e->Node->Nodes->Clear();
				 //
				 RegistryKey^ rk2_ = (RegistryKey^)e->Node->Tag;
				 //
				 e->Node->Tag = rk_sub;
				 //
				 lv_reg_get_all_subNode2(rk2_,e->Node);
				 //
				 rk_->DeleteSubKeyTree(e->Node->Text);
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); e->CancelEdit = true; }		 		 
		 }

		 //控制右键菜单的显示
private: System::Void lv_reg_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (tv_reg->SelectedNode->Level == 0)
			 {
				 cms_reg_change->Enabled = false;
				 cms_reg_change_bin->Enabled = false;
				 cms_reg_delete->Enabled = false;
				 cms_reg_rename->Enabled = false;
				 cms_reg_new->Enabled = false;
				 //
				 return;
			 }
			 //
			 if (tv_reg->SelectedNode->Tag == nullptr)
			 {
				 cms_reg_new->Enabled = false;
			 }
			 else
			 {
				 cms_reg_new->Enabled = true;
			 }
			 //
			 if (lv_reg->Items->Count==0)
			 {
				 cms_reg_change->Enabled = false;
				 cms_reg_change_bin->Enabled = false;
				 cms_reg_delete->Enabled = false;
				 cms_reg_rename->Enabled = false;		
			 }
			 else if (lv_reg->SelectedItems->Count==0)
			 {
				 cms_reg_change->Enabled = false;
				 cms_reg_change_bin->Enabled = false;
				 cms_reg_delete->Enabled = false;
				 cms_reg_rename->Enabled = false;
			 }
			 else
			 {
				 cms_reg_change->Enabled = true;
				 cms_reg_change_bin->Enabled = true;
				 cms_reg_delete->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_reg_MouseDoubleClick(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 //
			 cms_reg_change_Click(sender,e);
		 }

		 //
private: System::Void lv_reg_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_reg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_reg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_reg_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_reg->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_reg);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_reg_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 //
				 lv_reg_get_current_value(tp_reg_rk_currentKey);
			 }
			 catch(Exception^ ex) { }
		 }

		 //修改
private: System::Void cms_reg_change_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_reg->SelectedItems[0];
			 //
			 if (item_->SubItems[1]->Text == "REG_SZ" || item_->SubItems[1]->Text == "REG_EXPAND_SZ")
			 {
				 //
				 reg_string_change_form^ f = gcnew reg_string_change_form(item_);
				 f->ShowDialog();
			 }
			 else if (item_->SubItems[1]->Text == "REG_DWORD")
			 {
				 //
				 reg_dword_change_form^ f = gcnew reg_dword_change_form(item_);
				 f->ShowDialog();
			 }
			 else if (item_->SubItems[1]->Text == "REG_MULTI_SZ")
			 {
				 //
				 reg_multi_change_form^ f = gcnew reg_multi_change_form(item_);
				 f->ShowDialog();
			 }
		 }

		 //修改 二进制
private: System::Void cms_reg_change_bin_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //删除
private: System::Void cms_reg_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 //
				 if (MessageBox::Show("确实要删除此数值吗？","确认数值删除",MessageBoxButtons::YesNo,MessageBoxIcon::Warning,MessageBoxDefaultButton::Button1)\
					 == System::Windows::Forms::DialogResult::Yes)
				 {
					 //
					 ListViewItem^ item_ = lv_reg->SelectedItems[0];
					 //
					 RegistryKey^ rk_ = (RegistryKey^)item_->Tag;
					 //
					 rk_->DeleteValue((item_->Text == "(默认)" ? "" : item_->Text));
					 //
					 if (item_->Text == "(默认)")
					 {
						 //
						 item_->SubItems[2]->Text = "(数值未设置)";
					 }
					 else
					 {
						 //
						 item_->Remove();
					 }	
				 }	 	 
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }		 
		 }

		 //重命名
private: System::Void cms_reg_rename_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_reg->SelectedItems[0];
			 //
			 item_->BeginEdit();
		 }
		 
		 //检测，新建的时候
private: bool cms_reg_new_item_func(String^ str_,TreeNode^ tn_){
			 //
			 for each(TreeNode^ tn2_ in tn_->Nodes)
			 {
				 if (str_ == tn2_->Text)
				 {
					 return true;
				 }
			 }
			 //
			 return false;
		 }

		 //
private: System::String^ cms_reg_new_item_func2(TreeNode^ tn_){
			 //
			 int index = 1;
			 //
			 String^ str_ = "新项 #" + index.ToString();
			 //
			 while (cms_reg_new_item_func(str_,tn_))
			 {
				 //
				 index ++;
				 //
				 str_ = "新项 #" + index.ToString();
			 }
			 //
			 return str_;
		 }

		 //
private: System::Void cms_reg_new_item_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 TreeNode^ tn_ = gcnew TreeNode(cms_reg_new_item_func2(tv_reg->SelectedNode),1,2);
			 //
			 tv_reg->SelectedNode->Nodes->Add(tn_);
			 //
			 if (!tv_reg->SelectedNode->IsExpanded)
			 {
				 tv_reg->SelectedNode->Expand();
			 }
			 //
			 tp_reg_bl_isNewItem = true;
			 //
			 tn_->BeginEdit();
		 }

		 //检测，新建的时候
private: bool cms_reg_new_string_func(String^ str_){
			 //
			 for each(ListViewItem^ item_ in lv_reg->Items)
			 {
				 if (str_ == item_->Text)
				 {
					 return true;
				 }
			 }
			 //
			 return false;
		 }

		 //
private: System::String^ cms_reg_new_string_func2(){
			 //
			 int index = 1;
			 //
			 String^ str_ = "新值 #" + index.ToString();
			 //
			 while (cms_reg_new_string_func(str_))
			 {
				 //
				 index ++;
				 //
				 str_ = "新值 #" + index.ToString();
			 }
			 //
			 return str_;
		 }

		 //
private: System::Void cms_reg_new_string_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = gcnew ListViewItem(cms_reg_new_string_func2(),3);
			 //
			 item_->SubItems->AddRange(gcnew array<String^>{"REG_SZ", ""});
			 //
			 lv_reg->Items->Add(item_);
			 //
			 tp_reg_int_newType = REG_SZ;
			 //
			 item_->BeginEdit();		 
		 }

		 //
private: System::Void cms_reg_new_binary_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = gcnew ListViewItem(cms_reg_new_string_func2(),4);
			 //
			 item_->SubItems->AddRange(gcnew array<String^>{"REG_BINARY", "(长度为零的二进位值)"});
			 //
			 lv_reg->Items->Add(item_);
			 //
			 tp_reg_int_newType = REG_BINARY;
			 //
			 item_->BeginEdit();		 
		 }

		 //
private: System::Void cms_reg_new_dword_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = gcnew ListViewItem(cms_reg_new_string_func2(),4);
			 //
			 item_->SubItems->AddRange(gcnew array<String^>{"REG_DWORD", "0x00000000"});
			 //
			 lv_reg->Items->Add(item_);
			 //
			 tp_reg_int_newType = REG_DWORD;
			 //
			 item_->BeginEdit();		 
		 }

		 //
private: System::Void cms_reg_new_multi_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = gcnew ListViewItem(cms_reg_new_string_func2(),3);
			 //
			 item_->SubItems->AddRange(gcnew array<String^>{"REG_MULTI_SZ", ""});
			 //
			 lv_reg->Items->Add(item_);
			 //
			 tp_reg_int_newType = REG_MULTI_SZ;
			 //
			 item_->BeginEdit();		 
		 }

		 //
private: System::Void cms_reg_new_expand_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = gcnew ListViewItem(cms_reg_new_string_func2(),3);
			 //
			 item_->SubItems->AddRange(gcnew array<String^>{"REG_EXPAND_SZ", ""});
			 //
			 lv_reg->Items->Add(item_);
			 //
			 tp_reg_int_newType = REG_EXPAND_SZ;
			 //
			 item_->BeginEdit();		 
		 }

		 //导出
private: System::Void cms_reg_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 common_net::common_getListViewData(lv_reg);
		 }

		 //
private: System::Void tv_reg_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 //获得鼠标位置
			 Point p = Point(e->X, e->Y); 
			 //获得treenode
			 TreeNode^ tn_ = tv_reg->GetNodeAt(p); 
			 //
			 if (tn_ == nullptr)
			 {
				 //
				 cms_tv_reg->Enabled = false;
				 return;
			 }
			 //
			 cms_tv_reg->Enabled = true;
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Right) 
			 { 		 
				 //
				 tv_reg->LabelEdit = true;

				 //选中
				 tv_reg->SelectedNode = tn_; 

				 //控制右键菜单
				 if(tn_->Level == 0)
				 {
					 cms_tv_reg_delete->Enabled = false;
					 cms_tv_reg_rename->Enabled = false;
					 cms_tv_reg_snap->Enabled = false;
					 cms_tv_reg_copy->Enabled = false;
					 cms_tv_reg_new->Enabled = false;
				 }
				 else if(tn_->Level == 1)
				 {
					 cms_tv_reg_delete->Enabled = false;
					 cms_tv_reg_rename->Enabled = false;				
					 cms_tv_reg_copy->Enabled = true;
				 }
				 else
				 {
					 cms_tv_reg_delete->Enabled = true;
					 cms_tv_reg_rename->Enabled = true;
					 cms_tv_reg_copy->Enabled = true;
				 }
				 //
				 if (tn_->Tag == nullptr)
				 {
					 cms_tv_reg_snap->Enabled = false;
					 cms_tv_reg_new->Enabled = false;
				 }
				 else
				 {
					 cms_tv_reg_snap->Enabled = true;
					 cms_tv_reg_new->Enabled = true;
				 }
			 } 
			 else
			 {
				 //
				 if (tn_->Level == 0 || tn_->Level == 1)
				 {
					 tv_reg->LabelEdit = false;
				 }
				 else
				 {
					 tv_reg->LabelEdit = true;
				 }
			 }	 
		 }

		 //
private: System::Void cms_tv_reg_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 TreeNode^ tn_ = tv_reg->SelectedNode;
			 //
			 bool isExpanded = false;

			 //
			 if (tn_->Level == 0)
			 {
				 //
				 lv_reg_show();
			 }
			 else
			 {
				 //
				 if (tn_->IsExpanded)
				 {
					 isExpanded = true;
				 }

				 //清空原有的记录
				 tn_->Nodes->Clear();
				 //重新获得所有子节点
				 lv_reg_get_all_subNode((RegistryKey^)tn_->Tag, tn_);

				 if (isExpanded)
				 {
					 tn_->Collapse();
					 tn_->Expand();
				 }	
			 }	
		 }

		 //
private: System::Void cms_tv_reg_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 try
			 {
				 //
				 if (MessageBox::Show("确实要删除这个项和所有其子项吗？","确认项删除",MessageBoxButtons::YesNo,MessageBoxIcon::Warning,MessageBoxDefaultButton::Button1)\
					 == System::Windows::Forms::DialogResult::Yes)
				 {
					 //
					 RegistryKey^ rk_ = (RegistryKey^)tv_reg->SelectedNode->Parent->Tag;
					 //
					 rk_->DeleteSubKeyTree(tv_reg->SelectedNode->Text);
					 //
					 tv_reg->SelectedNode->Remove();
				 }
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }		 
		 }

		 //
private: System::Void cms_tv_reg_rename_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 TreeNode^ tn_ = tv_reg->SelectedNode;
			 //
			 tn_->BeginEdit();
		 }

		 //
private: System::Void cms_tv_reg_find_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 reg_find_form^ f = gcnew reg_find_form();
			 f->ShowDialog();
		 }

		 //
private: System::Void cms_tv_reg_view_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //注册表快照
private: System::Void cms_tv_reg_snap_Click(System::Object^  sender, System::EventArgs^  e) {
			 //		 			
			 TreeNode^ tn_ = tv_reg->SelectedNode;
			 //
			 tp_reg_str_snapKeyDir = ((RegistryKey^)tn_->Tag)->Name;
			 tp_reg_bl_toSnap = true;

			 tc_main->SelectedIndex = 11;
			 tc_snap->SelectedIndex = 2;
		 }

		 //
private: System::Void cms_tv_reg_copy_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 TreeNode^ tn_ = tv_reg->SelectedNode;
			 //
			 if (tn_->Tag == nullptr)
			 {
				 //
				 //复制到剪切板
				 Clipboard::SetDataObject(((RegistryKey^)tn_->Parent->Tag)->Name + "\\" + tn_->Text, true);
			 }
			 else
			 {
				 //复制到剪切板
				 Clipboard::SetDataObject(((RegistryKey^)tn_->Tag)->Name, true);
			 }		 
		 }

		 //
private: System::Void cms_tv_reg_new_item_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 cms_reg_new_item_Click(sender,e);
		 }

		 //
private: System::Void cms_tv_reg_new_string_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 cms_reg_new_string_Click(sender,e);
		 }

		 //
private: System::Void cms_tv_reg_new_binary_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 cms_reg_new_binary_Click(sender,e);
		 }

		 //
private: System::Void cms_tv_reg_new_dword_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 cms_reg_new_dword_Click(sender,e);
		 }

		 //
private: System::Void cms_tv_reg_new_multi_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 cms_reg_new_multi_Click(sender,e);
		 }

		 //
private: System::Void cms_tv_reg_new_expand_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 cms_reg_new_expand_Click(sender,e);
		 }

		 //
private: System::Void cms_tv_reg_export_Click(System::Object^  sender, System::EventArgs^  e) {
		 }
#pragma endregion tp_reg

	   //窗体管理
#pragma region tp_win

		 //
		 static TreeNode^ tp_win_tn_ =  nullptr;
		 static bool tp_win_bl_isJmp = false;

		 //控制右键菜单的显示
private: System::Void tv_win_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (e->Button == System::Windows::Forms::MouseButtons::Right) 
			 { 
				 Point p = Point(e->X, e->Y); 
				 TreeNode^ tn_ = tv_win->GetNodeAt(p); 
				 tv_win->SelectedNode = tn_; 

				 //
				 if (tv_win->SelectedNode == nullptr)
				 {
					 cms_win_view->Enabled = false;
					 cms_win_destroy->Enabled = false;
					 cms_win_top->Enabled = false;
					 cms_win_quitTop->Enabled = false;
					 cms_win_show->Enabled = false;
					 cms_win_hide->Enabled = false;
					 cms_win_max->Enabled = false;
					 cms_win_min->Enabled = false;
				 }
				 else if(tp_win_bl_isJmp && (tv_win->SelectedNode->Level == 0 || tv_win->SelectedNode->Level == 1))
				 {
					 cms_win_view->Enabled = false;
					 cms_win_destroy->Enabled = false;
					 cms_win_top->Enabled = false;
					 cms_win_quitTop->Enabled = false;
					 cms_win_show->Enabled = false;
					 cms_win_hide->Enabled = false;
					 cms_win_max->Enabled = false;
					 cms_win_min->Enabled = false;
				 }
				 else
				 {
					 cms_win_view->Enabled = true;
					 cms_win_destroy->Enabled = true;

					 //
					 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);

					 //如果窗体置顶
					 if((GetWindowLong(hWnd, GWL_EXSTYLE)&WS_EX_TOPMOST) == WS_EX_TOPMOST)
					 {
						 cms_win_top->Enabled = false;
						 cms_win_quitTop->Enabled = true;
					 }
					 else
					 {
						 cms_win_top->Enabled = true;
						 cms_win_quitTop->Enabled = false;
					 }

					 //如果窗体显现
					 if(IsWindowVisible(hWnd))
					 {
						 cms_win_show->Enabled = false;
						 cms_win_hide->Enabled = true;
					 }
					 //如果窗体隐藏
					 else
					 {				
						 cms_win_show->Enabled = true;
						 cms_win_hide->Enabled = false;
					 }

					 //如果窗体最大
					 if(IsZoomed(hWnd)) 
					 {
						 cms_win_max->Enabled = false;
						 cms_win_min->Enabled = true;
					 }
					 //如果窗体最小
					 else
					 {
						 cms_win_max->Enabled = true;
						 cms_win_min->Enabled = false;
					 }
				 }
			 } 		 
		 }

		 //回调函数
private: System::Boolean callback_tv_win_show(HWND hwnd, int lParam)
		 {
			 try
			 {
				 //
				 DWORD dwPID = 0;
				 //
				 TCHAR tcClassName[MAX_PATH] = { 0 };
				 TCHAR tcText[MAX_PATH] = { 0 };
				 //
				 String^ str_ = String::Empty;

				 //获得窗体标题栏
				 GetWindowText(hwnd,tcText,MAX_PATH);
				 //
				 GetClassName(hwnd,tcClassName,MAX_PATH);

				 //
				 GetWindowThreadProcessId(hwnd,&dwPID);

				 //
				 if((GetWindowLong(hwnd, GWL_EXSTYLE) & WS_EX_TOPMOST) == WS_EX_TOPMOST)
				 {
					 str_ = "~置顶";
				 }
				 else
				 {
					 str_ = "";
				 }

				 //如果窗体可见
				 if(IsWindowVisible(hwnd))
				 {
					 TreeNode^ tn_ = gcnew TreeNode("窗口 " + ((ULONG)hwnd).ToString("X8") + "~" + gcnew String(tcText) + "~" + gcnew String(tcClassName) + "~" + dwPID.ToString() + str_,8,8);
					 //
					 tn_->Tag = (ULONG)hwnd;
					 //
					 tv_win->Nodes[0]->Nodes->Add(tn_);
				 }			 
				 //隐藏
				 else
				 {
					 TreeNode^ tn_ = gcnew TreeNode("窗口 " + ((ULONG)hwnd).ToString("X8") + "~" + gcnew String(tcText) + "~" + gcnew String(tcClassName) + "~" + dwPID.ToString() + str_,11,11);
					 //
					 tn_->Tag = (ULONG)hwnd;
					 //
					 tv_win->Nodes[0]->Nodes->Add(tn_);
				 }
			 }
			 catch(Exception^ ex) { }

             return true;
		 }

		 //回调函数
private: System::Boolean callback_tv_win_show_sub(HWND hwnd, int lParam){
			 try
			 {
				 //
				 DWORD dwPID = 0;
				 //
				 TCHAR tcClassName[MAX_PATH] = { 0 };
				 TCHAR tcText[MAX_PATH] = { 0 };
				 //
				 String^ str_ = String::Empty;

				 //获得窗体标题栏
				 GetWindowText(hwnd,tcText,MAX_PATH);
				 //
				 GetClassName(hwnd,tcClassName,MAX_PATH);

				 //
				 GetWindowThreadProcessId(hwnd,&dwPID);

				 //
				 if((GetWindowLong(hwnd, GWL_EXSTYLE) & WS_EX_TOPMOST) == WS_EX_TOPMOST)
				 {
					 str_ = "~置顶";
				 }
				 else
				 {
					 str_ = "";
				 }

				 //如果窗体可见
				 if(IsWindowVisible(hwnd))
				 {
					 TreeNode^ tn_ = gcnew TreeNode("窗口 " + ((ULONG)hwnd).ToString("X8") + "~" + gcnew String(tcText) + "~" + gcnew String(tcClassName) + "~" + dwPID.ToString() + str_,8,8);
					 //
					 tn_->Tag = (ULONG)hwnd;
					 //
					 tp_win_tn_->Nodes->Add(tn_);
				 }			 
				 //隐藏
				 else
				 {
					 TreeNode^ tn_ = gcnew TreeNode("窗口 " + ((ULONG)hwnd).ToString("X8") + "~" + gcnew String(tcText) + "~" + gcnew String(tcClassName) + "~" + dwPID.ToString() + str_,11,11);
					 //
					 tn_->Tag = (ULONG)hwnd;
					 //
					 tp_win_tn_->Nodes->Add(tn_);
				 }
			 }
			 catch(Exception^ ex) { }

			 return true;
		 }

		 //
private: System::Void tv_win_show_sub(TreeNode^ tn_){
			 //
			 HWND hwnd = (HWND)(ULONG)tn_->Tag;
			 //
			 tp_win_tn_ = tn_;
			 //
			 CallBack^ callback_ = gcnew CallBack(this,&Form1::callback_tv_win_show_sub);
			 EnumChildWindows(hwnd,callback_,NULL); 
		 }

		 //
private: System::Void tv_win_show_sub2(TreeNode^ tn_){
			 //
			 tp_win_tn_ = tn_;
			 //
			 CallBack^ callback_ = gcnew CallBack(this,&Form1::callback_tv_win_show2);
			 //
			 EnumThreadWindows((int)tn_->Tag,callback_,NULL);
			 //
			 return;				
		 }

		 //
private: System::Void tv_win_show()
		 {
			 //
			 tv_win->Nodes->Clear();

			 //
			 TCHAR tcClassName[MAX_PATH] = { 0 };
			 TCHAR tcText[MAX_PATH] = { 0 };

			 //
			 HWND hwnd = GetDesktopWindow();
			 //
			 GetClassName(hwnd,tcClassName,MAX_PATH);
			 //
			 GetWindowText(hwnd,tcText,MAX_PATH);
			 //
			 TreeNode^ tn_ = gcnew TreeNode("窗口 " + ((ULONG)hwnd).ToString("X8") + "~" + gcnew String(tcText) + "~" + gcnew String(tcClassName),8,8);
			 //
			 tn_->Tag = (ULONG)hwnd;
			 //
			 tv_win->Nodes->Add(tn_);
			 //
			 delete[] tcClassName;
			 delete[] tcText;

			 //
			 CallBack^ callback_ = gcnew CallBack(this,&Form1::callback_tv_win_show);
			 EnumWindows(callback_, NULL); 

			 //
			 tv_win->Nodes[0]->Expand();
		 }

		 //回调函数
private: System::Boolean callback_tv_win_show2(HWND hwnd, int lParam)
		 {
			 try
			 {
				 //
				 DWORD dwPID = 0;
				 //
				 TCHAR tcClassName[MAX_PATH] = { 0 };
				 TCHAR tcText[MAX_PATH] = { 0 };
				 //
				 String^ str_ = String::Empty;

				 //获得窗体标题栏
				 GetWindowText(hwnd,tcText,MAX_PATH);
				 //
				 GetClassName(hwnd,tcClassName,MAX_PATH);

				 //
				 GetWindowThreadProcessId(hwnd,&dwPID);

				 //
				 if((GetWindowLong(hwnd, GWL_EXSTYLE) & WS_EX_TOPMOST) == WS_EX_TOPMOST)
				 {
					 str_ = "~置顶";
				 }
				 else
				 {
					 str_ = "";
				 }

				 //如果窗体可见
				 if(IsWindowVisible(hwnd))
				 {
					 TreeNode^ tn_ = gcnew TreeNode("窗口 " + ((ULONG)hwnd).ToString("X8") + "~" + gcnew String(tcText) + "~" + gcnew String(tcClassName) + "~" + dwPID.ToString() + str_,8,8);
					 //
					 tn_->Tag = (ULONG)hwnd;
					 //
					 tp_win_tn_->Nodes->Add(tn_);
				 }			 
				 //隐藏
				 else
				 {
					 TreeNode^ tn_ = gcnew TreeNode("窗口 " + ((ULONG)hwnd).ToString("X8") + "~" + gcnew String(tcText) + "~" + gcnew String(tcClassName) + "~" + dwPID.ToString() + str_,11,11);
					 //
					 tn_->Tag = (ULONG)hwnd;
					 //
					 tp_win_tn_->Nodes->Add(tn_);
				 }
			 }
			 catch(Exception^ ex) { }

			 return true;
		 }

		 //
private: System::Void tv_win_show2()
		 {
			 //
			 tv_win->Nodes->Clear();
			 //
			 String^ str_ = String::Empty;
			 //
			 str_ = common_net::common_getProcessName(tp_process_int_currentPID);
			 //
			 TreeNode^ tn_ = gcnew TreeNode("进程 " + (tp_process_int_currentPID).ToString("X8") + "~" + str_,9,9);
			 //
			 tv_win->Nodes->Add(tn_);
			 //
			 ProcessThreadCollection^ ptc_ = (Process::GetProcessById(tp_process_int_currentPID))->Threads;
			 //
			 CallBack^ callback_ = gcnew CallBack(this,&Form1::callback_tv_win_show2);
			 //
			 for each(ProcessThread^ pt_ in ptc_)
			 {
				 tn_ = gcnew TreeNode("线程 " + (pt_->Id).ToString("X8") + "~" + str_,10,10);
				 //
				 tn_->Tag = pt_->Id;
				 //
				 tv_win->Nodes[0]->Nodes->Add(tn_);
				 //
				 tp_win_tn_ = tn_;
				 //
				 EnumThreadWindows(pt_->Id,callback_,NULL); 
			 }

			 //
			 tv_win->Nodes[0]->Expand();
		 }

		 //
private: System::Void tv_win_BeforeExpand(System::Object^  sender, System::Windows::Forms::TreeViewCancelEventArgs^  e) {
			 try
			 {
				 //
				 if (tp_win_bl_isJmp)
				 {
					 if (e->Node->Level == 0)
					 {
						 for each(TreeNode^ tn_ in e->Node->Nodes)
						 {
							 //
							 if (tn_->IsExpanded)
							 {
								 tn_->Collapse();
							 }
							 //清空原有的记录
							 tn_->Nodes->Clear();
							 //重新获得所有子节点
							 tv_win_show_sub2(tn_);
						 }
					 }
					 else
					 {
						 for each(TreeNode^ tn_ in e->Node->Nodes)
						 {
							 //
							 if (tn_->IsExpanded)
							 {
								 tn_->Collapse();
							 }
							 //清空原有的记录
							 tn_->Nodes->Clear();
							 //重新获得所有子节点
							 tv_win_show_sub(tn_);
						 }
					 }
					 //
					 return;
				 }
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 //
					 if (tn_->IsExpanded)
					 {
						 tn_->Collapse();
					 }
					 //清空原有的记录
					 tn_->Nodes->Clear();
					 //重新获得所有子节点
					 tv_win_show_sub(tn_);
				 }
			 }
			 catch(Exception^ ex){ }	 
		 }

		 //刷新
private: System::Void cms_win_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 if (tp_win_bl_isJmp)
			 {
				 //
				 tv_win_show2();
				 //
				 return;
			 }
			 //
			 tv_win_show();
		 }

		 //销毁
private: System::Void cms_win_destroy_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 ::SendMessage(hWnd,WM_CLOSE,NULL,NULL);

			 //如果句柄无效这里就会返回FALSE
			 if (!IsWindow(hWnd))
			 {
				 tv_win->SelectedNode->Remove();
			 }
		 }

		 //置顶
private: System::Void cms_win_top_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 SetWindowPos(hWnd,HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE|SWP_NOSIZE);
		 }

		 //取消置顶
private: System::Void cms_win_quitTop_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 SetWindowPos(hWnd,HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE|SWP_NOSIZE);
		 }

		 //显现
private: System::Void cms_win_show_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 ShowWindow(hWnd,SW_SHOW);
		 }

		 //隐藏
private: System::Void cms_win_hide_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 ShowWindow(hWnd,SW_HIDE);
		 }

		 //最小化
private: System::Void cms_win_min_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 ShowWindow(hWnd,SW_SHOWMINIMIZED);
		 }

		 //最大化
private: System::Void cms_win_max_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 ShowWindow(hWnd,SW_SHOWMAXIMIZED);		 
		 }

		 //
private: System::Void cms_win_view_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 HWND hWnd = (HWND)(ULONG)(tv_win->SelectedNode->Tag);
			 //
			 WinPropertyForm^ winPropertyForm = gcnew WinPropertyForm(hWnd,hDriver);
			 winPropertyForm->ShowDialog();
		 }

		 //
private: System::Void cms_win_view_find_Click(System::Object^  sender, System::EventArgs^  e) {
			 WinFindForm^ winFindForm = gcnew WinFindForm(this,imageList2);
			 winFindForm->ShowDialog();
		 }

		 //导出
private: System::Void cms_win_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 //common_net::common_getListViewData(lv_win);
		 }
#pragma endregion tp_win

	   //网络连接 --》端口
#pragma region tp_net_port
		 //
		 static ListViewItem::ListViewSubItem^ tp_net_port_sub_item_ = nullptr;

		 //显示
private: System::Void lv_net_port_show()
		 {
			 WSADATA WSAData;

			 //TCP
			 PMIB_TCPTABLE_OWNER_PID pMIB_TCPTable = NULL;

			 //UDP
			 PMIB_UDPTABLE_OWNER_PID pMIB_UDPTable = NULL;

			 DWORD dwSize = 0;

			 if(WSAStartup(MAKEWORD(1, 1), &WSAData))
			 {
				 return;
			 }

			 //第一次获得大小
			 GetExtendedTcpTable(NULL,&dwSize,TRUE,AF_INET,TCP_TABLE_OWNER_PID_ALL,NULL);

			 //分配内存
			 pMIB_TCPTable = (PMIB_TCPTABLE_OWNER_PID)new BYTE[dwSize];
			 GetExtendedTcpTable(pMIB_TCPTable,&dwSize,TRUE,AF_INET,TCP_TABLE_OWNER_PID_ALL,NULL);

			 //
			 if (File::Exists(Application::StartupPath + "\\QQWry.Dat"))
			 {
				 //
				 QQwry qqwry;

				 if(qqwry.OpenQQwry(common_net::common_stringToHGlobalUni(Application::StartupPath + "\\QQWry.Dat")))
				 {	 
					 //遍历结构体
					 for(UINT32 i = 0;i<pMIB_TCPTable->dwNumEntries;i++)
					 {
						 //
						 ListViewItem^ item = gcnew ListViewItem("TCP");

						 try
						 {
							 char buffer[MAX_PATH] = { 0 };
							 qqwry.GetIpInfo(GetIP(pMIB_TCPTable->table[i].dwRemoteAddr),buffer,MAX_PATH);
							 //
							 item->SubItems->AddRange(gcnew array<String^>{pMIB_TCPTable->table[i].dwOwningPid.ToString(),common_net::common_getProcessName(pMIB_TCPTable->table[i].dwOwningPid),
								 gcnew String(GetIP(pMIB_TCPTable->table[i].dwLocalAddr))+":"+(htons((WORD)pMIB_TCPTable->table[i].dwLocalPort)).ToString(),
								 gcnew String(GetIP(pMIB_TCPTable->table[i].dwRemoteAddr))+":"+(htons((WORD)pMIB_TCPTable->table[i].dwRemotePort)).ToString()+"["+gcnew String(buffer)+"]",			
								 gcnew String(TcpState[pMIB_TCPTable->table[i].dwState-1]),common_net::common_getProcessPath(pMIB_TCPTable->table[i].dwOwningPid)});

							 //
							 lv_net_port->Items->Add(item);
							 free(buffer);

							 //item->tag
							 item->Tag = pMIB_TCPTable->table[i].dwOwningPid;					 
						 }
						 catch(Exception^ ex){ }
					 }
				 }

				 //
				 qqwry.CloseQQwry();
			 }
			 else
			 {
				 //在这里获得配置文件里相关信息
				 bool bl_enabled = false;
				 //
				 String^ str_ = common_net::config_getPrivateProfileString("main","enable_ip_physical_addr_view",Application::StartupPath + "\\Deianeira.config");

				 if (str_ == "false")
				 {
					 bl_enabled = false;
				 }
				 else if (str_ == "true")
				 {
					 bl_enabled = true;
				 }

				 //遍历结构体
				 for(UINT32 i = 0;i<pMIB_TCPTable->dwNumEntries;i++)
				 {
					 //
					 ListViewItem^ item=gcnew ListViewItem("TCP");

					 try
					 {
						 //
						 if (bl_enabled)
						 {
							 item->SubItems->AddRange(gcnew array<String^>{pMIB_TCPTable->table[i].dwOwningPid.ToString(),common_net::common_getProcessName(pMIB_TCPTable->table[i].dwOwningPid),
								 gcnew String(GetIP(pMIB_TCPTable->table[i].dwLocalAddr))+":"+(htons((WORD)pMIB_TCPTable->table[i].dwLocalPort)).ToString(),
								 gcnew String(GetIP(pMIB_TCPTable->table[i].dwRemoteAddr))+":"+(htons((WORD)pMIB_TCPTable->table[i].dwRemotePort)).ToString()+"["+common_net::common_getIPAddr(gcnew String(GetIP(pMIB_TCPTable->table[i].dwRemoteAddr)))+"]",			
								 gcnew String(TcpState[pMIB_TCPTable->table[i].dwState-1]),common_net::common_getProcessPath(pMIB_TCPTable->table[i].dwOwningPid)});
						 }
						 else
						 {
							 item->SubItems->AddRange(gcnew array<String^>{pMIB_TCPTable->table[i].dwOwningPid.ToString(),common_net::common_getProcessName(pMIB_TCPTable->table[i].dwOwningPid),
								 gcnew String(GetIP(pMIB_TCPTable->table[i].dwLocalAddr))+":"+(htons((WORD)pMIB_TCPTable->table[i].dwLocalPort)).ToString(),
								 gcnew String(GetIP(pMIB_TCPTable->table[i].dwRemoteAddr))+":"+(htons((WORD)pMIB_TCPTable->table[i].dwRemotePort)).ToString(),			
								 gcnew String(TcpState[pMIB_TCPTable->table[i].dwState-1]),common_net::common_getProcessPath(pMIB_TCPTable->table[i].dwOwningPid)});
						 }

						 //
						 lv_net_port->Items->Add(item);

						 //item->tag
						 item->Tag = pMIB_TCPTable->table[i].dwOwningPid;					 
					 }
					 catch(Exception^ ex){ }
				 }
			 }

			 free(pMIB_TCPTable);

			 dwSize = 0;

			 //第一次获得内存大小
			 GetExtendedUdpTable(NULL,&dwSize,TRUE,AF_INET,UDP_TABLE_OWNER_PID,NULL);

			 //分配内存
			 pMIB_UDPTable = (PMIB_UDPTABLE_OWNER_PID)new BYTE[dwSize];
			 GetExtendedUdpTable(pMIB_UDPTable,&dwSize,TRUE,AF_INET,UDP_TABLE_OWNER_PID,NULL);

			 //同上
			 for(UINT32 i=0;i<pMIB_UDPTable->dwNumEntries;i++)
			 {
				 try
				 {
					 //
					 ListViewItem^ item=gcnew ListViewItem("UDP");
					 //
					 item->SubItems->AddRange(gcnew array<String^>{pMIB_UDPTable->table[i].dwOwningPid.ToString(),common_net::common_getProcessName(pMIB_UDPTable->table[i].dwOwningPid),
						 gcnew String(GetIP(pMIB_UDPTable->table[i].dwLocalAddr))+":"+(htons((WORD)pMIB_UDPTable->table[i].dwLocalPort)).ToString(),
						 "*:*","",common_net::common_getProcessPath(pMIB_UDPTable->table[i].dwOwningPid)});
					 //
					 lv_net_port->Items->Add(item);

					 //item->tag
					 item->Tag = pMIB_UDPTable->table[i].dwOwningPid;
				 }
				 catch(Exception^ ex){ }
			 }

			 free(pMIB_UDPTable);

			 WSACleanup();
		 }

		 //控制右键菜单的显示
private: System::Void lv_net_port_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_net_port->SelectedItems->Count == 0)
			 {
				 cms_net_port_sigverif->Enabled = false;
				 cms_net_port_delete->Enabled = false;
				 cms_net_port_force->Enabled = false;
				 cms_net_port_explorer->Enabled = false;
				 cms_net_port_explorer2->Enabled = false;
				 cms_net_port_copy->Enabled = false;
				 cms_net_port_copy2->Enabled = false;
			 }
			 else
			 {
				 //
				 ListViewHitTestInfo^ info_ = lv_net_port->HitTest(e->X, e->Y);
				 //
				 tp_net_port_sub_item_ = info_->Item->GetSubItemAt(e->X, e->Y);

				 cms_net_port_sigverif->Enabled = true;
				 cms_net_port_delete->Enabled = true;
				 cms_net_port_force->Enabled = true;
				 cms_net_port_explorer->Enabled = true;
				 cms_net_port_explorer2->Enabled = true;
				 cms_net_port_copy->Enabled = true;
				 cms_net_port_copy2->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_net_port_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column==1)
				 {
					 //数字排序
					 lv_net_port->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_net_port->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }		 
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column==1)
				 {
					 //数字排序
					 lv_net_port->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_net_port->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }	

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_net_port_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_net_port->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_net_port);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_net_port_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_net_port->Items->Clear();
			 lv_net_port_show();
		 }

		 //校验数字签名
private: System::Void cms_net_port_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(lv_net_port->SelectedItems[0]->SubItems[6]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

		 //删除
private: System::Void cms_net_port_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 Process::GetProcessById((int)lv_net_port->SelectedItems[0]->Tag)->Kill();
			 }
			 catch(Exception^ ex){ MessageBox::Show("进程结束失败！"); }
		 }

		 //强制删除进程
private: System::Void cms_net_port_force_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet=FALSE;
			 DWORD dwRet=0;

			 //得到本地进程ID
			 ULONG ulPID = (int)lv_net_port->SelectedItems[0]->Tag;
			 bRet = DeviceIoControl(hDriver, IOCTL_PROCESS_KILL2, &ulPID, sizeof(ULONG), NULL, 0, &dwRet, NULL);
			 if (!bRet)
			 {
				 MessageBox::Show("强制结束进程失败！");
				 return;
			 }

			 //刷新列表
			 cms_net_port_refresh_Click(sender,e);
		 }

		 //定位
private: System::Void cms_net_port_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_net_port->SelectedItems[0]->SubItems[6]->Text));		 
		 }

		 //
private: System::Void cms_net_port_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_net_port->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[6]->Text);
		 }

		 //查看文件属性
private: System::Void cms_net_port_process_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_net_port->SelectedItems[0]->SubItems[6]->Text));
		 }

		 //item复制
private: System::Void cms_net_port_copy_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 String^ str_ = String::Empty;
			 ListViewItem^ item_ = lv_net_port->SelectedItems[0];
			 //
			 for(int i = 0;i < item_->SubItems->Count;i ++)
			 {
				 str_ = str_ + item_->SubItems[i]->Text + " ";
			 }
			 //复制
			 Clipboard::SetDataObject(str_, true);
		 }

		 //subitem复制
private: System::Void cms_net_port_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 Clipboard::SetDataObject(tp_net_port_sub_item_->Text, true);
		 }

		 //导出
private: System::Void cms_net_port_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 common_net::common_getListViewData(lv_net_port);
		 }

#pragma endregion tp_net_port

	   //网络连接 --》IE插件
#pragma region tp_net_iePlugin
		 //
private: System::Void lv_net_iePlugin_show_func_sub(RegistryKey^ rk_clsid,ListViewItem^ item_,String^ str_regkey,String^ str_type)
		 {
			 //CLSID子键
			 RegistryKey^ rk_clsid_sub = rk_clsid->OpenSubKey(str_regkey);

			 //如果存在默认值
			 if (common_net::common_checkRegkeyValue(rk_clsid_sub,""))
			 {
				 if (String::IsNullOrEmpty(item_->Text))
				 {
					 item_->Text = rk_clsid_sub->GetValue(nullptr)->ToString();
				 }	 
			 }
			 else
			 {
				 if (String::IsNullOrEmpty(item_->Text))
				 {
					 item_->Text = str_regkey;
				 }		 
			 }

			 //
			 if (common_net::common_checkRegkey(rk_clsid_sub,"InprocServer32"))
			 {
				 //CLSID子键的子键
				 RegistryKey^ rk_clsid_sub2 = rk_clsid_sub->OpenSubKey("InprocServer32");

				 if (common_net::common_checkRegkeyValue(rk_clsid_sub2,""))
				 {
					 //获得默认数据
					 String^ str_value = rk_clsid_sub2->GetValue(nullptr)->ToString();

					 //文件厂商
					 String^ str_comp = common_net::common_getFileCompanyName(common_net::common_formatString(str_value));

					 item_->SubItems->AddRange(gcnew array<String^>{str_type,str_value,str_comp,str_regkey});
				 }
				 else
				 {
					 item_->SubItems->AddRange(gcnew array<String^>{str_type,"文件不存在！","",str_regkey});
				 }

				 //释放
				 rk_clsid_sub2->Close();
			 }
			 //如果不存在InprocServer32，说明项无效
			 else
			 {
				 item_->SubItems->AddRange(gcnew array<String^>{ str_type,"无效的CLSID！","",str_regkey});
			 }

			 //释放
			 rk_clsid_sub->Close();
		 }

private: System::Void lv_net_iePlugin_show_func(RegistryKey^ rk_,String^ str_regkey,String^ str_type)
		 {
			 //CLSID
			 RegistryKey^ rk_clsid = Registry::ClassesRoot->OpenSubKey("CLSID");

			 //对应
			 rk_ = rk_->OpenSubKey(str_regkey);

			 //遍历子键
			 for each(String^ str_ in rk_->GetSubKeyNames())
			 {
				 ListViewItem^ item_ = gcnew ListViewItem();

				 //打开子键
				 RegistryKey^ rk_sub = rk_->OpenSubKey(str_);
	
				 //判断CLSID里面是否存在对应子键
				 if (common_net::common_checkRegkey(rk_clsid,str_))
				 {
					 lv_net_iePlugin_show_func_sub(rk_clsid,item_,str_,str_type);
				 }
				 else
				 {
					 item_->Text = str_;

					 item_->SubItems->AddRange(gcnew array<String^>{ str_type,"CLSID不存在！","",""});
				 }

				 rk_sub->Close();

				 //tag标志
				 item_->Tag = str_;

				 //
				 lv_net_iePlugin->Items->Add(item_);
			 }

			 //释放
			 rk_->Close();
			 rk_clsid->Close();
		 }

private: System::Void lv_net_iePlugin_show(){
			 //Browser Extensions
			 if (common_net::common_checkRegkey(Registry::LocalMachine,"Software\\Microsoft\\Internet Explorer\\Extensions"))
			 {
				 RegistryKey^ rk_ = Registry::LocalMachine->OpenSubKey("Software\\Microsoft\\Internet Explorer\\Extensions");

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 RegistryKey^ rk_sub = rk_->OpenSubKey(str_);

					 ListViewItem^ item_ = gcnew ListViewItem(rk_sub->GetValue("menutext")->ToString());

					 //如果存在exec，说明不是dll
					 if (common_net::common_checkRegkeyValue(rk_sub,"exec"))
					 {
						 //数值
						 String^ str_value = rk_sub->GetValue("exec")->ToString();
						 //文件厂商
						 String^ str_comp = common_net::common_getFileCompanyName(common_net::common_formatString(str_value));

						 item_->SubItems->AddRange(gcnew array<String^>{ "Browser Extensions",str_value,str_comp,str_});

						 //在这里判断文件厂商
						 if (!str_comp->Contains("Microsoft Cor"))
						 {
							 item_->ForeColor=Color::Blue;
						 }
					 }
					 else
					 {
						 //ClsidExtension
						 String^ str_value = rk_sub->GetValue("ClsidExtension")->ToString();
						 lv_net_iePlugin_show_func_sub(Registry::ClassesRoot->OpenSubKey("CLSID"),item_,str_value,"Browser Extensions");
					 }

					 //tag标志
					 item_->Tag = str_;

					 lv_net_iePlugin->Items->Add(item_);

					 rk_sub->Close();
				 }

				 rk_->Close();
			 }

			 //URLSearchHooks
			 if (common_net::common_checkRegkey(Registry::CurrentUser,"Software\\Microsoft\\Internet Explorer\\URLSearchHooks"))
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Internet Explorer\\URLSearchHooks");

				 for each(String^ str_ in rk_->GetValueNames())
				 {
					 ListViewItem^ item_ = gcnew ListViewItem();

					 lv_net_iePlugin_show_func_sub(Registry::ClassesRoot->OpenSubKey("CLSID"),item_,str_,"URLSearchHooks");

					 //tag标志
					 item_->Tag = str_;

					 lv_net_iePlugin->Items->Add(item_);
				 }

				 rk_->Close();
			 }
			 
			 //Browser Helper Objects
             lv_net_iePlugin_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects","Browser Helper Objects");

			 //ActiveX
			 lv_net_iePlugin_show_func(Registry::CurrentUser,"Software\\Microsoft\\Windows\\CurrentVersion\\Ext\\Stats","ActiveX");

			 //Distribution Units
			 lv_net_iePlugin_show_func(Registry::LocalMachine,"SOFTWARE\\Microsoft\\Code Store Database\\Distribution Units","Distribution Units");
		 }

		 //控制右键菜单的显示
private: System::Void lv_net_iePlugin_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_net_iePlugin->SelectedItems->Count==0)
			 {
				 cms_net_iePlugin_delete1->Enabled=false;
				 cms_net_iePlugin_delete2->Enabled=false;
				 cms_net_iePlugin_sigverif->Enabled=false;
				 cms_net_iePlugin_copy1->Enabled=false;
				 cms_net_iePlugin_copy2->Enabled=false;
				 cms_net_iePlugin_onlineFind->Enabled=false;
				 cms_net_iePlugin_explorer->Enabled=false;
				 cms_net_iePlugin_explorer2->Enabled=false;
				 cms_net_iePlugin_showProperty->Enabled=false;
				 cms_net_iePlugin_reg->Enabled=false;
			 }
			 else
			 {
				 cms_net_iePlugin_delete1->Enabled=true;
				 cms_net_iePlugin_delete2->Enabled=true;
				 cms_net_iePlugin_sigverif->Enabled=true;
				 cms_net_iePlugin_copy1->Enabled=true;
				 cms_net_iePlugin_copy2->Enabled=true;
				 cms_net_iePlugin_onlineFind->Enabled=true;
				 cms_net_iePlugin_explorer->Enabled=true;
				 cms_net_iePlugin_explorer2->Enabled=true;
				 cms_net_iePlugin_showProperty->Enabled=true;
				 cms_net_iePlugin_reg->Enabled=true;
			 }
		 }

		 //
private: System::Void lv_net_iePlugin_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_net_iePlugin->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_net_iePlugin->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_net_iePlugin_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_net_iePlugin->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_net_iePlugin);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_net_iePlugin_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_net_iePlugin->Items->Clear();
			 lv_net_iePlugin_show();
		 }

		 //删除
private: System::Void cms_net_iePlugin_delete1_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 RegistryKey^ rk_;
				 ListViewItem^ item_ = lv_net_iePlugin->SelectedItems[0];

				 if (item_->SubItems[1]->Text == "Browser Extensions")
				 {
					 rk_ = Registry::LocalMachine->OpenSubKey("SOFTWARE\\Microsoft\\Internet Explorer\\Extensions",true);
				 }
				 else if (item_->SubItems[1]->Text == "URLSearchHooks")
				 {
					 rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Internet Explorer\\URLSearchHooks",true);
				 }
				 else if (item_->SubItems[1]->Text == "Browser Helper Objects")
				 {
					 rk_ = Registry::LocalMachine->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects",true);
				 }
				 else if (item_->SubItems[1]->Text == "ActiveX")
				 {
					 rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Ext\\Stats",true);
				 }
				 else
				 {
					 rk_ = Registry::LocalMachine->OpenSubKey("SOFTWARE\\Microsoft\\Code Store Database\\Distribution Units",true);
				 }
				 //删除树
				 rk_->DeleteSubKeyTree(item_->Tag->ToString());

				 //释放
				 rk_->Close();
				 //从lv中移除
				 item_->Remove();
			 }
			 catch(Exception^ ex){ MessageBox::Show("删除失败！"); }
		 }

		 //删除注册表和文件
private: System::Void cms_net_iePlugin_delete2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_net_iePlugin->SelectedItems[0];
			 //判断文件是否存在
			 if (File::Exists(common_net::common_formatString(item_->SubItems[2]->Text)))
			 {
				 try
				 {
					 File::Delete(common_net::common_formatString(item_->SubItems[2]->Text));
				 }
				 catch(Exception^ ex){ MessageBox::Show("删除文件失败！");}		 
			 }
			 //调用删除注册表方法
			 cms_other_menu_delete1_Click(sender,e);
		 }

		 //校验数字签名
private: System::Void cms_net_iePlugin_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_net_iePlugin->SelectedItems[0]->SubItems[2]->Text))))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_net_iePlugin_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_net_iePlugin->Items)
			 {
				 String^ str_filePath = nullptr;

				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[2]->Text + "]";
				 str_filePath = item->SubItems[2]->Text;

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_net_iePlugin->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_net_iePlugin->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_net_iePlugin->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_net_iePlugin->Items[index] = item_;
				 index++;
			 }
			 lv_net_iePlugin->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }
			 
		 //校验所有数字签名
private: System::Void cms_net_iePlugin_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_net_iePlugin_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //复制
private: System::Void cms_net_iePlugin_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 Clipboard::SetDataObject(lv_net_iePlugin->SelectedItems[0]->SubItems[0]->Text, true);
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }	 
		 }

		 //复制路径
private: System::Void cms_net_iePlugin_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 Clipboard::SetDataObject(common_net::common_formatString(lv_net_iePlugin->SelectedItems[0]->SubItems[2]->Text), true);
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }	 
		 }

		 //在线查找
private: System::Void cms_net_iePlugin_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineFind(lv_net_iePlugin->SelectedItems[0]->SubItems[0]->Text);
		 }

		 //在线分析
private: System::Void cms_net_iePlugin_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

		 //定位
private: System::Void cms_net_iePlugin_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(common_net::common_formatString(lv_net_iePlugin->SelectedItems[0]->SubItems[2]->Text)));
		 }

		 //
private: System::Void cms_net_iePlugin_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_net_iePlugin->SelectedItems[0];
			 lv_file_jmp(common_net::common_formatString(item_->SubItems[2]->Text));
		 }

		 //查看文件属性
private: System::Void cms_net_iePlugin_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_net_iePlugin->SelectedItems[0]->SubItems[2]->Text)));
		 }

		 //定位注册表
private: System::Void cms_net_iePlugin_reg_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_net_iePlugin->SelectedItems[0];
			 String^ str_ = String::Empty;

			 if (item_->SubItems[1]->Text == "Browser Extensions")
			 {
				 str_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Extensions";
			 }
			 else if (item_->SubItems[1]->Text == "URLSearchHooks")
			 {
				 str_ = "HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\URLSearchHooks";
			 }
			 else if (item_->SubItems[1]->Text == "Browser Helper Objects")
			 {
				 str_ = "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects";
			 }
			 else if (item_->SubItems[1]->Text == "ActiveX")
			 {
				 str_ = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Ext\\Stats";
			 }
			 else
			 {
				 str_ = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Code Store Database\\Distribution Units";		 
			 }

			 common_explorerReg(common_net::common_stringToHGlobalUni( str_ + "\\" + item_->Tag->ToString()));
			 try
			 {
				 Process::Start("regedit.exe");
			 }
			 catch(Exception^ ex){ }
		 }

		 //导出
private: System::Void cms_net_iePlugin_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_net_iePlugin);
		 }
#pragma endregion tp_net_iePlugin

       //网络连接 --》IE右键菜单
#pragma region tp_net_ieMenu
		 //
private: System::Void lv_net_ieMenu_show()
		 {
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Internet Explorer\\MenuExt");
				 //遍历
				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 //打开子键
					 RegistryKey ^ rk_tmp = rk_->OpenSubKey(str_);
					 //
					 String^ str_fileComp = common_net::common_getFileCompanyName(rk_tmp->GetValue(nullptr)->ToString());

					 ListViewItem^ item_ = gcnew ListViewItem(str_);
					 item_->SubItems->AddRange(gcnew array<String^>{ rk_tmp->GetValue(nullptr)->ToString(),str_fileComp});
					 lv_net_ieMenu->Items->Add(item_);

					 ////在这里判断文件厂商
					 //if (!str_fileComp->Contains("Microsoft Cor"))
					 //{
						// item_->ForeColor=Color::Blue;
					 //}

					 rk_tmp->Close();
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //控制右键菜单
private: System::Void lv_net_ieMenu_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_net_ieMenu->SelectedItems->Count==0)
			 {
				 cms_net_ieMenu_delete1->Enabled=false;
				 cms_net_ieMenu_delete2->Enabled=false;
				 cms_net_ieMenu_sigverif->Enabled=false;
				 cms_net_ieMenu_copy1->Enabled=false;
				 cms_net_ieMenu_copy2->Enabled=false;
				 cms_net_ieMenu_onlineFind->Enabled=false;
				 cms_net_ieMenu_explorer->Enabled=false;
				 cms_net_ieMenu_explorer2->Enabled=false;
				 cms_net_ieMenu_showProperty->Enabled=false;
				 cms_net_ieMenu_reg->Enabled=false;
			 }
			 else
			 {
				 cms_net_ieMenu_delete1->Enabled=true;
				 cms_net_ieMenu_delete2->Enabled=true;
				 cms_net_ieMenu_sigverif->Enabled=true;
				 cms_net_ieMenu_copy1->Enabled=true;
				 cms_net_ieMenu_copy2->Enabled=true;
				 cms_net_ieMenu_onlineFind->Enabled=true;
				 cms_net_ieMenu_explorer->Enabled=true;
				 cms_net_ieMenu_explorer2->Enabled=true;
				 cms_net_ieMenu_showProperty->Enabled=true;
				 cms_net_ieMenu_reg->Enabled=true;
			 }
		 }

		 //
private: System::Void lv_net_ieMenu_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_net_ieMenu->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_net_ieMenu->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_net_ieMenu_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_net_ieMenu->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_net_ieMenu);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_net_ieMenu_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_net_ieMenu->Items->Clear();
			 lv_net_ieMenu_show();
		 }

		 //删除注册表
private: System::Void cms_net_ieMenu_delete1_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Internet Explorer\\MenuExt",true);
				 rk_->DeleteSubKeyTree(lv_net_ieMenu->SelectedItems[0]->SubItems[0]->Text);
				 rk_->Close();

				 //从lv中移除
				 lv_net_ieMenu->SelectedItems[0]->Remove();
			 }
			 catch(Exception^ ex){ }		 
		 }

		 //删除注册表和文件
private: System::Void cms_net_ieMenu_delete2_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 //删除文件
				 if (File::Exists(lv_net_ieMenu->SelectedItems[1]->Text))
				 {
					 File::Delete(lv_net_ieMenu->SelectedItems[1]->Text);
				 }

				 //删除注册表
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Internet Explorer\\MenuExt",true);
				 rk_->DeleteSubKeyTree(lv_net_ieMenu->SelectedItems[0]->SubItems[0]->Text);
				 rk_->Close();

				 //从lv中移除
				 lv_net_ieMenu->SelectedItems[0]->Remove();
			 }
			 catch(Exception^ ex){ }
		 }

		 //校验数字签名
private: System::Void cms_net_ieMenu_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(lv_net_ieMenu->SelectedItems[0]->SubItems[2]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_net_ieMenu_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_net_ieMenu->Items)
			 {
				 String^ str_filePath = nullptr;

				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[2]->Text + "]";
				 str_filePath = item->SubItems[2]->Text;

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_net_ieMenu->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_net_ieMenu->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_net_ieMenu->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_net_ieMenu->Items[index] = item_;
				 index++;
			 }
			 lv_net_ieMenu->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }

		 //校验所有数字签名
private: System::Void cms_net_ieMenu_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_net_ieMenu_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //复制名称
private: System::Void cms_net_ieMenu_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制到剪切板
			 Clipboard::SetDataObject(lv_net_ieMenu->SelectedItems[0]->SubItems[0]->Text, true);
		 }

		 //复制路径
private: System::Void cms_net_ieMenu_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制到剪切板
			 Clipboard::SetDataObject(lv_net_ieMenu->SelectedItems[0]->SubItems[1]->Text, true);
		 }

		 //在线搜索
private: System::Void cms_net_ieMenu_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineFind(lv_net_ieMenu->SelectedItems[0]->SubItems[0]->Text);
		 }

		 //在线分析
private: System::Void cms_net_ieMenu_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

		 //定位
private: System::Void cms_net_ieMenu_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_net_ieMenu->SelectedItems[0]->SubItems[1]->Text));
		 }

		 //
private: System::Void cms_net_ieMenu_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_net_ieMenu->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[1]->Text);
		 }

		 //查看文件属性
private: System::Void cms_net_ieMenu_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_net_ieMenu->SelectedItems[0]->SubItems[1]->Text));
		 }

		 //定位到注册表
private: System::Void cms_net_ieMenu_reg_Click(System::Object^  sender, System::EventArgs^  e) {
			 if(common_explorerReg(common_net::common_stringToHGlobalUni("HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer\\MenuExt\\"+lv_net_ieMenu->SelectedItems[0]->SubItems[0]->Text)))
			 {
				 try
				 {
					 Process::Start("regedit.exe");
				 }
				 catch(Exception^ ex){}		 
			 }
		 }

		 //导出
private: System::Void cms_net_ieMenu_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_net_ieMenu);
		 }

#pragma endregion tp_net_ieMenu

       //网络连接 --》LSP
#pragma region tp_net_lsp
		 //
		 static ListViewItem::ListViewSubItem^ tp_net_lsp_sub_item_ = nullptr;
		 //
private: System::Void lv_net_lsp_show() {
			 //定义结构体,当并没有为其分配内存
			 LPWSAPROTOCOL_INFOW pWsaProtocolInfo = NULL;
			 //用于接收返回的字节大小
			 DWORD dwSize;

			 //第一次枚举肯定失败，因为pWsaProtocolInfo没有可用内存
			 WSCEnumProtocols(NULL, pWsaProtocolInfo, &dwSize,0);
			 if (dwSize>0)
			 {		 
				 //分配全局内存
				 pWsaProtocolInfo = (LPWSAPROTOCOL_INFOW)GlobalAlloc(GPTR, dwSize);

				 //如果分配内存失败
				 if (pWsaProtocolInfo == NULL)
				 {
					 return;            
				 }

				 //获得结构体的数量
				 int int_protocolCount = WSCEnumProtocols(NULL, pWsaProtocolInfo, &dwSize,0);    

				 //如果返回失败
				 if (!int_protocolCount)
				 {
					 //释放内存
					 GlobalFree(pWsaProtocolInfo);
					 return;    
				 }

				 //循环遍历
				 for (int i=0;i<int_protocolCount;i++)
				 {
					 //定义数组用于存取路径
					 WCHAR file[MAX_PATH];
					 int len=MAX_PATH;

					 //获得相应的映像文件路径
					 WSCGetProviderPath(&pWsaProtocolInfo[i].ProviderId,file,&len,0);
					 //映像文件路径
					 String^ str_file = gcnew String(file);

                     //添加数据
                     ListViewItem^ item = gcnew ListViewItem(i.ToString("D12"));
					 item->SubItems->AddRange(gcnew array<String^>{gcnew String(pWsaProtocolInfo[i].szProtocol),Environment::ExpandEnvironmentVariables(str_file),
						 common_net::common_getFileCompanyName(Environment::ExpandEnvironmentVariables(str_file)),
						 "{"+pWsaProtocolInfo[i].ProviderId.Data1.ToString("X")+"-"+pWsaProtocolInfo[i].ProviderId.Data2.ToString("X")+"-"+pWsaProtocolInfo[i].ProviderId.Data3.ToString("X")+"-"+
						 pWsaProtocolInfo[i].ProviderId.Data4[0].ToString("X2")+pWsaProtocolInfo[i].ProviderId.Data4[1].ToString("X2")+"-"+pWsaProtocolInfo[i].ProviderId.Data4[2].ToString("X2")+
					     pWsaProtocolInfo[i].ProviderId.Data4[3].ToString("X2")+pWsaProtocolInfo[i].ProviderId.Data4[4].ToString("X2")+pWsaProtocolInfo[i].ProviderId.Data4[5].ToString("X2")+
						 pWsaProtocolInfo[i].ProviderId.Data4[6].ToString("X2")+pWsaProtocolInfo[i].ProviderId.Data4[7].ToString("X2")+"}"});
                     lv_net_lsp->Items->Add(item);  
				 }	 

				 //释放分配的内存结构
				 GlobalFree(pWsaProtocolInfo);    
			 } 
		 }

		 //控制右键惨淡的使用
private: System::Void lv_net_lsp_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_net_lsp->SelectedItems->Count == 0)
			 {
				 cms_net_lsp_sigverif->Enabled = false;
				 cms_net_lsp_onlineFind->Enabled = false;
				 cms_net_lsp_explorer->Enabled = false;
				 cms_net_lsp_explorer2->Enabled = false;
				 cms_net_lsp_showProperty->Enabled = false;
				 cms_net_lsp_reg->Enabled = false;
				 cms_net_lsp_copy->Enabled = false;
				 cms_net_lsp_copy2->Enabled = false;
			 }
			 else
			 {
				 //
				 ListViewHitTestInfo^ info_ = lv_net_lsp->HitTest(e->X, e->Y);
				 //
				 tp_net_lsp_sub_item_ = info_->Item->GetSubItemAt(e->X, e->Y);

				 cms_net_lsp_sigverif->Enabled = true;
				 cms_net_lsp_onlineFind->Enabled = true;
				 cms_net_lsp_explorer->Enabled = true;
				 cms_net_lsp_explorer2->Enabled = true;
				 cms_net_lsp_showProperty->Enabled = true;
				 cms_net_lsp_reg->Enabled = true;
				 cms_net_lsp_copy->Enabled = true;
				 cms_net_lsp_copy2->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_net_lsp_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 0)
				 {
					 //数子排序
					 lv_net_lsp->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_net_lsp->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 0)
				 {
					 //数字排序
					 lv_net_lsp->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_net_lsp->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_net_lsp_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_net_lsp->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_net_lsp);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_net_lsp_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_net_lsp->Items->Clear();
			 lv_net_lsp_show();
		 }

		 //验证数字签名
private: System::Void cms_net_lsp_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(Environment::ExpandEnvironmentVariables(lv_net_lsp->SelectedItems[0]->SubItems[2]->Text))))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_net_lsp_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_net_lsp->Items)
			 {
				 String^ str_filePath = nullptr;

				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[2]->Text + "]";
				 str_filePath = item->SubItems[2]->Text;

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_net_lsp->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_net_lsp->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_net_lsp->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_net_lsp->Items[index] = item_;
				 index++;
			 }
			 lv_net_lsp->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }

		 //校验所有数字签名
private: System::Void cms_net_lsp_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_net_lsp_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

         //修复LSP
private: System::Void cms_net_lsp_fix_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (common_createFileFromResource(IDR_ATTACHMENT_LSP,L"Attachment",common_net::common_stringToHGlobalUni(Application::StartupPath+"\\LSP.reg")))
			 {
				 try
				 {
					 Process::Start("LSP.reg");
				 }
				 catch(Exception^ ex)
				 {			 
					 MessageBox::Show(ex->Message); 
				 }

				 //如果存在文件的话就删除掉
				 if (File::Exists(Application::StartupPath+"\\LSP.reg"))
				 {
					 File::Delete(Application::StartupPath+"\\LSP.reg");
				 }
			 }
		 }

         //在线搜索
private: System::Void cms_net_lsp_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineFind(lv_net_lsp->SelectedItems[0]->SubItems[1]->Text);
		 }

         //在线分析
private: System::Void cms_net_lsp_onlineAalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

         //定位文件
private: System::Void cms_net_lsp_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_net_lsp->SelectedItems[0]->SubItems[2]->Text));
		 }

		 //
private: System::Void cms_net_lsp_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_net_lsp->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[2]->Text);
		 }

         //查看文件属性
private: System::Void cms_net_lsp_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_net_lsp->SelectedItems[0]->SubItems[2]->Text));
		 }

         //定位注册表
private: System::Void cms_net_lsp_reg_Click(System::Object^  sender, System::EventArgs^  e) {
			 if(common_explorerReg(common_net::common_stringToHGlobalUni("HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\WinSock2\\Parameters\\Protocol_Catalog9\\Catalog_Entries\\"+lv_net_lsp->SelectedItems[0]->SubItems[0]->Text)))
			 {
				 try
				 {
					 Process::Start("regedit.exe");
				 }
				 catch(Exception^ ex){}		 
			 }
		 }

		 //item复制
private: System::Void cms_net_lsp_copy_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 String^ str_ = String::Empty;
			 ListViewItem^ item_ = lv_net_lsp->SelectedItems[0];
			 //
			 for(int i = 0;i < item_->SubItems->Count;i ++)
			 {
				 str_ = str_ + item_->SubItems[i]->Text + " ";
			 }
			 //复制
			 Clipboard::SetDataObject(str_, true);
		 }

		 //subitem复制
private: System::Void cms_net_lsp_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 Clipboard::SetDataObject(tp_net_lsp_sub_item_->Text, true);			 
		 }

         //导出
private: System::Void cms_net_lsp_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_net_lsp);
		 }
#pragma endregion tp_net_lsp

	   //网络连接 --》hosts
#pragma region tp_net_host
		 //显示
private: System::Void txt_net_host_show()
		 {
			 try
			 {
				 StreamReader^ sr = gcnew StreamReader(Environment::SystemDirectory+"\\drivers\\etc\\hosts");
				 txt_net_host->Text = sr->ReadToEnd();
				 sr->Close();
			 }
			 catch(Exception^ ex){ }
			 finally
			 {
				 cms_net_host_save->Enabled = false;
			 }
		 }

		 //
private: System::Void txt_net_host_MouseDown(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 //
				 if (txt_net_host->Text->Length == 0)
				 {
					 //
					 return;
				 }
				 //
				 String^ str_path = Environment::GetEnvironmentVariable("temp") + "\\" + DateTime::Now.ToString()->Replace("-","_")->Replace(" ","_")->Replace(":","_") + ".txt";
				 //
				 StreamWriter^ sw_ = gcnew StreamWriter(str_path);
				 //
				 sw_->Write(txt_net_host->Text);
				 //
				 sw_->Close();
				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_path });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_path);
			 }
		 }

		 //刷新
private: System::Void cms_net_host_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 txt_net_host_show();
		 }

		 //内容改变
private: System::Void txt_net_host_TextChanged(System::Object^  sender, System::EventArgs^  e) {
			 cms_net_host_save->Enabled = true;
		 }

		 //保存
private: System::Void cms_net_host_save_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 StreamWriter^ sw = gcnew StreamWriter(Environment::SystemDirectory+"\\drivers\\etc\\hosts");
				 sw->Write(txt_net_host->Text);
				 sw->Close();
			 }
			 catch(Exception^ ex){ } 
			 finally
			 {
				 cms_net_host_save->Enabled = false;
			 }
		 }

		 //另存为
private: System::Void cms_net_host_saveas_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 SFD->Filter = "txt files(*.txt)|*.txt|all files(*.*)|*.*";
			 //如果确认打开对话框
			 if (SFD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 StreamWriter^ sw = gcnew StreamWriter(SFD->FileName);		
				 sw->Write(txt_net_host->Text);
				 sw->Close();
			 }	
		 }

#pragma endregion tp_net_host

       //启动项
#pragma region tp_run
private: System::Void lv_run_show_func(RegistryKey^ rk_,String^ str_regkey,String^ str_valueName,String^ str_valueName2,String^ str_type){
			 try
			 {
				 RegistryKey^ rk_sub = rk_->OpenSubKey(str_regkey);

				 if (str_valueName!=nullptr)
				 {
					 if (common_net::common_checkRegkeyValue(rk_sub,str_valueName))
					 {
						 String^ str_value = String::Empty;

						 if (rk_sub->GetValueKind(str_valueName)==RegistryValueKind::MultiString)
						 {
							 array<String^>^ strs_  = (array<String^>^)rk_sub->GetValue(str_valueName);
							 for each(String^ str_ in strs_)
							 {
								 str_value = str_value + str_;
							 }
						 }
						 else
						 {
							 str_value = common_net::common_formatString(rk_sub->GetValue(str_valueName)->ToString());
						 }
						 //文件厂商
						 String^ str_comp = common_net::common_getFileCompanyName(str_value);

						 ListViewItem^ item_ = gcnew ListViewItem(str_valueName);
						 item_->SubItems->AddRange(gcnew array<String^>{str_type,str_value,str_comp});
						 lv_run->Items->Add(item_);

						 //设置tag
						 item_->Tag = rk_sub->Name;
					 }
				 }
				 else
				 {
					 //遍历
					 for each(String^ str_ in rk_sub->GetValueNames())
					 {
						 //排除此记录,用于KnownDlls
						 if (str_valueName2!=nullptr && str_->ToLower()==str_valueName2->ToLower())
						 {
							 continue;
						 }
						 String^ str_value = common_net::common_formatString(rk_sub->GetValue(str_)->ToString());
						 //文件厂商
						 String^ str_comp = common_net::common_getFileCompanyName(str_value);

						 ListViewItem^ item_ = gcnew ListViewItem(str_);
						 item_->SubItems->AddRange(gcnew array<String^>{str_type,str_value,str_comp});
						 lv_run->Items->Add(item_);

						 //设置tag
						 item_->Tag = rk_->Name+"\\" + str_regkey +"\\"+str_;	 
					 }
				 }

				 //释放
				 rk_sub->Close();
			 }
			 catch(Exception^ ex){ }
		 }

private: System::Void lv_run_show_func2(RegistryKey^ rk_,String^ str_regkey,String^ str_ ,String^ str_valueName,String^ str_type){
			 try
			 {
				 RegistryKey^ rk_sub = rk_->OpenSubKey(str_regkey);
				 for each(String^ str_1 in rk_sub->GetSubKeyNames())
				 {
					 RegistryKey^ rk_sub2 = rk_sub->OpenSubKey(str_1);
					 if (common_net::common_checkRegkeyValue(rk_sub2,str_valueName))
					 {
						 String^ str_value = common_net::common_formatString(rk_sub2->GetValue(str_valueName)->ToString());
						 //文件厂商
						 String^ str_comp = common_net::common_getFileCompanyName(str_value);

						 ListViewItem^ item_ ;
						 if (str_==nullptr)
						 {
							 item_ = gcnew ListViewItem(str_1);
						 }
						 else
						 {
							 item_ = gcnew ListViewItem(rk_sub2->GetValue(str_)->ToString());
						 }

						 item_->SubItems->AddRange(gcnew array<String^>{str_type,str_value,str_comp});
						 lv_run->Items->Add(item_);

						 //设置tag
						 item_->Tag = rk_sub->Name +"\\"+str_1;

						 //在这里判断文件厂商
						 if (!str_comp->Contains("Microsoft Cor"))
						 {
							 item_->ForeColor=Color::Blue;
						 }	
					 }
				 }
			 }
			 catch(Exception^ ex){ }	  
		 }

private: System::Void lv_run_show_func3(String^ str_regkey,String^ str_type)
		 {
			 //CLSID
			 RegistryKey^ rk_clsid = Registry::ClassesRoot->OpenSubKey("CLSID");
			 //对应
			 RegistryKey^ rk_ = Registry::ClassesRoot->OpenSubKey(str_regkey);

			 //遍历子键
			 for each(String^ str_ in rk_->GetSubKeyNames())
			 {
				 ListViewItem^ item_ = gcnew ListViewItem(str_);

				 //打开子键
				 RegistryKey^ rk_sub = rk_->OpenSubKey(str_);
				 //判断子键是否存在默认值
				 if (common_net::common_checkRegkeyValue(rk_sub,""))
				 {
					 //判断CLSID里面是否存在对应子键
					 if (common_net::common_checkRegkey(rk_clsid,rk_sub->GetValue(nullptr)->ToString()))
					 {
						 //存在的话得到相关信息
						 lv_other_menu_show_func_sub( rk_clsid, item_,rk_sub->GetValue(nullptr)->ToString(),str_type);
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{ str_type,"CLSID不存在！"});
						 item_->ForeColor=Color::Blue;
					 }
				 }
				 //直接判断CLSID里面是否有对应子键
				 else if (common_net::common_checkRegkey(rk_clsid,str_))
				 {
					 //存在的话得到相关信息
					 lv_other_menu_show_func_sub(rk_clsid,item_,str_,str_type);
				 }
				 else
				 {
					 item_->SubItems->AddRange(gcnew array<String^>{str_type,"无效的项！"});
					 item_->ForeColor=Color::Blue;
				 }				 
				 rk_sub->Close();

				 //设置tag
				 item_->Tag = rk_->Name +"\\"+str_;
				 lv_run->Items->Add(item_);
			 }

			 //释放
			 rk_->Close();
			 rk_clsid->Close();
		 }

private: System::Void lv_run_show(){
			 //HKCU Run
			 lv_run_show_func(Registry::CurrentUser,"Software\\Microsoft\\Windows\\CurrentVersion\\Run",nullptr,nullptr,"HKCU Run");

			 //HKLM Run
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows\\CurrentVersion\\Run",nullptr,nullptr,"HKLM Run");

			 //HKLM Explorer Run
			 lv_run_show_func(Registry::CurrentUser,"Software\\Mirosoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run",nullptr,nullptr,"HKCU Explorer Run");

			 //HKLM Explorer Run
			 lv_run_show_func(Registry::LocalMachine,"Software\\Mirosoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run",nullptr,nullptr,"HKLM Explorer Run");

			 //HKCU RunOnce
			 lv_run_show_func(Registry::CurrentUser,"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce",nullptr,nullptr,"HKCU RunOnce");

			 //HKLM RunOnce
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce",nullptr,nullptr,"HKLM RunOnce");

			 //HKCU RunOnce Setup
			 lv_run_show_func(Registry::CurrentUser,"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\Setup",nullptr,nullptr,"HKCU RunOnce Setup");

			 //HKLM RunOnce Setup
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\Setup",nullptr,nullptr,"HKLM RunOnce Setup");

			 //HKCU RunServices
			 lv_run_show_func(Registry::CurrentUser,"Software\\Microsoft\\Windows\\CurrentVersion\\RunServices",nullptr,nullptr,"HKCU RunServices");

			 //HKLM RunServices
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows\\CurrentVersion\\RunServices",nullptr,nullptr,"HKLM RunServices");

			 //HKCU RunServicesOnce
			 lv_run_show_func(Registry::CurrentUser,"Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce",nullptr,nullptr,"HKCU RunServicesOnce");

			 //HKLM RunServicesOnce
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce",nullptr,nullptr,"HKLM RunServicesOnce");

			 //HKCU Windows Load
			 lv_run_show_func(Registry::CurrentUser,"Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows","load",nullptr,"HKCU Windows Load");

			 //HKLM Windows AppInit_DLLs
			 lv_run_show_func(Registry::LocalMachine,"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows","AppInit_DLLs",nullptr,"HKLM Windows AppInit_DLLs");

			 //HKLM Winlogon Notify
			 lv_run_show_func2(Registry::LocalMachine,"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify",nullptr,"DllName","HKLM Winlogon Notify");

			 //HKLM Winlogon Shell
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon","Shell",nullptr,"HKLM Winlogon Shell");

			 //HKLM Winlogon System
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon","System",nullptr,"HKLM Winlogon System");

			 //HKLM Winlogon UIHost
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon","UIHost",nullptr,"HKLM Winlogon UIHost");

			 //HKLM Winlogon Userinit
			 lv_run_show_func(Registry::LocalMachine,"Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon","Userinit",nullptr,"HKLM Winlogon Userinit");

			 //HKLM Print Monitors
			 lv_run_show_func2(Registry::LocalMachine,"SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors",nullptr,"Driver","HKLM Print Monitors");

			 //HKLM Print Providers
			 lv_run_show_func2(Registry::LocalMachine,"SYSTEM\\CurrentControlSet\\Control\\Print\\Providers","DisplayName","Name","HKLM Print Providers");

			 //shellEx
			 lv_run_show_func3("*\\shellex\\ContextMenuHandlers","shellEx");

			 //ALLFSOs shellEx
			 lv_run_show_func3("AllFilesystemObjects\\shellex\\ContextMenuHandlers","ALLFSOs shellEx");

			 //Directory shellEx
			 lv_run_show_func3("Directory\\shellex\\ContextMenuHandlers","Directory shellEx");

			 //BootExecute
			 lv_run_show_func(Registry::LocalMachine,"SYSTEM\\CurrentControlSet\\Control\\Session Manager","BootExecute",nullptr,"HKLM BootExecute");

			 //HKLM KnownDLLs
			 lv_run_show_func(Registry::LocalMachine,"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs",nullptr,"DllDirectory","HKLM KnownDLLs");

			 //HKLM Installed Components
			 lv_run_show_func2(Registry::LocalMachine,"SOFTWARE\\Microsoft\\Active Setup\\Installed Components","","StubPath","HKLM Installed Components");
		 }

		 //控制右键菜单的显示
private: System::Void lv_run_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_run->SelectedItems->Count==0)
			 {
				 cms_run_delete1->Enabled = false;
				 cms_run_delete2->Enabled = false;
				 cms_run_sigverif->Enabled = false;
				 cms_run_copy1->Enabled = false;
				 cms_run_copy2->Enabled = false;
				 cms_run_onlineFind->Enabled = false;
				 cms_run_explorer->Enabled = false;
				 cms_run_explorer2->Enabled = false;
				 cms_run_showProperty->Enabled = false;
				 cms_run_reg->Enabled = false;
			 }
			 else
			 {
				 cms_run_delete1->Enabled = true;
				 cms_run_delete2->Enabled = true;
				 cms_run_sigverif->Enabled = true;
				 cms_run_copy1->Enabled = true;
				 cms_run_copy2->Enabled = true;
				 cms_run_onlineFind->Enabled = true;
				 cms_run_explorer->Enabled = true;
				 cms_run_explorer2->Enabled = true;
				 cms_run_showProperty->Enabled = true;
				 cms_run_reg->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_run_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_run->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_run->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_run_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_run->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_run);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_run_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_run->Items->Clear();
			 lv_run_show();
		 }

		 //删除
private: System::Void cms_run_delete1_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 RegistryKey^ rk_;
				 ListViewItem^ item_ = lv_run->SelectedItems[0];

				 //删除树
				 rk_->DeleteSubKeyTree(item_->SubItems[0]->Text);

				 //释放
				 rk_->Close();
				 //从lv中移除
				 item_->Remove();
			 }
			 catch(Exception^ ex){ MessageBox::Show("删除失败！"); }
		 }

		 //删除2
private: System::Void cms_run_delete2_Click(System::Object^  sender, System::EventArgs^  e) {
		 }

		 //校验数字签名
private: System::Void cms_run_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(lv_run->SelectedItems[0]->SubItems[2]->Text)))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

		 //
private: System::Void thread_run_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_run->Items)
			 {
				 String^ str_filePath = nullptr;

				  //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[2]->Text + "]";
				 str_filePath = item->SubItems[2]->Text;

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_run->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_run->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_run->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_run->Items[index] = item_;
				 index++;
			 }
			 lv_run->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }

		 //校验所有数字签名
private: System::Void cms_run_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_run_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //复制名称
private: System::Void cms_run_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制
			 Clipboard::SetDataObject(lv_run->SelectedItems[0]->SubItems[0]->Text, true);
		 }

		 //复制路径
private: System::Void cms_run_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制
			 Clipboard::SetDataObject(lv_run->SelectedItems[0]->SubItems[2]->Text, true);
		 }

		 //在线搜索
private: System::Void cms_run_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineFind(lv_run->SelectedItems[0]->SubItems[0]->Text);
		 }

		 //在线分析
private: System::Void cms_run_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

		 //定位
private: System::Void cms_run_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_run->SelectedItems[0]->SubItems[2]->Text));
		 }

		 //
private: System::Void cms_run_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_run->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[2]->Text);
		 }

		 //查看属性对话框
private: System::Void cms_run_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_run->SelectedItems[0]->SubItems[2]->Text));
		 }

		 //定位注册表
private: System::Void cms_run_reg_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerReg(common_net::common_stringToHGlobalUni(lv_run->SelectedItems[0]->Tag->ToString()));
			 try
			 {
				 Process::Start("regedit.exe");
			 }
			 catch(Exception^ ex){ }
		 }

		 //导出
private: System::Void cms_run_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_run);
		 }
#pragma endregion tp_run

	   //其他辅助 --》输入输出表查看
#pragma region tp_other_table

		 //表示当前的pe文件
		 static String^ tp_other_table_str_path = nullptr;

		 //
private: System::Void lv_other_table_import(LPTSTR lpFilePath)
		 {
			 //
			 PVOID pBase = pe_getMapViewOfFile(lpFilePath);

			 //失败
			 if (!pBase)
			 {
				 return;
			 }

			 //获得dos头部
			 PIMAGE_DOS_HEADER pImage_dos_header=(PIMAGE_DOS_HEADER)pBase;
			 //获得nt头部
			 PIMAGE_NT_HEADERS pImage_nt_header = (PIMAGE_NT_HEADERS)((ULONG)pBase + pImage_dos_header->e_lfanew);
			 //获得导入表
			 PIMAGE_IMPORT_DESCRIPTOR pImage_import_descriptor = (PIMAGE_IMPORT_DESCRIPTOR)ImageRvaToVa(pImage_nt_header,pBase,pImage_nt_header->OptionalHeader.DataDirectory[1].VirtualAddress,NULL);

			 //遍历导入表
			 while(pImage_import_descriptor->Characteristics != 0)
			 {
				 //dll name
				 ListViewItem^ item_ = gcnew ListViewItem(gcnew String((LPSTR)ImageRvaToVa(pImage_nt_header,pBase,pImage_import_descriptor->Name,NULL)));
				 
				 //
				 item_->SubItems->AddRange(gcnew array<String^>{ 
					 "0x" + (pImage_import_descriptor->OriginalFirstThunk).ToString("X8"),
				     "0x" + (pImage_import_descriptor->TimeDateStamp).ToString("X8"),
					 "0x" + (pImage_import_descriptor->ForwarderChain).ToString("X8"),
					 "0x" + (pImage_import_descriptor->Name).ToString("X8"),
					 "0x" + (pImage_import_descriptor->FirstThunk).ToString("X8")
				 });

				 //
				 lv_other_table->Items->Add(item_);

				 pImage_import_descriptor++;
			 };

			 //
			 UnmapViewOfFile(pBase);
		 }

		 //
private: System::Void lv_other_table_import_func(LPTSTR lpFilePath,LPSTR lpDllName){
			 //
			 PVOID pBase = pe_getMapViewOfFile(lpFilePath);

			 //失败
			 if (!pBase)
			 {
				 return;
			 }

			 //获得dos头部
			 PIMAGE_DOS_HEADER pImage_dos_header=(PIMAGE_DOS_HEADER)pBase;
			 //获得nt头部
			 PIMAGE_NT_HEADERS pImage_nt_header = (PIMAGE_NT_HEADERS)((ULONG)pBase + pImage_dos_header->e_lfanew);
			 //获得导入表
			 PIMAGE_IMPORT_DESCRIPTOR pImage_import_descriptor = (PIMAGE_IMPORT_DESCRIPTOR)ImageRvaToVa(pImage_nt_header,pBase,pImage_nt_header->OptionalHeader.DataDirectory[1].VirtualAddress,NULL);
			
			 //遍历导入表
			 while(pImage_import_descriptor->Characteristics != 0)
			 {
				 //
				 if (!stricmp((LPSTR)ImageRvaToVa(pImage_nt_header,pBase,pImage_import_descriptor->Name,NULL),lpDllName))
				 {
					 //
					 PIMAGE_THUNK_DATA pImage_thunk_data2 = (PIMAGE_THUNK_DATA)pImage_import_descriptor->OriginalFirstThunk;

					 PIMAGE_THUNK_DATA pImage_thunk_data = (PIMAGE_THUNK_DATA)ImageRvaToVa(pImage_nt_header,pBase,pImage_import_descriptor->OriginalFirstThunk,NULL);

					 while(*(PDWORD)pImage_thunk_data)
					 {
						 //
						 ListViewItem^ item_ = gcnew ListViewItem("0x" + ((DWORD)pImage_thunk_data2).ToString("X8"));

						 //
						 String^ str_hint = String::Empty;
						 String^ str_func = String::Empty;

						 //
						 if (HIWORD(*(PDWORD)pImage_thunk_data) == 0x8000)
						 {			
							 str_hint = "-";

							 WCHAR buffer[20] = { 0 };
							 wsprintf(buffer, L"Ordinal:0x%08lX",IMAGE_ORDINAL32(*(PDWORD)pImage_thunk_data));

							 //
							 str_func = gcnew String(buffer);
						 }
						 else 
						 {
							 //
							 PIMAGE_IMPORT_BY_NAME pImage_import_by_name = (PIMAGE_IMPORT_BY_NAME)ImageRvaToVa(pImage_nt_header,pBase,pImage_thunk_data->u1.AddressOfData,NULL);
							
							 if (pImage_import_by_name)
							 {
								 WCHAR buffer[20] = { 0 };
								 wsprintf(buffer,L"0x%04lX",pImage_import_by_name->Hint);
								 str_hint = gcnew String(buffer);

								 //
								 str_func = gcnew String((LPSTR)pImage_import_by_name->Name);
							 }
							 else
							 {
								 str_hint = "-";

								 WCHAR buffer[20] = { 0 };
								 wsprintf(buffer, L"MemAddr:0x%08lX",*(PDWORD)pImage_thunk_data);

								 //
								 str_func = gcnew String((LPSTR)pImage_import_by_name->Name);
							 }
						 }

						 //
						 item_->SubItems->AddRange(gcnew array<String^>{"0x" + ((DWORD)pImage_thunk_data).ToString("X8"),"0x" + (pImage_thunk_data->u1.Function).ToString("X8"),str_hint,str_func});

						 //
						 lv_other_table_func->Items->Add(item_);

						 pImage_thunk_data2 ++;
						 //
						 pImage_thunk_data ++;
					 }	 
				 }			 

				 //
				 pImage_import_descriptor ++;
			 };

			 //
			 UnmapViewOfFile(pBase);
		 }

		 //控制右键菜单的显示
private: System::Void lv_other_table_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (String::IsNullOrEmpty(tp_other_table_str_path))
			 {
				 cms_other_table_view->Enabled = false;
				 cms_other_exportTable->Enabled = false;
			 }
			 else
			 {
				 cms_other_table_view->Enabled = true;

				 //
				 if (pe_findExportDir(common_net::common_stringToHGlobalUni(tp_other_table_str_path)))
				 {
					 cms_other_exportTable->Enabled = true;
				 }
				 else
				 {
					 cms_other_exportTable->Enabled = false;
				 }

				 if (lv_other_table->SelectedItems->Count != 0)
				 {
					 //清空
					 if (lv_other_table_func->Items->Count > 0)
					 {
						 lv_other_table_func->Items->Clear();
					 }

					 //
					 lv_other_table_import_func(common_net::common_stringToHGlobalUni(tp_other_table_str_path),
						 common_net::common_stringToHGlobalAnsi(lv_other_table->SelectedItems[0]->SubItems[0]->Text));
				 }		 
			 }
		 }

		 //排序
private: System::Void lv_other_table_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 0)
				 {
					 //数子排序
					 lv_other_table->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_other_table->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 0)
				 {
					 //数字排序
					 lv_other_table->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_other_table->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //
private: System::Void lv_other_table_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 if (e->Data->GetDataPresent(DataFormats::FileDrop))
			 {
				 e->Effect = DragDropEffects::Link;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void lv_other_table_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 array<String^>^ fileNames = (array<String^>^)e->Data->GetData(DataFormats::FileDrop);

			 //清空
			 if (lv_other_table->Items->Count > 0)
			 {
				 lv_other_table->Items->Clear();
			 }

			 //
			 FileInfo^ fi_ = gcnew FileInfo(fileNames[0]);

			 //如果为文件夹
			 if (fi_->Attributes == FileAttributes::Directory)
			 {
				 return;
			 }
			 else
			 {	
				 //如果不是pe的话就返回
				 if (!common_isPEFile(common_net::common_stringToHGlobalUni(fileNames[0])))
				 {
					 return;
				 }

				 //获得导入的dll模块信息
				 lv_other_table_import(common_net::common_stringToHGlobalUni(fileNames[0]));

				 //记录
				 tp_other_table_str_path = fileNames[0];
			 }
		 }

		 //拖放保存
private: System::Void lv_other_table_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_table->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_table);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //拖放保存
private: System::Void lv_other_table_func_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_table_func->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_table_func);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //查看
private: System::Void cms_other_table_open_Click(System::Object^  sender, System::EventArgs^  e) {
			 ULONG ulIndex = 0;

			 //如果是要相应文件面板里面的操作的话
			 if (tp_file_bl_toTable)
			 {
				 //
				 lv_other_table_import(common_net::common_stringToHGlobalUni(tp_file_str_tableFile));

				 //记录
				 tp_other_table_str_path = tp_file_str_tableFile;
				 return;
			 }

			 OFD->Filter = "exe files(*.exe)|*.exe|dll files(*.dll)|*.dll|all files(*.*)|*.*";
			 OFD->Multiselect = false;

			 if (OFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //如果不是pe的话就返回
				 if (!common_isPEFile(common_net::common_stringToHGlobalUni(OFD->FileName)))
				 {
					 return;
				 }

				 //
				 lv_other_table_import(common_net::common_stringToHGlobalUni(OFD->FileName));

				 //记录
				 tp_other_table_str_path = OFD->FileName;
			 }
		 }

		 //详细信息
private: System::Void cms_other_table_view_Click(System::Object^  sender, System::EventArgs^  e) {
			 other_table_view_form^ f = gcnew other_table_view_form(tp_other_table_str_path);
			 f->ShowDialog();
		 }

		 //
private: System::Void cms_other_exportTable_Click(System::Object^  sender, System::EventArgs^  e) {
			 other_table_export_form^ f = gcnew other_table_export_form(tp_other_table_str_path);
			 f->ShowDialog();
		 }

		 //PE感染
private: System::Void cms_other_table_infect_Click(System::Object^  sender, System::EventArgs^  e) {
			 other_table_infect_form^ f = gcnew other_table_infect_form();
			 f->ShowDialog();
		 }

		 //导出
private: System::Void cms_other_table_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_table);
		 }
#pragma endregion tp_other_table

	   //其他辅助 --》md5批校验
#pragma region tp_other_md5
		 //枚举文件
private: System::Void lv_other_md5_enumFiles(String^ str_dir)
		 {
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dir= Directory::GetDirectories(str_dir);

				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);

				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);

					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //获得文件厂商
					 String^ str_comp = common_net::common_getFileCompanyName(str_);

					 //如果文件签名了
					 if (sigverif_check(common_net::common_stringToHGlobalUni(str_)))
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,str_comp,common_net::common_getFileMD5(str_)});
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,str_comp,common_net::common_getFileMD5(str_)});
					 }

					 lv_other_md5->Items->Add(item_);
				 }

				 //遍历当前目录下的子目录
				 for each (String^ str_ in strs_dir)
				 {
					 lv_other_md5_enumFiles(str_);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //控制右键菜单的显示
private: System::Void lv_other_md5_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_other_md5->Items->Count==0)
			 {
				 cms_other_md5_clear->Enabled = false;
				 cms_other_md5_explorer->Enabled=false;
				 cms_other_md5_explorer2->Enabled=false;
				 cm_other_md5_showProperty->Enabled=false;
				 cms_other_md5_copy1->Enabled=false;
				 cms_other_md5_copy2->Enabled=false;
			 }
			 else if (lv_other_md5->SelectedItems->Count==0)
			 {
				 cms_other_md5_clear->Enabled = true;
				 cms_other_md5_explorer->Enabled=false;
				 cms_other_md5_explorer2->Enabled=false;
				 cm_other_md5_showProperty->Enabled=false;
				 cms_other_md5_copy1->Enabled=false;
				 cms_other_md5_copy2->Enabled=false;
			 }
			 else
			 {
				 cms_other_md5_clear->Enabled = true;
				 cms_other_md5_explorer->Enabled=true;
				 cms_other_md5_explorer2->Enabled=true;
				 cm_other_md5_showProperty->Enabled=true;
				 cms_other_md5_copy1->Enabled=true;
				 cms_other_md5_copy2->Enabled=true;
			 }
		 }

		 //
private: System::Void lv_other_md5_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_other_md5->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_other_md5->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //
private: System::Void lv_other_md5_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 if (e->Data->GetDataPresent(DataFormats::FileDrop))
			 {
				 e->Effect = DragDropEffects::Link;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void lv_other_md5_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 array<String^>^ fileNames = (array<String^>^)e->Data->GetData(DataFormats::FileDrop);

			 //清空
			 if (lv_other_md5->Items->Count > 0)
			 {
				 lv_other_md5->Items->Clear();
			 }
			 
			 //
			 for each(String^ str_ in fileNames)
			 {
				 FileInfo^ fi_ = gcnew FileInfo(str_);

				 //如果为文件夹
				 if (fi_->Attributes == FileAttributes::Directory)
				 {
					 lv_other_md5_enumFiles(str_);
				 }
				 else
				 {
					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //获得文件厂商
					 String^ str_comp = common_net::common_getFileCompanyName(str_);

					 //如果文件签名了
					 if (sigverif_check(common_net::common_stringToHGlobalUni(str_)))
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,str_comp,common_net::common_getFileMD5(str_)});
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,str_comp,common_net::common_getFileMD5(str_)});
					 }

					 //
					 lv_other_md5->Items->Add(item_);
				 }
			 }
		 }

		 //拖放保存
private: System::Void lv_other_md5_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_md5->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_md5);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //打开文件
private: System::Void cms_other_md5_openFile_Click(System::Object^  sender, System::EventArgs^  e) {
			 OFD->Filter = "exe files(*.exe)|*.exe|dll files(*.dll)|*.dll|all files(*.*)|*.*";
			 OFD->Multiselect = true;
			 if (OFD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 lv_other_md5->Items->Clear();

				 for each(String^ str_ in OFD->FileNames)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);

					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //获得文件厂商
					 String^ str_comp = common_net::common_getFileCompanyName(str_);

					 //如果文件签名了
					 if (sigverif_check(common_net::common_stringToHGlobalUni(str_)))
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,str_comp,common_net::common_getFileMD5(str_)});
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,str_comp,common_net::common_getFileMD5(str_)});
					 }

					 //
					 lv_other_md5->Items->Add(item_);
				 }
			 }
		 }

		 //打开文件夹
private: System::Void cms_other_md5_openFolder_Click(System::Object^  sender, System::EventArgs^  e) {
			 FBD->ShowNewFolderButton = true;
			 if (FBD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 lv_other_md5->Items->Clear();

				 DirectoryInfo^ di_ = gcnew DirectoryInfo(FBD->SelectedPath);
				 for each(FileInfo^ fi_ in di_->GetFiles())
				 {
					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //获得文件厂商
					 String^ str_comp = common_net::common_getFileCompanyName(fi_->FullName);

					 item_->SubItems->AddRange(gcnew array<String^>{fi_->FullName,str_comp,common_net::common_getFileMD5(fi_->FullName)});

					 lv_other_md5->Items->Add(item_);
				 }
			 }
		 }

		 //打开文件夹包括子文件夹
private: System::Void cms_other_md5_openFolder2_Click(System::Object^  sender, System::EventArgs^  e) {
			 FBD->ShowNewFolderButton = true;
			 if (FBD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 lv_other_md5->Items->Clear();

				 lv_other_md5_enumFiles(FBD->SelectedPath);
			 }
		 }

private: System::Void cms_other_md5_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_other_md5->Items->Clear();
		 }

		 //复制MD5值
private: System::Void cms_other_md5_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制到剪切板
			 Clipboard::SetDataObject(lv_other_md5->SelectedItems[0]->SubItems[3]->Text, true);
		 }

		 //复制文件名和MD5
private: System::Void cms_other_md5_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制到剪切板
			 Clipboard::SetDataObject(lv_other_md5->SelectedItems[0]->SubItems[0]->Text+"_md5:"+lv_other_md5->SelectedItems[0]->SubItems[3]->Text, true);
		 }

		 //定位
private: System::Void cms_other_md5_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_other_md5->SelectedItems[0]->SubItems[1]->Text));
		 }

		 //
private: System::Void cms_other_md5_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_other_md5->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[1]->Text);
		 }

		 //查看文件属性
private: System::Void cm_other_md5_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_other_md5->SelectedItems[0]->SubItems[1]->Text));
		 }

		 //导出
private: System::Void cms_other_md5_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_md5);
		 }
#pragma endregion tp_other_md5

	   //其他辅助 --》右键菜单
#pragma region tp_other_menu
		 //
private: System::Void lv_other_menu_show_func_sub(RegistryKey^ rk_clsid,ListViewItem^ item_,String^ str_regkey,String^ str_type)
		 {
			 //CLSID子键
			 RegistryKey^ rk_clsid_sub = rk_clsid->OpenSubKey(str_regkey);

			 if (common_net::common_checkRegkey(rk_clsid_sub,"InprocServer32"))
			 {
				 //CLSID子键的子键
				 RegistryKey^ rk_clsid_sub2 = rk_clsid_sub->OpenSubKey("InprocServer32");

				 if (common_net::common_checkRegkeyValue(rk_clsid_sub2,""))
				 {
					 //获得默认数据
					 String^ str_value = rk_clsid_sub2->GetValue(nullptr)->ToString();
					 String^ str_comp = common_net::common_getFileCompanyName(common_net::common_formatString(str_value));

					 item_->SubItems->AddRange(gcnew array<String^>{str_type,str_value,str_comp});

					 //在这里判断文件厂商
					 if (!str_comp->Contains("Microsoft Cor"))
					 {
						 item_->ForeColor=Color::Blue;
					 }
				 }
				 else
				 {
					 item_->SubItems->AddRange(gcnew array<String^>{ str_type,"文件不存在！"});
					 item_->ForeColor=Color::Blue;
				 }

				 //释放
				 rk_clsid_sub2->Close();
			 }
			 //如果不存在InprocServer32，说明项无效
			 else
			 {
				 item_->SubItems->AddRange(gcnew array<String^>{ str_type,"无效的CLSID！"});
				 item_->ForeColor=Color::Blue;
			 }

			 //释放
			 rk_clsid_sub->Close();
		 }

private: System::Void lv_other_menu_show_func(String^ str_regkey,String^ str_type)
		 {
			 //CLSID
			 RegistryKey^ rk_clsid = Registry::ClassesRoot->OpenSubKey("CLSID");
			 //对应
			 RegistryKey^ rk_ = Registry::ClassesRoot->OpenSubKey(str_regkey);

			 //遍历子键
			 for each(String^ str_ in rk_->GetSubKeyNames())
			 {
				 ListViewItem^ item_ = gcnew ListViewItem(str_);

				 //打开子键
				 RegistryKey^ rk_sub = rk_->OpenSubKey(str_);
				 //判断子键是否存在默认值
				 if (common_net::common_checkRegkeyValue(rk_sub,""))
				 {
					 //判断CLSID里面是否存在对应子键
					 if (common_net::common_checkRegkey(rk_clsid,rk_sub->GetValue(nullptr)->ToString()))
					 {
						 //存在的话得到相关信息
						 lv_other_menu_show_func_sub( rk_clsid, item_,rk_sub->GetValue(nullptr)->ToString(),str_type);
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{ str_type,"CLSID不存在！"});
						 item_->ForeColor=Color::Blue;
					 }
				 }
				 //直接判断CLSID里面是否有对应子键
				 else if (common_net::common_checkRegkey(rk_clsid,str_))
				 {
					 //存在的话得到相关信息
					 lv_other_menu_show_func_sub(rk_clsid,item_,str_,str_type);
				 }
				 else
				 {
					 item_->SubItems->AddRange(gcnew array<String^>{str_type,"无效的项！"});
					 item_->ForeColor=Color::Blue;
				 }				 
				 rk_sub->Close();

				 lv_other_menu->Items->Add(item_);
			 }

			 //释放
			 rk_->Close();
			 rk_clsid->Close();
		 }

private: System::Void lv_other_menu_show(){
			 try
			 {
				 //shell
				 //如果不存在shell的话
				 if (common_net::common_checkRegkey(Registry::ClassesRoot->OpenSubKey("*"),"shell"))
				 {
					 RegistryKey^ rk_ = Registry::ClassesRoot->OpenSubKey("*\\shell");
					 for each(String^ str_ in rk_->GetSubKeyNames())
					 {
						 ListViewItem^ item_ = gcnew ListViewItem(str_);
						 //获得子键的句柄
						 RegistryKey^ rk_sub = rk_->OpenSubKey(str_);

						 //判断是否存在command子键
						 if (common_net::common_checkRegkey(rk_sub,"command"))
						 {
							 RegistryKey^ rk_sub2 = rk_sub->OpenSubKey("command");
							 //获得默认数据
							 String^ str_value = rk_sub2->GetValue(nullptr)->ToString();
							 item_->SubItems->AddRange(gcnew array<String^>{ "shell",str_value});
							 rk_sub2->Close();

							 //在这里判断文件厂商
							 if (!common_net::common_getFileCompanyName(common_net::common_formatString(str_value))->Contains("Microsoft Cor"))
							 {
								 item_->ForeColor=Color::Blue;
							 }
						 }
						 else
						 {
							 item_->SubItems->AddRange(gcnew array<String^>{ "shell",""});
							 item_->ForeColor=Color::Blue;
						 }

						 rk_sub->Close();
						 lv_other_menu->Items->Add(item_);		 
					 }
					 rk_->Close();
				 }
				 
				 //shellEx
				 lv_other_menu_show_func("*\\shellex\\ContextMenuHandlers","shellEx");

				 //ALLFSOs shellEx
				 lv_other_menu_show_func("AllFilesystemObjects\\shellex\\ContextMenuHandlers","ALLFSOs shellEx");

				 //Directory shellEx
				 lv_other_menu_show_func("Directory\\shellex\\ContextMenuHandlers","Directory shellEx");	
			 }
			 catch(Exception^ ex){}
		 }

		 //控制右键菜单的显示
private: System::Void lv_other_menu_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_other_menu->SelectedItems->Count==0)
			 {
				 cms_other_menu_delete1->Enabled = false;
				 cms_other_menu_delete2->Enabled = false;
				 cms_other_menu_sigverif->Enabled = false;
				 cms_other_menu_copy1->Enabled = false;
				 cms_other_menu_copy2->Enabled = false;
				 cms_other_menu_onlineFind->Enabled = false;
				 cms_other_menu_explorer->Enabled = false;
				 cms_other_menu_explorer2->Enabled = false;
				 cms_other_menu_showProperty->Enabled = false;
				 cms_other_menu_reg->Enabled = false;
			 }
			 else
			 {
				 cms_other_menu_delete1->Enabled = true;
				 cms_other_menu_delete2->Enabled = true;
				 cms_other_menu_sigverif->Enabled = true;
				 cms_other_menu_copy1->Enabled = true;
				 cms_other_menu_copy2->Enabled = true;
				 cms_other_menu_onlineFind->Enabled = true;
				 cms_other_menu_explorer->Enabled = true;
				 cms_other_menu_explorer2->Enabled = true;
				 cms_other_menu_showProperty->Enabled = true;
				 cms_other_menu_reg->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_other_menu_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_other_menu->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_other_menu->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_other_menu_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_menu->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_menu);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_other_menu_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_other_menu->Items->Clear();
			 lv_other_menu_show();
		 }

		 //删除注册表
private: System::Void cms_other_menu_delete1_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 RegistryKey^ rk_;
				 ListViewItem^ item_ = lv_other_menu->SelectedItems[0];

				 if (item_->SubItems[1]->Text == "shell")
				 {
					 rk_ = Registry::ClassesRoot->OpenSubKey("*\\shell",true);
				 }
				 else if (item_->SubItems[1]->Text == "shellEx")
				 {
					 rk_ = Registry::ClassesRoot->OpenSubKey("*\\shellex\\ContextMenuHandlers",true);
				 }
				 else if (item_->SubItems[1]->Text == "ALLFSOs shellEx")
				 {
					 rk_ = Registry::ClassesRoot->OpenSubKey("AllFilesystemObjects\\shellex\\ContextMenuHandlers",true);
				 }
				 else
				 {
					 rk_ = Registry::ClassesRoot->OpenSubKey("Directory\\shellex\\ContextMenuHandlers",true);
				 }
				 //删除树
				 rk_->DeleteSubKeyTree(item_->SubItems[0]->Text);

				 //释放
				 rk_->Close();
				 //从lv中移除
				 item_->Remove();
			 }
			 catch(Exception^ ex){ MessageBox::Show("删除失败！"); }
		 }

		 //删除注册信息和文件
private: System::Void cms_other_menu_delete2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_other_menu->SelectedItems[0];
			 //判断文件是否存在
			 if (File::Exists(common_net::common_formatString(item_->SubItems[2]->Text)))
			 {
				 try
				 {
					 File::Delete(common_net::common_formatString(item_->SubItems[2]->Text));
				 }
				 catch(Exception^ ex){ MessageBox::Show("删除文件失败！");}		 
			 }
			 //调用删除注册表方法
			 cms_other_menu_delete1_Click(sender,e);
		 }

		 //校验数字签名
private: System::Void cms_other_menu_sigverif_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (sigverif_check(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_other_menu->SelectedItems[0]->SubItems[2]->Text))))
			 {
				 MessageBox::Show("此文件已签名！");
			 }
			 else
			 {
				 MessageBox::Show("此文件没有签名！");
			 }
		 }

private: System::Void thread_other_menu_sigverifAll_func()
		 {
			 List<ListViewItem^>^ lst_item_red = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_blue = gcnew List<ListViewItem^>();
			 List<ListViewItem^>^ lst_item_default = gcnew List<ListViewItem^>();

			 for each(ListViewItem^ item in lv_other_menu->Items)
			 {
				 String^ str_filePath = nullptr;

				 //操作信息
				 tsp_lbl_msg->Text = "--->>>[" + item->SubItems[2]->Text + "]";
				 str_filePath = item->SubItems[2]->Text;

				 //验证数字签名
				 if (!sigverif_check(common_net::common_stringToHGlobalUni(str_filePath)))
				 {
					 lst_item_red->Add(item);
				 }
				 else if(item->ForeColor==Color::Blue)
				 {
					 lst_item_blue->Add(item);
				 }
				 else
				 {
					 lst_item_default->Add(item);			
				 }
			 }

			 tsp_lbl_msg->Text = nullptr;

			 lv_other_menu->BeginUpdate();
			 int index=0;
			 //重新排列项目
			 //红色在上面
			 for each(ListViewItem^ item in lst_item_red)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 item_->ForeColor = Color::HotPink;
				 lv_other_menu->Items[index] = item_;
				 index++;
			 }
			 //蓝色在中间
			 for each(ListViewItem^ item in lst_item_blue)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_other_menu->Items[index] = item_;
				 index++;
			 }
			 //默认在最下面
			 for each(ListViewItem^ item in lst_item_default)
			 {
				 ListViewItem^ item_ = (ListViewItem^)item->Clone();
				 lv_other_menu->Items[index] = item_;
				 index++;
			 }
			 lv_other_menu->EndUpdate();
			 //
			 tc_main->Enabled = true;
			 //取消
			 lbl_quit->Visible = false;
		 }

		 //校验所有数字签名
private: System::Void cms_other_menu_sigverifAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //首先变灰面板
			 tc_main->Enabled = false;
			 //取消
			 lbl_quit->Visible = true;
			 //开启线程验证
			 thread_sigverif = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_other_menu_sigverifAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //复制名称
private: System::Void cms_other_menu_copy1_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制
			 Clipboard::SetDataObject(lv_other_menu->SelectedItems[0]->SubItems[0]->Text, true);
		 }

		 //复制路径
private: System::Void cms_other_menu_copy2_Click(System::Object^  sender, System::EventArgs^  e) {
			 //复制
			 Clipboard::SetDataObject(common_net::common_formatString(lv_other_menu->SelectedItems[0]->SubItems[2]->Text), true);
		 }

		 //在线搜索
private: System::Void cms_other_menu_onlineFind_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineFind(lv_other_menu->SelectedItems[0]->SubItems[0]->Text);
		 }

		 //在线分析
private: System::Void cms_other_menu_onlineAnalysis_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_onlineAnalysis();
		 }

		 //定位文件
private: System::Void cms_other_menu_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(common_net::common_formatString(lv_other_menu->SelectedItems[0]->SubItems[2]->Text)));
		 }

		 //
private: System::Void cms_other_menu_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_other_menu->SelectedItems[0];
			 lv_file_jmp(common_net::common_formatString(item_->SubItems[2]->Text));
		 }

		 //查看文件属性
private: System::Void cms_other_menu_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(common_net::common_formatString(lv_other_menu->SelectedItems[0]->SubItems[2]->Text)));
		 }

		 //定位注册表
private: System::Void cms_other_menu_reg_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_other_menu->SelectedItems[0];
			 String^ str_ = String::Empty;

			 if (item_->SubItems[1]->Text == "shell")
			 {
				 str_ = "*\\shell";
			 }
			 else if (item_->SubItems[1]->Text == "shellEx")
			 {
				 str_ = "*\\shellex\\ContextMenuHandlers";
			 }
			 else if (item_->SubItems[1]->Text == "ALLFSOs shellEx")
			 {
				 str_ = "AllFilesystemObjects\\shellex\\ContextMenuHandlers";
			 }
			 else
			 {
				 str_ = "Directory\\shellex\\ContextMenuHandlers";
			 }

			 common_explorerReg(common_net::common_stringToHGlobalUni("HKEY_CLASSES_ROOT\\" + str_ + "\\" + item_->SubItems[0]->Text));
			 try
			 {
				 Process::Start("regedit.exe");
			 }
			 catch(Exception^ ex){ }
		 }

		 //导出
private: System::Void cms_other_menu_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_menu);
		 }

		 //浏览
private: System::Void btn_other_menu_browse_Click(System::Object^  sender, System::EventArgs^  e) {
			 OFD->Filter = "exe files(*.exe)|*.exe|all files(*.*)|*.*";
			 OFD->Multiselect = false;
			 if (OFD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 txt_other_menu_path->Text = OFD->FileName;
			 }
		 }

		 //清空
private: System::Void btn_other_menu_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 txt_other_menu_name->Clear();
			 txt_other_menu_path->Clear();
			 txt_other_menu_param->Clear();
		 }

		 //确定
private: System::Void btn_other_menu_ok_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (String::IsNullOrEmpty(txt_other_menu_name->Text))
			 {
				 MessageBox::Show("新增字段名不能为空！");
				 txt_other_menu_name->Focus();
				 return;
			 }
			 if (String::IsNullOrEmpty(txt_other_menu_path->Text))
			 {
				 MessageBox::Show("应用程序路径不能为空！");
				 txt_other_menu_path->Focus();
				 return;
			 }
			 try
			 {
				 //shell
				 if (!common_net::common_checkRegkey(Registry::ClassesRoot,"*\\shell"))
				 {
					 Registry::ClassesRoot->OpenSubKey("*",true)->CreateSubKey("shell");
				 }

				 RegistryKey^ rk_ = Registry::ClassesRoot->OpenSubKey("*\\shell",true);
				 if (common_net::common_checkRegkey(rk_,txt_other_menu_name->Text))
				 {
					 MessageBox::Show("新增字段名重复！");
					 txt_other_menu_name->Focus();
					 return;
				 }
				 else
				 {
					 //新增子键
					 RegistryKey^ rk_sub = rk_->CreateSubKey(txt_other_menu_name->Text);
					 //新增command子键
					 rk_sub = rk_sub->CreateSubKey("command");
					 //新建值
					 rk_sub->SetValue("",txt_other_menu_path->Text+" "+txt_other_menu_param->Text,RegistryValueKind::String);
					 rk_sub->Close();
				 }
				 rk_->Close();

				 MessageBox::Show("创建成功！");
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message); }
		 }

		 //重启外壳程序
private: System::Void btn_other_menu_restart_Click(System::Object^  sender, System::EventArgs^  e) {
		 }
#pragma endregion tp_other_menu

	   //其他辅助 --》IE代理
#pragma region tp_other_proxy
		 //转换端口时要用的
		 static array<String^>^ tp_other_proxy_strs_letter=gcnew array<String^>{"c","k","z","m","b","w","i","r","l","d"};
		 static array<String^>^ tp_other_proxy_strs_value=gcnew array<String^>{"1","2","3","4","5","6","7","8","9","0"};

		 //IE代理有效性检测
private: bool lv_other_proxy_check(String^ str_)
		 {
			 try
			 {
				 WebRequest^ webRequest = WebRequest::Create("http://www.baidu.com");
				 WebProxy^ webProxy = gcnew WebProxy(); 
				 //代理的地址和端口号
				 Uri^ uri = gcnew Uri("http://"+str_);
				 webProxy->Address = uri;
				 webRequest->Proxy = webProxy;
				 WebResponse^ myWebResponse = webRequest->GetResponse(); 
				 //代理有效
				 return true;
			 }
			 catch(Exception^ ex){ return false; } 
		 }

		 //IE代理有效性检测
private: System::Void lv_other_proxy_check(Object^ obj_)
		 {
			 ListViewItem^ item_ = (ListViewItem^)obj_;

			 try
			 {
				 WebRequest^ webRequest = WebRequest::Create("http://www.baidu.com");

				 WebProxy^ webProxy = gcnew WebProxy(); 
				 //代理的地址和端口号
				 Uri^ uri = gcnew Uri("http://" + item_->SubItems[0]->Text);

				 webProxy->Address = uri;

				 webRequest->Proxy = webProxy;

				 WebResponse^ myWebResponse = webRequest->GetResponse(); 

				 //
				 item_->SubItems[4]->Text = "Y";
				 item_->Tag = "Y";
			 }
			 catch(Exception^ ex)
			 { 
				 //
				 item_->SubItems[4]->Text = "N";
				 item_->Tag = "N";
			 } 
		 }

		 //显示第一页代理
private: System::Void lv_other_proxy_getData(String^ str_){
			 try
			 {
				 //web客户端
				 WebClient^ webclient = gcnew WebClient();
				 //下载数据
				 String^ str_content=webclient->DownloadString(str_);
				 //正则
				 String^ str_regex = "<tr><td>.*</td></tr>";
				 //忽略大小写
				 Regex^ regex = gcnew Regex(str_regex, RegexOptions::IgnoreCase);
				 //开始匹配
				 MatchCollection^ matchCollection = regex->Matches(str_content);
				 //获得匹配字符串
				 for (int i = 1; i <= matchCollection->Count; i++)
				 {
					 try
					 {
						 //分割
						 array<String^>^ strs_=matchCollection[i - 1]->Value->Split(gcnew array<String^>{"</td><td>"},StringSplitOptions::RemoveEmptyEntries);
						 //得到转换后的字符串
						 String^ str=strs_[0]->Replace("<tr><td>","")->Replace("<SCRIPT type=text/javascript>document.write(\"","")->Replace(")</SCRIPT>","")->Replace("+","")->Replace("\"","");
						 //把字母转换成端口
						 for (int i=0;i<tp_other_proxy_strs_letter->Length;i++)
						 {
							 if (str->Contains(tp_other_proxy_strs_letter[i]))
							 {
								 str=str->Replace(tp_other_proxy_strs_letter[i],tp_other_proxy_strs_value[i]);
							 }
						 }
						 //添加
						 ListViewItem^ item=gcnew ListViewItem(str);
						 item->SubItems->AddRange(gcnew array<String^>{strs_[1],strs_[2],strs_[3]->Replace("</td></tr>",""),""});
						 lv_other_proxy->Items->Add(item);
					 }
					 catch(Exception^ ex){}
				 } 			 
			 }
			 catch(Exception^ ex){ }
		 }

		 //
private: System::Void lv_other_proxy_show()
		 {
			 String^ str_type = common_net::config_getPrivateProfileString("main","lv_other_proxy_1",Application::StartupPath+"\\Deianeira.config");
			 if (str_type=="http")
			 {
				 for (int i=1;i<=10;i++)
				 {
					 lv_other_proxy_getData("http://www.cnproxy.com/proxy"+i.ToString()+".html");
				 }
				 cms_other_proxy_http->Checked = true;
				 if (cms_other_proxy_edu->Checked)
				 {
					 cms_other_proxy_edu->Checked=false;
				 }
			 }
			 else
			 {
				 for (int i=1;i<=2;i++)
				 {
					 lv_other_proxy_getData("http://www.cnproxy.com/proxyedu"+i.ToString()+".html");
				 }
				 cms_other_proxy_edu->Checked = true;
				 if (cms_other_proxy_http->Checked)
				 {
					 cms_other_proxy_http->Checked=false;
				 }
			 }
		 }

		 //控制右键菜单的显示
private: System::Void lv_other_proxy_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_other_proxy->SelectedItems->Count==0)
			 {
				 cms_other_proxy_check->Enabled = false;
				 cms_other_proxy_checkAll->Enabled = false;
				 cms_other_proxy_use->Enabled = false;
			 }
			 else
			 {
				 if(lv_other_proxy->SelectedItems[0]->Tag != nullptr && (lv_other_proxy->SelectedItems[0]->Tag->ToString() == "Y" ||
					 lv_other_proxy->SelectedItems[0]->Tag->ToString() == "N"))
				 {
					 cms_other_proxy_check->Enabled = false;
				 }
				 else
				 {
					 cms_other_proxy_check->Enabled = true;
				 }

				 if (lv_other_proxy->SelectedItems[0]->Tag != nullptr && lv_other_proxy->SelectedItems[0]->Tag->ToString() == "Y")
				 {
					 cms_other_proxy_use->Enabled = true;
				 }
				 else if (lv_other_proxy->SelectedItems[0]->Tag != nullptr && lv_other_proxy->SelectedItems[0]->Tag->ToString() == "N")
				 {
					 cms_other_proxy_use->Enabled = false;
				 }
				 else
				 {
					 cms_other_proxy_use->Enabled = false;
				 }

				 cms_other_proxy_checkAll->Enabled = true;	 
			 }

			 //在这里判断是否已经代理
			 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings");

			 //
			 String^ str_ = rk_->GetValue("ProxyEnable")->ToString();

			 if (str_ == "0")
			 {
				 cms_other_proxy_quit->Enabled = false;
			 }
			 else
			 {
				 cms_other_proxy_quit->Enabled = true;
			 }

			 rk_->Close();
		 }

		 //
private: System::Void lv_other_proxy_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_other_proxy->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_other_proxy->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_other_proxy_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_proxy->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_proxy);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_other_proxy_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_other_proxy->Items->Clear();
			 lv_other_proxy_show();
		 }

		 //http代理
private: System::Void cms_other_proxy_http_Click(System::Object^  sender, System::EventArgs^  e) {
			 //保存信息到配置文件
			 common_net::config_writePrivateProfileString("main","lv_other_proxy_1","http",Application::StartupPath+"\\Deianeira.config");
			 cms_other_proxy_refresh_Click(sender,e);
		 }

		 //教育网代理
private: System::Void cms_other_proxy_edu_Click(System::Object^  sender, System::EventArgs^  e) {
			 //保存信息到配置文件
			 common_net::config_writePrivateProfileString("main","lv_other_proxy_1","edu",Application::StartupPath+"\\Deianeira.config");
			 cms_other_proxy_refresh_Click(sender,e);
		 }

		 //检测代理有效性
private: System::Void cms_other_proxy_check_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_other_proxy->SelectedItems[0];
			 if (lv_other_proxy_check(item_->SubItems[0]->Text))
			 {
				 //MessageBox::Show("此代理可用！");
				 item_->SubItems[4]->Text = "Y";
				 item_->Tag = "Y";
			 }
			 else
			 {
				 //MessageBox::Show("此代理不可用！");
				 item_->SubItems[4]->Text = "N";
				 item_->Tag = "N";
			 }
		 }

private: System::Void thread_other_proxy_checkAll_func()
		 {
			 for each(ListViewItem^ item in lv_other_proxy->Items)
			 {
				 //开启线程验证
				 Thread^ thread_sigverif_sub = gcnew Thread(gcnew ParameterizedThreadStart(this,&Form1::lv_other_proxy_check));
				 thread_sigverif_sub->IsBackground = true;
				 thread_sigverif_sub->Start(item);
			 }
		 }

		 //检测所有代理有效性
private: System::Void cms_other_proxy_checkAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //开启线程验证
			 thread_sigverif = gcnew Thread(gcnew ThreadStart(this,&Form1::thread_other_proxy_checkAll_func));
			 thread_sigverif->IsBackground = true;
			 thread_sigverif->Start();
		 }

		 //使用此代理
private: System::Void cms_other_proxy_use_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_other_proxy->SelectedItems[0];
			 String^ str_ip = item_->SubItems[0]->Text->Split(':')[0];
			 String^ str_port = item_->SubItems[0]->Text->Split(':')[1];

			 //设置代理
			 if(!common_setProxy(common_net::common_stringToHGlobalUni(str_ip),common_net::common_stringToHGlobalUni(str_port)))
			 {
				 MessageBox::Show("代理IP设置失败！");
			 }
		 }

		 //取消代理
private: System::Void cms_other_proxy_quit_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (!common_delProxy())
			 {
				 MessageBox::Show("取消代理失败！");
			 }
		 }

		 //导出
private: System::Void cms_other_proxy_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_proxy);
		 }
#pragma endregion tp_other_proxy

       //其他辅助 --》数字签名
#pragma region tp_other_sigverif
		 //枚举文件
private: System::Void lv_other_sigverif_enumFiles(String^ str_dir)
		 {
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dir= Directory::GetDirectories(str_dir);
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);

				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);

					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //如果文件签名了
					 if (sigverif_check(common_net::common_stringToHGlobalUni(str_)))
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,"已签名",common_net::common_getFileCompanyName(str_),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(str_)))});
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,"未签名",common_net::common_getFileCompanyName(str_),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(str_)))});
					 }

					 lv_other_sigverif->Items->Add(item_);
				 }

				 //遍历当前目录下的子目录
				 for each (String^ str_ in strs_dir)
				 {
					 lv_other_sigverif_enumFiles(str_);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //控制右键菜单的显示
private: System::Void lv_other_sigverif_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_other_sigverif->Items->Count==0)
			 {
				 cms_other_sigverif_clear->Enabled = false;
				 cms_other_sigverif_explorer->Enabled=false;
				 cms_other_sigverif_explorer2->Enabled=false;
				 cm_other_sigverif_showProperty->Enabled=false;
			 }
			 else if (lv_other_sigverif->SelectedItems->Count==0)
			 {
				 cms_other_sigverif_clear->Enabled = true;
				 cms_other_sigverif_explorer->Enabled=false;
				 cms_other_sigverif_explorer2->Enabled=false;
				 cm_other_sigverif_showProperty->Enabled=false;
			 }
			 else
			 {
				 cms_other_sigverif_clear->Enabled = true;
				 cms_other_sigverif_explorer->Enabled=true;
				 cms_other_sigverif_explorer2->Enabled=true;
				 cm_other_sigverif_showProperty->Enabled=true;
			 }
		 }

		 //
private: System::Void lv_other_sigverif_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_other_sigverif->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 lv_other_sigverif->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //
private: System::Void lv_other_sigverif_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 if (e->Data->GetDataPresent(DataFormats::FileDrop))
			 {
				 e->Effect = DragDropEffects::Link;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void lv_other_sigverif_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 array<String^>^ fileNames = (array<String^>^)e->Data->GetData(DataFormats::FileDrop);
			 
			 //
			 if (lv_other_sigverif->Items->Count > 0)
			 {
				 lv_other_sigverif->Items->Clear();
			 }

			 //
			 for each(String^ str_ in fileNames)
			 {
				 FileInfo^ fi_ = gcnew FileInfo(str_);

				 //如果为文件夹
				 if (fi_->Attributes == FileAttributes::Directory)
				 {
					 lv_other_sigverif_enumFiles(str_);
				 }
				 else
				 {
					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //如果文件签名了
					 if (sigverif_check(common_net::common_stringToHGlobalUni(str_)))
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,"已签名",common_net::common_getFileCompanyName(str_),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(str_)))});
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,"未签名",common_net::common_getFileCompanyName(str_),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(str_)))});
					 }

					 lv_other_sigverif->Items->Add(item_);
				 }
			 }
		 }

		 //拖放保存
private: System::Void lv_other_sigverif_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_sigverif->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_sigverif);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //打开文件
private: System::Void cms_other_sigverif_openFile_Click(System::Object^  sender, System::EventArgs^  e) {
			 OFD->Filter = "exe files(*.exe)|*.exe|dll files(*.dll)|*.dll|all files(*.*)|*.*";
			 OFD->Multiselect = true;
			 if (OFD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 lv_other_sigverif->Items->Clear();

				 for each(String^ str_ in OFD->FileNames)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);

					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //如果文件签名了
					 if (sigverif_check(common_net::common_stringToHGlobalUni(str_)))
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{str_,"已签名",common_net::common_getFileCompanyName(str_),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(str_)))});
					 }
					 else
					 {
						  item_->SubItems->AddRange(gcnew array<String^>{str_,"未签名",common_net::common_getFileCompanyName(str_),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(str_)))});
					 }

					 lv_other_sigverif->Items->Add(item_);
				 }
			 }
		 }

		 //打开文件夹
private: System::Void cms_other_sigverif_openFolder_Click(System::Object^  sender, System::EventArgs^  e) {
			 FBD->ShowNewFolderButton = true;
			 if (FBD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 lv_other_sigverif->Items->Clear();

				 DirectoryInfo^ di_ = gcnew DirectoryInfo(FBD->SelectedPath);
				 for each(FileInfo^ fi_ in di_->GetFiles())
				 {
					 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

					 //如果文件签名了
					 if (sigverif_check(common_net::common_stringToHGlobalUni(fi_->FullName)))
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{fi_->FullName,"已签名",common_net::common_getFileCompanyName(fi_->FullName),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(fi_->FullName)))});
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{fi_->FullName,"未签名",common_net::common_getFileCompanyName(fi_->FullName),gcnew String(sigverif_getCompanyName(common_net::common_stringToHGlobalUni(fi_->FullName)))});
					 }

					 lv_other_sigverif->Items->Add(item_);
				 }
			 }
		 }

		 //打开文件夹2
private: System::Void cms_other_sigverif_openFolder2_Click(System::Object^  sender, System::EventArgs^  e) {
			 FBD->ShowNewFolderButton = true;
			 if (FBD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 lv_other_sigverif->Items->Clear();

				 lv_other_sigverif_enumFiles(FBD->SelectedPath);
			 }
		 }

private: System::Void cms_other_sigverif_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_other_sigverif->Items->Clear();
		 }

		 //定位到映像文件
private: System::Void cms_other_sigverif_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(lv_other_sigverif->SelectedItems[0]->SubItems[1]->Text));
		 }

		 //
private: System::Void cms_other_sigverif_explorer2_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_other_sigverif->SelectedItems[0];
			 lv_file_jmp(item_->SubItems[1]->Text);
		 }

		 //查看映像文件属性
private: System::Void cm_other_sigverif_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty(common_net::common_stringToHGlobalUni(lv_other_sigverif->SelectedItems[0]->SubItems[1]->Text));
		 }

		 //导出
private: System::Void cms_other_sigverif_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_sigverif);
		 }
#pragma endregion tp_other_sigverif

	   //其他辅助 --》MBR备份与修复
#pragma region tp_other_mbr
		 //全局变量
		 static String^ tp_other_mbr_str_path = "\\\\.\\PHYSICALDRIVE0";

private: System::Void cms_other_mbr_choose_subItems_Click(System::Object^  sender, System::EventArgs^  e) {
			 tp_other_mbr_str_path = ((ToolStripMenuItem^)sender)->Tag->ToString();
			 lv_other_mbr->Items->Clear();
			 lv_other_mbr_show();	
			 ((ToolStripMenuItem^)sender)->Checked = true;
			 for each(ToolStripMenuItem^ tsmi_ in cms_other_mbr_choose->DropDownItems)
			 {
				 if (tsmi_ != ((ToolStripMenuItem^)sender))
				 {
					 tsmi_->Checked = false;
				 }
			 }
		 }

		 //获得磁盘驱动器列表
private: System::Void lv_other_mbr_getDisks(){
			 //清空列表
			 this->cms_other_mbr_choose->DropDownItems->Clear();
			 try
			 {
				 ManagementObjectSearcher^ mos = gcnew ManagementObjectSearcher("select * from win32_DiskDrive"); 
				 for each(ManagementObject^ mo in mos->Get())   
				 {
					 ToolStripMenuItem^ item = gcnew ToolStripMenuItem(mo["Model"]->ToString());
					 item->Tag = mo["Name"]->ToString();
					 item->Click += gcnew System::EventHandler(this,&Form1::cms_other_mbr_choose_subItems_Click);
					 this->cms_other_mbr_choose->DropDownItems->Add(item); 

					 if (mo["Name"]->ToString()==tp_other_mbr_str_path)
					 {
						 item->Checked = true;
					 }
				 } 
			 }
			 catch(Exception^ ex){ MessageBox::Show(ex->Message);}	 
		 }

		 //
private: System::Void lv_other_mbr_show() {
			 int i;
			 t_disasm da;
			 HANDLE hFile = NULL;
			 memset(&da,0,sizeof(da));

			 //打开设备
			 hFile = CreateFile(common_net::common_stringToHGlobalUni(tp_other_mbr_str_path), GENERIC_READ|GENERIC_WRITE,
				 FILE_SHARE_READ|FILE_SHARE_WRITE, NULL,OPEN_EXISTING,0,NULL);

			 //如果打开设备失败或发生错误
			 if (hFile!=INVALID_HANDLE_VALUE)
			 {
				 //申请512字节的缓冲区用户存放MBR	
				 byte buffer[512] = { 0 };
				 DWORD dwRead = 0;
				 //读取数据到缓冲区
				 BOOL ret = ReadFile(hFile, buffer, sizeof(buffer), &dwRead, NULL);
				 if (ret)
				 {
					 if (dwRead!=sizeof(buffer))
					 {
						 MessageBox::Show("读取设备文件出错！");
						 CloseHandle(hFile);
						 return;
					 }
					 for (i=0;i<512;)
					 {
						 //获得反编译了多少个字节数
						 int count=Disasm(&buffer[i],10,NULL,&da,DISASM_CODE);
						 //添加数据
						 ListViewItem^ item = gcnew ListViewItem("0x"+i.ToString("X8"));
						 item->SubItems->AddRange(gcnew array<String^>{gcnew String(da.dump),gcnew String(da.result),gcnew String(da.comment)});
						 lv_other_mbr->Items->Add(item);
						 //迭代一下
						 i=i+count;
					 }
				 }
				 else
				 {
					 MessageBox::Show("读取设备文件出错！");
				 }
				 CloseHandle(hFile);
			 }
			 else
			 {
				 MessageBox::Show("打开设备文件出错！");
			 }
		 }

		 //控制鼠标右键的显示
private: System::Void lv_other_mbr_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if(lv_other_mbr->Items->Count==0)
			 {
				 cms_other_mbr_save->Enabled=false;
				 cms_other_mbr_recover->Enabled=false;
			 }
			 else
			 {
				 cms_other_mbr_save->Enabled=true;
				 cms_other_mbr_recover->Enabled=true;
			 }
		 }

		 //
private: System::Void lv_other_mbr_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 0)
				 {
					 //数子排序
					 lv_other_mbr->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_other_mbr->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 0)
				 {
					 //数字排序
					 lv_other_mbr->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串排序
					 lv_other_mbr->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_other_mbr_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_mbr->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_mbr);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_other_mbr_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_other_mbr_getDisks();
			 lv_other_mbr->Items->Clear();
			 lv_other_mbr_show();
		 }

		 //保存
private: System::Void cms_other_mbr_save_Click(System::Object^  sender, System::EventArgs^  e) {
			 SFD->Filter = "bin files(*.bin)|*.bin|all files(*.*)|*.*";
			 SFD->FileName = DateTime::Now.ToString()->Replace("/","_")->Replace(":","_")->Replace(" ","_");
			 if (SFD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 //由于NET相关IO操作api无法打开设备文件这里用CreateFile
				 //打开设备
				 HANDLE hFile = CreateFile(common_net::common_stringToHGlobalUni(tp_other_mbr_str_path), GENERIC_READ|GENERIC_WRITE,
					 FILE_SHARE_READ|FILE_SHARE_WRITE, NULL,OPEN_EXISTING,0,NULL);

				 //如果打开设备失败或发生错误
				 if (hFile!=INVALID_HANDLE_VALUE)
				 {
					 //申请512字节的缓冲区用户存放MBR	
					 byte buffer[512] = { 0 };
					 DWORD dwRead = 0;
					 //读取数据到缓冲区
					 BOOL ret = ReadFile(hFile, buffer, sizeof(buffer), &dwRead, NULL);
					 if (ret)
					 {
						 //创建文件
						 FILE* lpFile;
						 _wfopen_s(&lpFile,common_net::common_stringToHGlobalUni(SFD->FileName),L"wb"); 
						 //如果创建文件成功
						 if (lpFile != NULL) 
						 { 
							 fwrite(buffer, sizeof(byte), sizeof(buffer), lpFile);
							 //释放文件句柄 
							 fclose(lpFile); 
						 }
					 }
					 CloseHandle(hFile);
				 }	 
			 }
		 }

		 //恢复
private: System::Void cms_other_mbr_recover_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 OFD->Filter = "bin files(*.bin)|*.bin|all files(*.*)|*.*";
			 OFD->Multiselect = false;
			 if (OFD->ShowDialog()==System::Windows::Forms::DialogResult::OK)
			 {
				 //申请512字节的缓冲区用户存放MBR	
				 byte buffer[512] = { 0 };
				 //创建文件
				 FILE* lpFile;
				 _wfopen_s(&lpFile,common_net::common_stringToHGlobalUni(OFD->FileName),L"rb"); 
				 //如果创建文件成功
				 if (lpFile != NULL) 
				 { 
					 fread(buffer, sizeof(byte), sizeof(buffer), lpFile);
					 //释放文件句柄 
					 fclose(lpFile); 
				 }
				 else
				 {
					 MessageBox::Show("读取文件失败！");
					 return;
				 }
				 //打开设备文件
				 HANDLE hFile = CreateFile(common_net::common_stringToHGlobalUni(tp_other_mbr_str_path), GENERIC_READ|GENERIC_WRITE,
					 FILE_SHARE_READ|FILE_SHARE_WRITE, NULL,OPEN_EXISTING,0,NULL);

				 //如果打开设备失败或发生错误
				 if (hFile!=INVALID_HANDLE_VALUE)
				 {
					 DWORD dwWrite;
					 WriteFile(hFile,&buffer,sizeof(buffer),&dwWrite,NULL);
					 if (dwWrite==sizeof(buffer))
					 {
						 MessageBox::Show("MBR恢复成功！");
					 }
					 else
					 {
						 MessageBox::Show("MBR恢复失败！");
					 }
					 //释放句柄
					 CloseHandle(hFile);
				 }
			 }
		 }

		 //导出
private: System::Void cms_other_mbr_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_mbr);
		 }
#pragma endregion tp_other_mbr

       //其他辅助 --》共享
#pragma region tp_other_share
		 //获得本机共享
private: System::Void lv_other_share_show() {
			 try
			 {
				 ManagementObjectSearcher^ mos = gcnew ManagementObjectSearcher("select * from win32_share"); 
				 for each(ManagementObject^ mo in mos->Get())   
				 {
					 ListViewItem^ item = gcnew ListViewItem(mo["Name"]->ToString());
					 item->SubItems->AddRange(gcnew array<String^>{mo["Description"]->ToString(),mo["Path"]->ToString(),mo["Status"]->ToString()});
					 //tag标志
					 item->Tag = mo;
					 lv_other_share->Items->Add(item);			 
				 } 
			 }
			 catch(Exception^ ex){}
		 }

		 //控制右键菜单的显示
private: System::Void lv_other_share_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_other_share->SelectedItems->Count==0)
			 {
				 cms_other_share_delete->Enabled=false;
			     cms_other_share_explorer->Enabled=false;
				 cm_other_share_showProperty->Enabled=false;
			 }
			 else
			 {
				 cms_other_share_delete->Enabled=true;
				 cms_other_share_explorer->Enabled=true;
				 cm_other_share_showProperty->Enabled=true;
			 }
		 }

		 //
private: System::Void lv_other_share_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_other_share->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_other_share->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_other_share_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_share->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_share);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_other_share_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_other_share->Items->Clear();
			 lv_other_share_show();
		 }

		 //创建共享
private: System::Void cms_other_share_create_Click(System::Object^  sender, System::EventArgs^  e) {
			 OtherShareCreateForm^ otherShareCreateForm = gcnew OtherShareCreateForm();
			 otherShareCreateForm->ShowDialog();
		 }

		 //删除共享
private: System::Void cms_other_share_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 try
			 {
				 ((ManagementObject^)lv_other_share->SelectedItems[0]->Tag)->Delete();
				 //移除
				 lv_other_share->SelectedItems[0]->Remove();
			 }
			 catch(Exception^ ex){}
		 }

		 //定位到共享目录
private: System::Void cms_other_share_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_explorerFile((LPSTR)(LPVOID)Marshal::StringToHGlobalAnsi(lv_other_share->SelectedItems[0]->SubItems[2]->Text));
		 }

		 //查看共享目录属性
private: System::Void cm_other_share_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_showFileProperty((LPTSTR)(LPVOID)Marshal::StringToHGlobalUni(lv_other_share->SelectedItems[0]->SubItems[2]->Text));
		 }

		 //导出
private: System::Void cm_other_share_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_share);
		 }
#pragma endregion tp_other_share

       //其他辅助 --》用户
#pragma region tp_other_user
		 //获得本机用户
private: System::Void lv_other_user_show() {
			 try
			 {
				 //存放名称
				 List<String^>^ lst_ = gcnew List<String^>();

				 ManagementObjectSearcher^ mos = gcnew ManagementObjectSearcher("select * from Win32_GroupUser"); 
				 for each(ManagementObject^ mo in mos->Get())   
				 {
					 //获得用户名称
					 String^ str_name= mo["PartComponent"]->ToString()->Split(gcnew array<String^>{",Name=\""},StringSplitOptions::RemoveEmptyEntries)[1]->Replace("\"","");
					 
					 lst_->Add(str_name);

					 String^ str_domain = mo["PartComponent"]->ToString()->Split(gcnew array<String^>{",Name=\""},StringSplitOptions::RemoveEmptyEntries)[0]->Split(gcnew array<String^>{"Domain=\""},StringSplitOptions::RemoveEmptyEntries)[1]->Replace("\"","");
					 //获得用户所在的组
					 String^ str_group = mo["GroupComponent"]->ToString()->Split(gcnew array<String^>{",Name=\""},StringSplitOptions::RemoveEmptyEntries)[1]->Replace("\"","");

					 String^ str_pass = "Y";
					 String^ str_disabled = "N";
					 String^ str_lockout = "N";
					 String^ str_desc = String::Empty;
					 String^ str_status = String::Empty;

					 ListViewItem^ item = gcnew ListViewItem(str_name);

					 //获得用户详细信息
					 ManagementObjectSearcher^ mos2 = gcnew ManagementObjectSearcher("select * from Win32_UserAccount where Name=\""+str_name+"\""); 
					 for each(ManagementObject^ mo2 in mos2->Get())   
					 {
						 //添加数据
						 if ((bool)mo2["Disabled"])
						 {
							 str_disabled = "Y";
							 item->ForeColor = Color::Blue;
						 }
						 if ((bool)mo2["Lockout"])
						 {
							 str_lockout = "Y";
						 }
						 str_desc = mo2["Description"]->ToString();
						 str_status = mo2["Status"]->ToString();

						 //设置tag标志
						 item->Tag=mo2;
						 item->SubItems->AddRange(gcnew array<String^>{str_desc,str_group,str_domain,str_disabled,str_lockout,str_status});
						 lv_other_user->Items->Add(item);	
					 }		 
				 } 

				 mos = gcnew ManagementObjectSearcher("select * from Win32_UserAccount"); 
				 for each(ManagementObject^ mo in mos->Get()) 
				 {
					 bool blContinue = false;
					 for each(String^ str_ in lst_)
					 {
						 if (mo["Name"]->ToString()==str_)
						 {
							 blContinue=true;
							 //跳出第一个循环
							 break;
						 }
					 }
					 //在这里判断
					 if (blContinue)
					 {
						 continue;
					 }

					 String^ str_disabled = "N";
					 String^ str_lockout = "N";
					 String^ str_desc = String::Empty;
					 String^ str_status = String::Empty;

					 //添加信息
					 ListViewItem^ item = gcnew ListViewItem(mo["Name"]->ToString());
					 if ((bool)mo["Disabled"])
					 {
						 str_disabled = "Y";
						 //蓝色表示账号被禁用
						 item->ForeColor = Color::Blue;
					 }
					 if ((bool)mo["Lockout"])
					 {
						 str_lockout = "Y";
					 }
					 str_desc = mo["Description"]->ToString();
					 str_status = mo["Status"]->ToString();	

					 //设置tag标志
					 item->Tag=mo;

					 item->SubItems->AddRange(gcnew array<String^>{str_desc,"",mo["Domain"]->ToString(),str_disabled,str_lockout,str_status});
					 lv_other_user->Items->Add(item);	
				 }
			 }
			 catch(Exception^ ex){}
		 }

		 //控制右键菜单的显示
private: System::Void lv_other_user_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_other_user->SelectedItems->Count==0)
			 {
				 cms_other_user_delete->Enabled=false;
				 cms_other_user_change->Enabled=false;
				 cms_other_user_start->Enabled=false;
				 cms_other_user_disable->Enabled=false;
			 }
			 else
			 {
				 cms_other_user_delete->Enabled=true;
				 //判断能否更改密码
				 if ((bool)((ManagementObject^)lv_other_user->SelectedItems[0]->Tag)["PasswordChangeable"])
				 {
					 cms_other_user_change->Enabled=true;
				 }
				 //判断用户是否被禁用
				 if ((bool)((ManagementObject^)lv_other_user->SelectedItems[0]->Tag)["Disabled"])
				 {
					 cms_other_user_start->Enabled=true;
					 cms_other_user_disable->Enabled=false;
				 }
				 else
				 {
					 cms_other_user_start->Enabled=false;
					 cms_other_user_disable->Enabled=true;
				 }
			 }
		 }

		 //
private: System::Void lv_other_user_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串排序
				 lv_other_user->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串排序
				 lv_other_user->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_other_user_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_other_user->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_other_user);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_other_user_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_other_user->Items->Clear();
             lv_other_user_show();
		 }

		 //更改密码
private: System::Void cms_other_user_change_Click(System::Object^  sender, System::EventArgs^  e) {
			 OtherUserChangeForm^ otherUserChangeForm = gcnew OtherUserChangeForm(lv_other_user->SelectedItems[0]->SubItems[0]->Text);
			 otherUserChangeForm->ShowDialog();
		 }

		 //启用
private: System::Void cms_other_user_start_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (!common_net::common_disableUser(((ManagementObject^)lv_other_user->SelectedItems[0]->Tag)["Name"]->ToString(),false))
			 {
				 MessageBox::Show("启用失败！");
				 return;
			 }	 
			 cms_other_user_refresh_Click(sender,e);
		 }

		 //禁用
private: System::Void cms_other_user_disable_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (!common_net::common_disableUser(((ManagementObject^)lv_other_user->SelectedItems[0]->Tag)["Name"]->ToString(),true))
			 {
				 MessageBox::Show("禁用失败！");
				 return;
			 }	
			 cms_other_user_refresh_Click(sender,e);
		 }

		 //创建
private: System::Void cms_other_user_create_Click(System::Object^  sender, System::EventArgs^  e) {
			 OtherUserCreateForm^ otherUserCreateForm = gcnew OtherUserCreateForm();
			 otherUserCreateForm->ShowDialog();
		 }

		 //删除
private: System::Void cms_other_user_delete_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (common_net::common_delUser(lv_other_user->SelectedItems[0]->SubItems[0]->Text))
			 {
				 lv_other_user->SelectedItems[0]->Remove();
			 }
			 else
			 {
				 MessageBox::Show("删除失败！");
			 }
		 }

		 //导出
private: System::Void cms_other_user_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_other_user);
		 }
#pragma endregion tp_other_user

	   //屏幕截图
#pragma region tp_srcshot

		 //判定选中的是不是图片
private: bool rtb_srcshot_checkSelectedIsPic(){
			 String^ str_ = rtb_srcshot->SelectedRtf;

			 if (str_->Contains("{\\pict\\") && str_->IndexOf("{\\pict\\")==132)
			 {
				 return true;
			 }

			 return false;
		 }
		 //
private: System::Void rtb_srcshot_MouseDown(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 //
				 if (rtb_srcshot->SelectionLength == 0)
				 {
					 //
					 return;
				 }
				 //
				 String^ str_path = Environment::GetEnvironmentVariable("temp") + "\\" + DateTime::Now.ToString()->Replace("-","_")->Replace(" ","_")->Replace(":","_") + ".jpg";
				 //
				 rtb_srcshot->Copy();
				 //
				 Image^ image = Clipboard::GetImage();
				 //
				 image->Save(str_path, System::Drawing::Imaging::ImageFormat::Jpeg);

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_path });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_path);
			 }
		 }

		 //
private: System::Void rtb_srcshot_DragEnter(System::Object^ sender, System::Windows::Forms::DragEventArgs^ e)
		 {
			 //
			 if (e->Data->GetDataPresent(DataFormats::FileDrop))
			 {
				 e->Effect = DragDropEffects::Link;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void rtb_srcshot_DragDrop(System::Object^ sender, System::Windows::Forms::DragEventArgs^ e)
		 {
			 //
			 FileInfo^ fi_ = gcnew FileInfo(((array<String^>^)e->Data->GetData(DataFormats::FileDrop))[0]);
			 //
			 if (fi_->Extension->ToLower() == ".jpg" || fi_->Extension->ToLower() == ".jpeg" || fi_->Extension->ToLower() == ".bmp"
				 || fi_->Extension->ToLower() == ".ico" || fi_->Extension->ToLower() == ".png")
			 {
				 //
				 Image^ image = Image::FromFile(((array<String^>^)e->Data->GetData(DataFormats::FileDrop))[0]);
				 //
				 Clipboard::SetDataObject(image, true);
				 //
				 if (rtb_srcshot->CanPaste(DataFormats::GetFormat(DataFormats::Bitmap))) 
				 {
					 rtb_srcshot->Paste();
				 }
			 }
		 }

		 //控制右键菜单的显示
private: System::Void rtb_srcshot_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 //撤销
			 if (rtb_srcshot->CanUndo)
			 {
				 cms_srcshot_undo->Enabled=true;
			 }
			 else
			 {
				 cms_srcshot_undo->Enabled=false;
			 }

			 if (rtb_srcshot->TextLength == 0)
			 {
				 cms_srcshot_clear->Enabled = false;
				 cms_srcshot_cut->Enabled = false;
				 cms_srcshot_copy->Enabled = false;
				 cms_srcshot_del->Enabled = false;
				 cms_srcshot_save->Enabled = false;
			 }
			 else if (rtb_srcshot->SelectionLength==0)
			 {
				 cms_srcshot_clear->Enabled = true;
				 cms_srcshot_cut->Enabled = false;
				 cms_srcshot_copy->Enabled = false;
				 cms_srcshot_del->Enabled = false;
				 cms_srcshot_save->Enabled = false;
			 }
			 else
			 {
				 cms_srcshot_clear->Enabled = true;
				 cms_srcshot_cut->Enabled = true;
				 cms_srcshot_copy->Enabled = true;
				 cms_srcshot_del->Enabled = true;
				 
				 if (rtb_srcshot_checkSelectedIsPic())
				 {
					 cms_srcshot_save->Enabled = true;
				 }
				 else
				 {
					 cms_srcshot_save->Enabled = false;
				 }
			 }
			 
			 //
			 if (Clipboard::ContainsImage())
			 {
				 cms_srcshot_paste->Enabled = true;
			 }
			 else
			 {
				 cms_srcshot_paste->Enabled = false;
			 }
		 }

		 //撤销
private: System::Void cms_srcshot_undo_Click(System::Object^  sender, System::EventArgs^  e) {
			 rtb_srcshot->Undo();
		 }

		 //清空
private: System::Void cms_srcshot_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 rtb_srcshot->Clear();
		 }

		 //剪切
private: System::Void cms_srcshot_cut_Click(System::Object^  sender, System::EventArgs^  e) {
			 rtb_srcshot->Cut();
		 }

		 //复制
private: System::Void cms_srcshot_copy_Click(System::Object^  sender, System::EventArgs^  e) {
			 rtb_srcshot->Copy();
		 }

		 //黏贴
private: System::Void cms_srcshot_paste_Click(System::Object^  sender, System::EventArgs^  e) {
			 rtb_srcshot->Paste();
		 }

		 //删除
private: System::Void cms_srcshot_del_Click(System::Object^  sender, System::EventArgs^  e) {
			 rtb_srcshot->SelectedText = "";
		 }

		 //截取全屏
private: System::Void cms_srcshot_full_Click(System::Object^  sender, System::EventArgs^  e) {
			 if(cms_srcshot_hide->Checked)
			 {
				 //隐藏当前窗体
				 this->Hide();

				 //缓冲一下，用于程序能完全隐藏当前窗体
				 Thread::Sleep(500);
			 }
			
			 //新建一个和屏幕大小相同的图片 
			 //Screen::AllScreens[0]表示第一个屏幕,屏幕可以多个的说，(*^__^*) 嘻嘻……
			 Bitmap^ screenShot = gcnew Bitmap(Screen::AllScreens[0]->Bounds.Width, Screen::AllScreens[0]->Bounds.Height);        
			
			 Graphics^ g = Graphics::FromImage(screenShot);
			
			 //保存全屏图片
			 g->CopyFromScreen(Point(0, 0), Point(0, 0), System::Drawing::Size(Screen::AllScreens[0]->Bounds.Width, Screen::AllScreens[0]->Bounds.Height));
			
			 //复制到剪切板
			 Clipboard::SetDataObject(screenShot, true);

			 //如果可以黏贴的话
			 if (rtb_srcshot->CanPaste(DataFormats::GetFormat(DataFormats::Bitmap))) 
			 {
				 rtb_srcshot->Clear();
				 rtb_srcshot->Paste();
			 }

			 if (!this->Visible)
			 {
				 this->Show();
			 }
		 }

		 //截取部分
private: System::Void cms_srcshot_part_Click(System::Object^  sender, System::EventArgs^  e) {
			 if(cms_srcshot_hide->Checked)
			 {
				 //隐藏当前窗体
				 this->Hide();
				 //缓冲一下，用于程序能完全隐藏当前窗体
				 Thread::Sleep(500);
			 }
			 
			 //实例化CatchForm窗体
			 CatchForm^ catchForm = gcnew CatchForm();

			 //新建一个和屏幕大小相同的图片 
			 Bitmap^ CatchBmp = gcnew Bitmap(Screen::AllScreens[0]->Bounds.Width, Screen::AllScreens[0]->Bounds.Height);     

			 Graphics^ g = Graphics::FromImage(CatchBmp);

			 //保存全屏图片
			 g->CopyFromScreen(Point(0, 0), Point(0, 0), System::Drawing::Size(Screen::AllScreens[0]->Bounds.Width, Screen::AllScreens[0]->Bounds.Height));
			
			 //将Catch窗体的背景设为全屏时的图片
			 catchForm->BackgroundImage = CatchBmp;

			 if (catchForm->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //保存从catchForm上面截取的图片
				 Image^ image = (Image^)catchForm->CatchedBmp;
				 //下面如上
				 Clipboard::SetDataObject(image, true);

				 if (rtb_srcshot->CanPaste(DataFormats::GetFormat(DataFormats::Bitmap))) 
				 {
					 rtb_srcshot->Clear();
					 rtb_srcshot->Paste();
				 }
			 }

			 //
			 this->Show();
		 }

		 //截图时隐藏当前窗体
private: System::Void cms_srcshot_hide_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (cms_srcshot_hide->Checked)
			 {
				 cms_srcshot_hide->Checked = false;
			 }
			 else
			 {
				 cms_srcshot_hide->Checked = true;
			 }
		 }

		 //另存为
private: System::Void cms_srcshot_save_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 SFD->Filter = "JPeg Image|*.jpg|Bitmap Image|*.bmp|Gif Image|*.gif|Ico Image|*.ico|Png Image|*.png";
			 //
			 if (SFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //
				 rtb_srcshot->Copy();
				 //
				 Image^ image = Clipboard::GetImage();
				 //
				 switch (SFD->FilterIndex)
				 {
				 case 1:
					 image->Save(SFD->FileName,
						 System::Drawing::Imaging::ImageFormat::Jpeg);
					 break;
				 case 2:
					 image->Save(SFD->FileName,
						 System::Drawing::Imaging::ImageFormat::Bmp);
					 break;
				 case 3:
					 image->Save(SFD->FileName,
						 System::Drawing::Imaging::ImageFormat::Gif);
					 break;
				 case 4:
					 image->Save(SFD->FileName,
						 System::Drawing::Imaging::ImageFormat::Icon);
					 break;
				 case 5:
					 image->Save(SFD->FileName,
						 System::Drawing::Imaging::ImageFormat::Png);
					 break;
				 }
			 }		 
		 }
#pragma endregion tp_srcshot

	   //监控
#pragma region tp_monitor
		 //线程变量
		 Thread^ tp_monitor_thread_lv_monitor;

private: System::Void lv_monitor_free(){
			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;

			 //
			 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_FREEFILTERINFO, NULL, 0, NULL, 0, &dwRet, NULL);
			 //
			 if (!bRet)
			 {
				 return;
			 }
		 }

		 //一个线程方法体，用于从驱动中接受数据
private: System::Void lv_monitor_show_process()
		 {
			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;
             ULONG ulSize = 0;

			 while(true)
			 {
				 PMONITOR_INFO pMonitorInfo = NULL;

				 //获得返回的大小
				 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_GETSIZE, NULL, 0, &ulSize, sizeof(ULONG), &dwRet, NULL);
				 if (!bRet)
				 {
					 return;
				 }

				 if (ulSize == 0)
				 {
					 Thread::Sleep(2000);
				 }

				 if (ulSize != 0)
				 {
					 //分配内存
					 pMonitorInfo = new MONITOR_INFO[ulSize];
					 //获得返回的数据
					 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_GETINFO, NULL, 0, pMonitorInfo, ulSize*sizeof(MONITOR_INFO), &dwRet, NULL);
					 //
					 if (!bRet)
					 {
						 return;
					 }

					 array<ListViewItem^>^ ary_item_ = gcnew array<ListViewItem^>(ulSize);

					 for (UINT32 i =0;i<ulSize;i++)
					 {
						 ListViewItem^ item_ = gcnew ListViewItem(gcnew String(pMonitorInfo[i].Time));

						 item_->SubItems->AddRange(gcnew array<String^>{
							 gcnew String(pMonitorInfo[i].ProcessName),
								 pMonitorInfo[i].ulPID.ToString(),
		                         gcnew String(pMonitorInfo[i].Action),
	     						 gcnew String(pMonitorInfo[i].PathName),
								 gcnew String(pMonitorInfo[i].Result),
								 gcnew String(pMonitorInfo[i].Other)}
						 );

						 item_->Tag = gcnew String(pMonitorInfo[i].ProcessPath);

						 if (gcnew String(pMonitorInfo[i].Action) == "LoadImage" && !common_net::common_checkFileCompanyName(gcnew String(pMonitorInfo[i].PathName)))
						 {
							 item_->ForeColor = Color::Blue;
						 }

						 ary_item_[i] = item_;
					 }

					 lv_monitor->Update();
					 lv_monitor->Items->AddRange(ary_item_);
					 lv_monitor->EndUpdate();

					 //释放内存
					 if (pMonitorInfo)
					 {
						 free(pMonitorInfo);
					 }
				 } 
			 }
		 }

		 //控制右键菜单的显示
private: System::Void lv_monitor_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_monitor->Items->Count == 0 )
			 {
				 cms_monitor_clean->Enabled = false;
				 cms_monitor_jump->Enabled = false;
				 cms_monitor_search->Enabled = false;
				 cms_monitor_processProperty->Enabled = false;
				 cms_monitor_includeProcess->Enabled = false;
				 cms_monitor_excludeProcess->Enabled = false;
				 cms_monitor_pathProperty->Enabled = false;
				 cms_monitor_includePath->Enabled = false;
				 cms_monitor_excludePath->Enabled = false;				 
			 }
			 else if (lv_monitor->SelectedItems->Count == 0 )
			 {
				 cms_monitor_clean->Enabled = true;
				 cms_monitor_jump->Enabled = false;
				 cms_monitor_search->Enabled = false;
				 cms_monitor_processProperty->Enabled = false;
				 cms_monitor_includeProcess->Enabled = false;
				 cms_monitor_excludeProcess->Enabled = false;
				 cms_monitor_pathProperty->Enabled = false;
				 cms_monitor_includePath->Enabled = false;
				 cms_monitor_excludePath->Enabled = false;
			 }
			 else
			 {
				 cms_monitor_clean->Enabled = true;
				 cms_monitor_jump->Enabled = true;
				 cms_monitor_search->Enabled = true;
				 cms_monitor_processProperty->Enabled = true;
				 cms_monitor_includeProcess->Enabled = true;
				 cms_monitor_excludeProcess->Enabled = true;
				 cms_monitor_pathProperty->Enabled = true;
				 cms_monitor_includePath->Enabled = true;
				 cms_monitor_excludePath->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_monitor_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 0)
				 {
					 ////时间
					 lv_monitor->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else if(e->Column == 2)
				 {
					 //数子排序
					 lv_monitor->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_monitor->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 0)
				 {
					 //时间
					 lv_monitor->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else if(e->Column == 2 || e->Column == 3)
				 {
					 //数字排序
					 lv_monitor->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_monitor->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_monitor_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_monitor->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_monitor);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

private: System::Void cms_monitor_start_Click(System::Object^  sender, System::EventArgs^  e) {

			 check_hdriver(hDriver);

			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;

			 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_START, NULL, 0, NULL, 0, &dwRet, NULL);

			 if (!bRet)
			 {
				 MessageBox::Show("监控开启失败！");
				 return;
			 }
			 
			 cms_monitor_start->Enabled = false;
			 cms_monitor_stop->Enabled = true;

			 //如果发现控制码成功，则开启线程监控
			 tp_monitor_thread_lv_monitor=gcnew Thread(gcnew ThreadStart(this,&Form1::lv_monitor_show_process));
			 tp_monitor_thread_lv_monitor->IsBackground=true;
			 tp_monitor_thread_lv_monitor->Start();
		 }

private: System::Void cms_monitor_stop_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;

			 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_STOP, NULL, 0,NULL, 0, &dwRet, NULL);

			 if (!bRet)
			 {
				 MessageBox::Show("停止监控失败！");
				 return;
			 }

			 cms_monitor_start->Enabled = true;
			 cms_monitor_stop->Enabled = false;

			 if (tp_monitor_thread_lv_monitor!=nullptr && tp_monitor_thread_lv_monitor->IsAlive)
			 {
				 tp_monitor_thread_lv_monitor->Abort();
			 }
		 }

		 //清空
private: System::Void cms_monitor_clean_Click(System::Object^  sender, System::EventArgs^  e) {
			 lv_monitor->Items->Clear();
		 }

		 //跳转到
private: System::Void cms_monitor_jump_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[4]->Text));
		 }
		 
		 //搜索
private: System::Void cms_monitor_search_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];
			 common_net::common_onlineFind(item_->SubItems[1]->Text);
		 }

		 //进程属性
private: System::Void cms_monitor_processProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->Tag->ToString()));
		 }

		 //包含进程
private: System::Void cms_monitor_includeProcess_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;

			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];

			 PMONITOR_PROCESS_FILTER_INFO p = NULL;

			 p = new MONITOR_PROCESS_FILTER_INFO;

			 wcscpy_s(p->ProcessName,common_net::common_stringToHGlobalUni(item_->SubItems[1]->Text));
			 p->bProcessInclude = TRUE;
			 p->next = NULL;

			 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_GETFILTERINFO_PROCESS, p, sizeof(MONITOR_PROCESS_FILTER_INFO), NULL, 0, &dwRet, NULL);

			 if (!bRet)
			 {
				 MessageBox::Show("包含进程失败！");
				 return;
			 }

			 for each(ListViewItem^ item in lv_monitor->Items)
			 {
				 if (item->SubItems[1]->Text != item_->SubItems[1]->Text)
				 {
					 item->Remove();
				 }
			 }
		 }

		 //去除进程
private: System::Void cms_monitor_excludeProcess_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;

			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];

			 PMONITOR_PROCESS_FILTER_INFO p = NULL;

			 p = new MONITOR_PROCESS_FILTER_INFO;

			 wcscpy_s(p->ProcessName,common_net::common_stringToHGlobalUni(item_->SubItems[1]->Text));
			 p->bProcessInclude = FALSE;
			 p->next = NULL;

			 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_GETFILTERINFO_PROCESS, p, sizeof(MONITOR_PROCESS_FILTER_INFO), NULL, 0, &dwRet, NULL);

			 if (!bRet)
			 {
				 MessageBox::Show("不包含进程失败！");
				 return;
			 }

			 for each(ListViewItem^ item in lv_monitor->Items)
			 {
				 if (item->SubItems[1]->Text == item_->SubItems[1]->Text)
				 {
					 item->Remove();
				 }
			 }
		 }

		 //路径属性
private: System::Void cms_monitor_pathProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[4]->Text));
		 }

		 //包含路径
private: System::Void cms_monitor_includePath_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;

			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];

			 PMONITOR_PATH_FILTER_INFO p = NULL;

			 p = new MONITOR_PATH_FILTER_INFO;

			 wcscpy_s(p->PathName,common_net::common_stringToHGlobalUni(item_->SubItems[4]->Text));
			 p->bPathInclude = TRUE;
			 p->next = NULL;

			 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_GETFILTERINFO_PATH, p, sizeof(MONITOR_PATH_FILTER_INFO), NULL, 0, &dwRet, NULL);

			 if (!bRet)
			 {
				 MessageBox::Show("包含路径失败！");
				 return;
			 }

			 for each(ListViewItem^ item in lv_monitor->Items)
			 {
				 if (!item->SubItems[4]->Text->ToLower()->Contains(item_->SubItems[4]->Text->ToLower()))
				 {
					 item->Remove();
				 }
			 }
		 }

		 //去除路径
private: System::Void cms_monitor_excludePath_Click(System::Object^  sender, System::EventArgs^  e) {
			 BOOL bRet = FALSE;
			 DWORD dwRet = 0;

			 ListViewItem^ item_ = lv_monitor->SelectedItems[0];

			 PMONITOR_PATH_FILTER_INFO p = NULL;

			 p = new MONITOR_PATH_FILTER_INFO;

			 wcscpy_s(p->PathName,common_net::common_stringToHGlobalUni(item_->SubItems[4]->Text));
			 p->bPathInclude = FALSE;
			 p->next = NULL;

			 bRet = DeviceIoControl(hDriver, IOCTL_MONITOR_GETFILTERINFO_PATH, p, sizeof(MONITOR_PATH_FILTER_INFO), NULL, 0, &dwRet, NULL);

			 if (!bRet)
			 {
				 MessageBox::Show("不包含路径失败！");
				 return;
			 }

			 for each(ListViewItem^ item in lv_monitor->Items)
			 {
				 if (item->SubItems[4]->Text->ToLower()->Contains(item_->SubItems[4]->Text->ToLower()))
				 {
					 item->Remove();
				 }
			 }
		 }

		 //导出
private: System::Void cms_monitor_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 common_net::common_getListViewData(lv_monitor);
		 }
#pragma endregion tp_monitor

	   //应用层相关 --》消息钩子
#pragma region tp_app_msg
		 //
private: System::Void lv_app_msg_show(){
			 PAPP_MSG_INFO p;
			 ULONG ulOldPID;

			 if (cms_app_msg_only->Checked)
			 {
				 if (!app_getMsgInfo(true))
				 {
					 return;
				 }
			 }
			 else
			 {
				 if (!app_getMsgInfo(false))
				 {
					 return;
				 }
			 }

			 for (p = pAppMsgInfo;p;p = p->next)
			 {
				 //主要是为了提高点效力
				 if (ulOldPID != p->ulPID)
				 {
					 common_net::common_freeProcessModuleInfo();
					 common_net::common_getProcessModuleInfo(p->ulPID);
					 ulOldPID = p->ulPID;
				 }

				 String^ str_filePath = common_net::common_getProcessPath(p->ulPID);
				 String^ str_compName = common_net::common_getFileCompanyName(str_filePath);

				 ListViewItem^ item_ = gcnew ListViewItem("0x" + ((ULONG)p->hMsg).ToString("X8"));;

				 PPROCESS_MODULE_INFO p2 = common_net::common_getProcessModuleName(p->ulFuncAddr);

				 if (p2)
				 {
					 item_->SubItems->AddRange(gcnew array<String^>{ gcnew String(p->Type),"0x" + p->ulFuncAddr.ToString("X8"),
						 gcnew String(p2->FileName)==""?common_net::common_getProcessName(p->ulPID):gcnew String(p2->FileName),
						 p->ulTID.ToString(),p->ulPID.ToString(),str_filePath});
				 }
				 else
				 {
					 item_->SubItems->AddRange(gcnew array<String^>{ gcnew String(p->Type),"0x" + p->ulFuncAddr.ToString("X8"),
						 common_net::common_getProcessName(p->ulPID),
						 p->ulTID.ToString(),p->ulPID.ToString(),str_filePath});	
				 }

				 if (p->bGlobal)
				 {
					 item_->ForeColor = Color::Red;
				 }

				 if (!common_net::common_checkFileCompanyName(str_compName))
				 {
					 item_->ForeColor = Color::Blue;
				 }

				 //tag
				 item_->Tag = (ULONG)p->hMsg;

				 lv_app_msg->Items->Add(item_);
			 }

			 app_freeMsgInfo();
		 }

		 //控制右键菜单的显示
private: System::Void lv_app_msg_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 //
			 if (lv_app_msg->Items->Count == 0)
			 {
				 cms_app_msg_unload->Enabled = false;
				 cms_app_msg_unloadAll->Enabled = false;
			 }
			 else if (lv_app_msg->SelectedItems->Count == 0)
			 {
				 cms_app_msg_unload->Enabled = false;
				 cms_app_msg_unloadAll->Enabled = false;
			 }
			 else
			 {
				 cms_app_msg_unload->Enabled = true;
				 cms_app_msg_unloadAll->Enabled = true;
			 }
		 }

		 //排序
private: System::Void lv_app_msg_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 //
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if (e->Column == 0 || e->Column == 2)
				 {
					 //16进制
					 lv_app_msg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else if (e->Column == 4 || e->Column == 5)
				 {
					 //10进制
					 lv_app_msg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_app_msg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }			 
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if (e->Column == 0 || e->Column == 2)
				 {
					 //16进制
					 lv_app_msg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else if (e->Column == 4 || e->Column == 5)
				 {
					 //10进制
					 lv_app_msg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,10);
				 }
				 else
				 {
					 //字符串排序
					 lv_app_msg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }	

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放保存
private: System::Void lv_app_msg_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_app_msg->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_app_msg);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //刷新
private: System::Void cms_app_msg_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_app_msg->Items->Clear();
			 lv_app_msg_show();
		 }

		 //仅显示
private: System::Void cms_app_msg_only_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 if (cms_app_msg_only->Checked)
			 {
				 cms_app_msg_only->Checked = false;
			 }
			 else
			 {
				 cms_app_msg_only->Checked = true;
			 }

			 //刷新
			 cms_app_msg_refresh_Click(sender,e);
		 }

		 //卸载
private: System::Void cms_app_msg_unload_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_app_msg->SelectedItems[0];
			 HANDLE hHook = (HANDLE)(ULONG)item_->Tag;

			 if (UnhookWindowsHookEx((HHOOK)hHook))
			 {
				 item_->Remove();
				 return;
			 }

			 MessageBox::Show("卸载钩子失败！");
		 }

		 //卸载所有
private: System::Void cms_app_msg_unloadAll_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 for each(ListViewItem^ item_ in lv_app_msg->Items)
			 {
				 if (item_->ForeColor == Color::Red)
				 {
					 HANDLE hHook = (HANDLE)(ULONG)item_->Tag;

					 if (UnhookWindowsHookEx((HHOOK)hHook))
					 {
						 item_->Remove();
						 return;
					 }
				 }	 
			 }
		 }

		 //导出
private: System::Void cms_app_msg_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 common_net::common_getListViewData(lv_app_msg);
		 }
#pragma endregion tp_app_msg

		 //其他辅助 --》垃圾清理
#pragma region tp_other_clean

		 bool tp_other_clean_isClean;
		 Thread^ tp_other_clean_thread;
		 ULONG tp_other_clean_ulFileTotalCount;
		 ULONG tp_other_clean_ulFileTotalLength;
		 TreeNode^ tp_other_clean_tnCurrent;
		 List<String^>^ tp_other_clean_lst;
		 delegate void delegate_lbl_other_clean_msg(String^ str_);

		 //回调函数
private: System::Void lbl_other_clean_msg_deletate(String^ str_)
		 {
			 lbl_other_clean_msg->Text = str_;
		 }

		 //
private: System::Void lbl_other_clean_msg_deletate_show(String^ str_)
		 {
			 delegate_lbl_other_clean_msg^ delegate_lbl_other_clean_msg_ = gcnew delegate_lbl_other_clean_msg(this,&Form1::lbl_other_clean_msg_deletate);
			 lbl_other_clean_msg->Invoke(delegate_lbl_other_clean_msg_,str_);
		 } 

		 //查看详细
private: System::Void cms_other_clean_trace_view_Click(System::Object^  sender, System::EventArgs^  e) {
			 TreeNode^ tn_;

			 //
			 if (tp_other_clean_isClean)
			 {
				 tn_ = tv_other_clean->SelectedNode;
			 }
			 else
			 {
				 tn_ = tv_other_trace->SelectedNode;
			 }

			 OtherCleanTraceForm^ otherCleanTraceForm = gcnew OtherCleanTraceForm(tn_->Name,(List<String^>^)tn_->Tag);
			 otherCleanTraceForm->ShowDialog();
		 }

		 //遍历通用函数体
private: System::Void tv_other_clean_show_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength)
		 {
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dir= Directory::GetDirectories(str_dir);
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);

				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {			 
					 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");
					 (*tv_other_clean_ulFileCount)++;
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 *tv_other_clean_ulFileLength = *tv_other_clean_ulFileLength + fi_->Length;
					 //
					 lst_->Add(str_);
				 }		 

				 //遍历当前目录下的子目录
				 for each (String^ str_ in strs_dir)
				 {
					 tv_other_clean_show_func(str_,lst_,tv_other_clean_ulFileCount,tv_other_clean_ulFileLength);
					 (*tv_other_clean_ulFileCount)++;
					 lst_->Add(str_);	 		
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //快捷方式检测
private: System::Void tv_other_clean_show_shortcut_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength){
			 WCHAR wsLinkPath[MAX_PATH] = {0};

			 //得到当前目录下的所有文件
			 array<String^>^ strs_file = Directory::GetFiles(str_dir);

			 //遍历数组
			 for each(String^ str_ in strs_file)
			 {
				 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");
				 //清零
				 memset(&wsLinkPath,0,MAX_PATH);
				 //获得快捷方式目标程序路径
				 HRESULT hResult = common_getLnkPath(common_net::common_stringToHGlobalUni(str_),wsLinkPath);
				 if (SUCCEEDED(hResult))
				 {
					 //如果目标程序文件不存在
					 if (!File::Exists(gcnew String(wsLinkPath)))
					 {
						 (*tv_other_clean_ulFileCount)++;
						 FileInfo^ fi_ = gcnew FileInfo(str_);
						 *tv_other_clean_ulFileLength = *tv_other_clean_ulFileLength + fi_->Length;

						 //
						 lst_->Add(str_);
					 }
				 }			 
			 }	
		 }

		 //缩略图缓存文件
private: System::Void tv_other_clean_show_thumb_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength)
		 {
			 try
			 {
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);
				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");
					 //
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Extension == ".db")
					 {
						 *tv_other_clean_ulFileLength = *tv_other_clean_ulFileLength + fi_->Length;
						 (*tv_other_clean_ulFileCount)++;

						 //
						 lst_->Add(str_);
					 }			 
				 }		 
			 }
			 catch(Exception^ ex) { }
		 }

		 //系统错误转储文件
private: System::Void tv_other_clean_show_dump_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength)
		 {
			 try
			 {
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);
				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");
					 //
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Extension == ".dmp")
					 {
						 *tv_other_clean_ulFileLength = *tv_other_clean_ulFileLength + fi_->Length;
						 (*tv_other_clean_ulFileCount)++;

						 //
						 lst_->Add(str_);
					 }	
				 }		 
			 }
			 catch(Exception^ ex) { }
		 }

		 //Windows系统错误报告
private: System::Void tv_other_clean_show_report_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength)
		 {
			 try
			 {
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);
				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");

					 (*tv_other_clean_ulFileCount)++;
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 *tv_other_clean_ulFileLength = *tv_other_clean_ulFileLength + fi_->Length;		

					 //
					 lst_->Add(str_);
				 }		 
			 }
			 catch(Exception^ ex) { }
		 }

		 //系统补丁卸载信息
private: System::Void tv_other_clean_show_patch_unload_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength)
		 {
			 try
			 {
				 //得到当前目录下的所有文件
				 array<String^>^ strs_dir = Directory::GetDirectories(str_dir);
				 //遍历数组
				 for each(String^ str_ in strs_dir)
				 {
					 DirectoryInfo^ di_ = gcnew DirectoryInfo(str_);
					 if (Regex::IsMatch(di_->Name,common_net::common_getRegexEscapeString("$*$")))
					 {
						 tv_other_clean_show_func(str_,lst_,tv_other_clean_ulFileCount,tv_other_clean_ulFileLength);
						 (*tv_other_clean_ulFileCount)++;
						 lst_->Add(str_);
					 }
				 }		 
			 }
			 catch(Exception^ ex) { }
		 }

		 //系统日志
private: System::Void tv_other_clean_show_log_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength)
		 {
			 try
			 {
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);
				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {
					 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");

					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Extension == ".txt" || fi_->Extension == ".log")
					 {
						 *tv_other_clean_ulFileLength = *tv_other_clean_ulFileLength + fi_->Length;
						 (*tv_other_clean_ulFileCount)++;

						 //
						 lst_->Add(str_);
					 }	
				 }		 
			 }
			 catch(Exception^ ex) { }
		 }

		 //回收站
private: System::Void tv_other_clean_show_recycle_func(ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength){
			 //初始化SHQUERYRBINFO结构
			 SHQUERYRBINFO sqri;
			 ZeroMemory(&sqri,sizeof(SHQUERYRBINFO));
			 sqri.cbSize=sizeof(SHQUERYRBINFO);

			 //查询回收站信息
			 if (SHQueryRecycleBin(NULL,&sqri)==S_OK)
			 {
				 *tv_other_clean_ulFileCount = sqri.i64NumItems;
				 *tv_other_clean_ulFileLength = sqri.i64Size;
			 }
			 else
			 {
				 *tv_other_clean_ulFileCount = 0;
				 *tv_other_clean_ulFileLength = 0;
			 }
		 }

		 //手动删除目标文件指定类型的文件
private: System::Void tv_other_clean_show_manual_func(String^ str_dir,List<String^>^ lst_,array<String^>^ strs_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength){
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dir= Directory::GetDirectories(str_dir);
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);

				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {			 
					 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");

					 for each(String^ str2_ in strs_)
					 {
						 if (Regex::IsMatch(str_, common_net::common_getRegexEscapeString(str2_)))
						 {
							 (*tv_other_clean_ulFileCount)++;
							 FileInfo^ fi_ = gcnew FileInfo(str_);
							 *tv_other_clean_ulFileLength = *tv_other_clean_ulFileLength + fi_->Length;

							 //
							 lst_->Add(str_);

							 break;
						 }
					 }		 
				 }		 

				 //遍历当前目录下的子目录
				 for each (String^ str_ in strs_dir)
				 {
					 tv_other_clean_show_manual_func(str_,lst_,strs_,tv_other_clean_ulFileCount,tv_other_clean_ulFileLength);		
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //火狐浏览器缓存文件
private: System::Void tv_other_clean_show_firefox_func(List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength){
			 try
			 {
				 array<String^>^ strs_dir = Directory::GetDirectories(Environment::GetFolderPath(Environment::SpecialFolder::LocalApplicationData) + "\\Mozilla\\Firefox\\Profiles");

				 for each(String^ str_ in strs_dir)
				 {
					 DirectoryInfo^ di_ = gcnew DirectoryInfo(str_);
					 if (Regex::IsMatch(di_->Name,common_net::common_getRegexEscapeString("*.default")))
					 {
						 tv_other_clean_show_func(str_ + "\\Cache",lst_,tv_other_clean_ulFileCount,tv_other_clean_ulFileLength);
					 }	 
				 }			 
			 }
			 catch(Exception^ ex) { }
		 }

		 //office
private: System::Void tv_other_clean_show_office_func(List<String^>^ lst_,ULONG *tv_other_clean_ulFileCount,ULONG *tv_other_clean_ulFileLength){
			 try
			 {
				 for each(String^ str_ in Directory::GetLogicalDrives())
				 {
					 if (Directory::Exists(str_ + "\\MSOCache"))
					 {
						 tv_other_clean_show_func(str_ + "\\MSOCache",lst_,tv_other_clean_ulFileCount,tv_other_clean_ulFileLength);		
					 }
				 }		 		 
			 }
			 catch(Exception^ ex) { }
		 }

private: System::Void tv_other_clean_show(){
			 try
			 {
				 for each(TreeNode^ tn_ in tv_other_clean->Nodes)
				 {
					 for each(TreeNode^ tn_2 in tn_->Nodes)
					 {
						 if (tn_2->Checked)
						 {
							 //存放文件路径
							 tp_other_clean_lst = gcnew List<String^>();

							 //表示文件数量
							 tv_other_clean_ulFileCount = 0;
							 //表示文件大小
							 tv_other_clean_ulFileLength = 0;

							 String^ str_nodeText = tn_2->Name;

							 tn_2->Text = str_nodeText + "(正在检测……)";

							 tp_other_clean_tnCurrent = tn_2;
							 tn_2->EnsureVisible();

							 //系统临时文件
							 if (tn_2->Name == "系统临时文件")
							 {
								 tv_other_clean_show_func(Environment::GetEnvironmentVariable("TEMP"),tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);		 
							 }
							 //无效的快捷方式
							 else if (tn_2->Name == "无效的快捷方式")
							 {
								 tv_other_clean_show_shortcut_func(Environment::GetFolderPath(Environment::SpecialFolder::Desktop),tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 if (ulOSVersion == OS_WINDOWS_XP)
								 {
									 tv_other_clean_show_shortcut_func(Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + 
										 "\\Microsoft\\Internet Explorer\\Quick Launch",tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 }
								 else if (ulOSVersion == OS_WINDOWS_7_2008R2)
								 {
									 tv_other_clean_show_shortcut_func(Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + 
										 "\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch",tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 }
							 }
							 //缩略图缓存文件
							 else if (tn_2->Name == "缩略图缓存文件")
							 {
								 if (ulOSVersion == OS_WINDOWS_XP)
								 {

								 }
								 else if (ulOSVersion == OS_WINDOWS_7_2008R2)
								 {
									 tv_other_clean_show_thumb_func(Environment::GetFolderPath(Environment::SpecialFolder::LocalApplicationData) + "\\Microsoft\\Windows\\Explorer",
										 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 }
							 }
							 //dump
							 else if (tn_2->Name == "内存转储文件")
							 {
								 tv_other_clean_show_dump_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows) + "\\Minidump",tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
							 }
							 //windows错误报告
							 else if (tn_2->Name == "Windows错误报告")
							 {
								 tv_other_clean_show_report_func(Environment::GetFolderPath(Environment::SpecialFolder::CommonApplicationData) + "\\Microsoft\\Dr Watson",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength); 						 
							 }
							 //系统自动更新时留下的补丁
							 else if (tn_2->Name == "系统自动更新时留下的补丁")
							 {
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows) + "\\SoftwareDistribution\\Download",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength); 
							 }
							 //系统自动更新时留下的补丁卸载信息
							 else if (tn_2->Name == "系统打补丁时留下的卸载信息(谨慎)")
							 {
								 tv_other_clean_show_patch_unload_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows),
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength); 
							 }
							 //windows预读取文件
							 else if (tn_2->Name == "Windows预读取文件")
							 {
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows) + "\\Prefetch",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength); 
							 }
							 //已下载的程序文件
							 else if(tn_2->Name == "已下载的程序文件")
							 {
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows) + "\\Downloaded Installations",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength); 
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows) + "\\Downloaded Program Files",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength); 
							 }
							 //日志文件
							 else if (tn_2->Name == "日志文件")
							 {
								 tv_other_clean_show_log_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows),
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 tv_other_clean_show_log_func(Environment::SystemDirectory,
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows) + "\\Debug",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Windows) + "\\security\\logs",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
							 }
							 //回收站
							 else if (tn_2->Name == "清理回收站")
							 {
								 tv_other_clean_show_recycle_func(&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
							 }
							 //目标文件夹
							 else if (tn_2->Name == "清理指定文件夹中指定类型的垃圾文件")
							 {
								 //获得目标文件夹
								 String^ str_tv_other_clean_2 = common_net::config_getPrivateProfileString("main","tv_other_clean_2",Application::StartupPath+"\\Deianeira.config");
								 if (String::IsNullOrEmpty(str_tv_other_clean_2) || String::IsNullOrWhiteSpace(str_tv_other_clean_2))
								 {
									 tn_2->Text = str_nodeText + "(请设置目标目标文件夹！)";
									 continue;
								 }
								 else
								 {
									 //加载自定义的扫描类型信息
									 String^ str_tv_other_clean_3 = common_net::config_getPrivateProfileString("main","tv_other_clean_3",Application::StartupPath+"\\Deianeira.config");
									 array<String^>^ strs_ = str_tv_other_clean_3->Split(gcnew array<String^>{";"},StringSplitOptions::RemoveEmptyEntries);
									 tv_other_clean_show_manual_func(str_tv_other_clean_2,tp_other_clean_lst,strs_,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
								 }
							 }
							 //ie
							 else if (tn_2->Name == "IE浏览器缓存文件")
							 {
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::InternetCache),
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
							 }
							 //chrome
							 else if (tn_2->Name == "Chrome浏览器缓存文件")
							 {
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default\\Cache",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);	
							 }
							 //firefox
							 else if (tn_2->Name == "FireFox浏览器缓存文件")
							 {
								 tv_other_clean_show_firefox_func(tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
							 }
							 //opera
							 else if (tn_2->Name == "Opera浏览器缓存文件")
							 {
								 tv_other_clean_show_func(Environment::GetFolderPath(Environment::SpecialFolder::LocalApplicationData) + "\\Opera\\Opera\\cache",
									 tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);		
							 }
							 //office
							 else if (tn_2->Name == "Office安装文件")
							 {
								 tv_other_clean_show_office_func(tp_other_clean_lst,&tv_other_clean_ulFileCount,&tv_other_clean_ulFileLength);
							 }

							 if (tv_other_clean_ulFileCount==0)
							 {
								 tn_2->Text = str_nodeText + "(没有发现垃圾)";
							 }
							 else
							 {
								 tn_2->Text = str_nodeText + "(文件数：" + tv_other_clean_ulFileCount.ToString() + " 个，大小：" + common_net::common_getUnitConversionString(tv_other_clean_ulFileLength) +")";
							 }	

							 //设置tag
							 tn_2->Tag = tp_other_clean_lst;

							 tp_other_clean_ulFileTotalCount = tp_other_clean_ulFileTotalCount + tv_other_clean_ulFileCount;
							 tp_other_clean_ulFileTotalLength = tp_other_clean_ulFileTotalLength + tv_other_clean_ulFileLength;
						 }
					 }
				 }

				 if(tp_other_clean_ulFileTotalCount == 0)
				 {
					 lbl_other_clean_msg_deletate_show("扫描已完成！没有扫描出垃圾文件");
					 btn_other_clean->Text = "重新扫描";
				 }
				 else
				 {
					 lbl_other_clean_msg_deletate_show("扫描已完成！共扫描出 " + tp_other_clean_ulFileTotalCount.ToString() + " 文件，立即清除可帮您节省 " + common_net::common_getUnitConversionString(tp_other_clean_ulFileTotalLength) + " 磁盘空间");
					 btn_other_clean->Text = "立即清除";
					 lbl_other_clean_reset->Text = "重新选择扫描项目";
					 lbl_other_clean_reset->Visible = true;
				 }
				 
				 lbl_other_clean_all->Enabled = true;
				 lbl_other_clean_noall->Enabled = true;
				 lbl_other_clean_recommend->Enabled = true;
				 lbl_other_clean_set->Enabled = true;
				 lbl_other_clean_reset->Enabled = true;
				 tv_other_clean->Enabled = true;
			 }
			 catch(Exception^ e){ }
		 }

		 //
private: System::Void tv_other_clean_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (e->Button == System::Windows::Forms::MouseButtons::Right) 
			 { 
				 Point p =Point(e->X, e->Y); 
				 TreeNode^ tn_ = tv_other_clean->GetNodeAt(p); 
				 tv_other_clean->SelectedNode = tn_; 

				 if(tn_->Tag == nullptr || String::IsNullOrEmpty(tn_->Tag->ToString()))
				 {
					 cms_other_clean_trace_view->Enabled = false;
				 }
				 else
				 {
					 cms_other_clean_trace_view->Enabled = true;
				 }
			 }
		 }

		 //
private: System::Void tv_other_clean_NodeMouseClick(System::Object^  sender, System::Windows::Forms::TreeNodeMouseClickEventArgs^  e) {
			 if (e->Node->Level == 0 && e->Node->Checked)
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 tn_->Checked = true;
				 }
			 }
			 else if (e->Node->Level == 0 && !e->Node->Checked)
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 tn_->Checked = false;
				 }
			 }
			 else if (e->Node->Level == 1 && e->Node->Checked)
			 {
				 bool bl_ = true;
				 for each(TreeNode^ tn_ in e->Node->Parent->Nodes)
				 {
					 if (!tn_->Checked)
					 {
						 bl_ = false;
					 }
				 }
				 if (bl_)
				 {
					 e->Node->Parent->Checked = true;
				 }
			 }
			 else if (e->Node->Level == 1 && !e->Node->Checked)
			 {
				 bool bl_ = false;
				 for each(TreeNode^ tn_ in e->Node->Parent->Nodes)
				 {
					 if (!tn_->Checked)
					 {
						 bl_ = true;
					 }
				 }
				 if (bl_)
				 {
					 e->Node->Parent->Checked = false;
				 }
			 }
		 }

		 //全选
private: System::Void lbl_other_clean_all_Click(System::Object^  sender, System::EventArgs^  e) {
			 for each(TreeNode^ tn_ in tv_other_clean->Nodes)
			 {
				 tn_->Checked = true;
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 tn_2->Checked = true;
				 }
			 }
		 }

		 //不全选
private: System::Void lbl_other_clean_noall_Click(System::Object^  sender, System::EventArgs^  e) {
			 for each(TreeNode^ tn_ in tv_other_clean->Nodes)
			 {
				 tn_->Checked = false;
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 tn_2->Checked = false;
				 }
			 }
		 }

		 //推荐
private: System::Void lbl_other_clean_recommend_Click(System::Object^  sender, System::EventArgs^  e) {
			 for each(TreeNode^ tn_ in tv_other_clean->Nodes)
			 {
				 if (tn_->Name == "tv_other_clean_windows")
				 {
					 tn_->Checked = false;
					 for each(TreeNode^ tn_2 in tn_->Nodes)
					 {
						 if (tn_2->Name == "系统临时文件" || 
							 tn_2->Name == "无效的快捷方式" || 
							 tn_2->Name == "缩略图缓存文件" || 
							 tn_2->Name == "内存转储文件" || 
							 tn_2->Name == "Windows错误报告" || 
							 tn_2->Name == "系统自动更新时留下的补丁")
						 {
							 tn_2->Checked = true;
						 }
						 else
						 {
							 tn_2->Checked = false;
						 }
					 }
				 }

				 else if (tn_->Name == "tv_other_clean_net")
				 {
					 tn_->Checked = true;
					 for each(TreeNode^ tn_2 in tn_->Nodes)
					 {
						 tn_2->Checked = true;
					 }
				 }

				 else
				 {
					 tn_->Checked = false;
					 for each(TreeNode^ tn_2 in tn_->Nodes)
					 {
						 tn_2->Checked = false;
					 }
				 }		 
			 }
		 }

		 //设置
private: System::Void lbl_other_clean_set_Click(System::Object^  sender, System::EventArgs^  e) {
			 OtherCleanSetForm^ otherCleanSetForm = gcnew OtherCleanSetForm();
			 otherCleanSetForm->ShowDialog();
		 }

		 //
private: System::Void lbl_other_clean_reset_Click(System::Object^  sender, System::EventArgs^  e) {
			 for each(TreeNode^ tn_ in tv_other_clean->Nodes)
			 {
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 tn_2->Text = tn_2->Name;
				 }
			 }

			 if (lbl_other_clean_reset->Text == "重新扫描")
			 {
				 btn_other_clean->Text = "开始扫描";
				 btn_other_clean_Click(sender,e);
				 lbl_other_clean_reset->Visible = false;
			 }
			 else
			 {
				 btn_other_clean->Text = "开始扫描";
				 lbl_other_clean_msg->Text = "清理垃圾，提升系统性能；信不信由你，反正我信了";
				 lbl_other_clean_reset->Visible = false;
			 }
		 }

		 //开始扫描
private: System::Void btn_other_clean_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 if (btn_other_clean->Text == "开始扫描" || btn_other_clean->Text == "重新扫描" )
			 {
				 tp_other_clean_ulFileTotalCount = 0;
				 tp_other_clean_ulFileTotalLength = 0;

				 btn_other_clean->Text = "取消";
				 lbl_other_clean_all->Enabled = false;
				 lbl_other_clean_noall->Enabled = false;
				 lbl_other_clean_recommend->Enabled = false;
				 lbl_other_clean_set->Enabled = false;
				 lbl_other_clean_reset->Enabled = false;
				 tv_other_clean->Enabled = false;

				 tp_other_clean_thread = gcnew Thread(gcnew ThreadStart(this,&Form1::tv_other_clean_show));
				 tp_other_clean_thread->IsBackground = true;
				 tp_other_clean_thread->Start();
			 }
			 else if (btn_other_clean->Text == "取消")
			 {
				 if (tp_other_clean_thread!=nullptr && tp_other_clean_thread->IsAlive)
				 {
					 tp_other_clean_thread->Abort();		 
				 }

				 if (tv_other_clean_ulFileCount==0)
				 {
					 tp_other_clean_tnCurrent->Text = tp_other_clean_tnCurrent->Name + "(没有发现垃圾)";
				 }
				 else
				 {
					 tp_other_clean_tnCurrent->Text = tp_other_clean_tnCurrent->Name + "(文件数：" + tv_other_clean_ulFileCount.ToString() + " 个，大小：" + common_net::common_getUnitConversionString(tv_other_clean_ulFileLength) +")";
				 }

				 //tag
				 tp_other_clean_tnCurrent->Tag = tp_other_clean_lst;

				 tp_other_clean_ulFileTotalCount = tp_other_clean_ulFileTotalCount + tv_other_clean_ulFileCount;
				 tp_other_clean_ulFileTotalLength = tp_other_clean_ulFileTotalLength + tv_other_clean_ulFileLength;

				 if(tp_other_clean_ulFileTotalCount == 0)
				 {
					 lbl_other_clean_msg_deletate_show("扫描已完成！没有扫描出垃圾文件");
					 btn_other_clean->Text = "重新扫描";
				 }
				 else
				 {
					 lbl_other_clean_msg_deletate_show("扫描已完成！共扫描出 " + tp_other_clean_ulFileTotalCount.ToString() + " 文件，立即清除可帮您节省 " + common_net::common_getUnitConversionString(tp_other_clean_ulFileTotalLength) + " 磁盘空间");
					 btn_other_clean->Text = "立即清除";
					 lbl_other_clean_reset->Text = "重新扫描";
					 lbl_other_clean_reset->Visible = true;
				 }

				 lbl_other_clean_all->Enabled = true;
				 lbl_other_clean_noall->Enabled = true;
				 lbl_other_clean_recommend->Enabled = true;
				 lbl_other_clean_set->Enabled = true;
				 lbl_other_clean_reset->Enabled = true;
				 tv_other_clean->Enabled = true;
			 }
			 else
			 {
				 //成功删除的数
				 ULONG ulDeletedCount = 0;
				 //无法删除的文件数
				 ULONG ulDeletedErrorCount = 0;
				 //删除的文件大小
				 ULONG ulDeletedLength = 0;

				 //在这里清除
				 for each(TreeNode^ tn_ in tv_other_clean->Nodes)
				 {
					 for each(TreeNode^ tn_2 in tn_->Nodes)
					 {
						 if (tn_2->Checked)
						 {
							 if(tn_2->Tag != nullptr && !String::IsNullOrEmpty(tn_2->Tag->ToString()))
							 {
								 List<String^>^ lst_ = (List<String^>^)tn_2->Tag;
								 for each(String^ str_ in lst_)
								 {
									 try
									 {
										 if(Directory::Exists(str_))
										 {
											 ulDeletedCount++;
											 Directory::Delete(str_);
										 }
										 else
										 {
											 FileInfo^ fi_ = gcnew FileInfo(str_);	
											 //临时
											 int length = fi_->Length;
											 fi_->Delete();
											 ulDeletedCount++;
											 ulDeletedLength = ulDeletedLength + length;
										 }				 
									 }
									 catch(Exception^ ex)
									 {
										 ulDeletedErrorCount++;
									 } 						 
								 }
							 }
						 }
					 }
				 }

				 //
				 lbl_other_clean_msg->Text = "清理已完成！成功删除 " + ulDeletedCount.ToString() + " 文件，无法删除 " + ulDeletedErrorCount.ToString() + " 文件，重新获得 " + common_net::common_getUnitConversionString(ulDeletedLength) + " 磁盘空间";
				 btn_other_clean->Text = "重新扫描";
			 }
		 }
#pragma endregion tp_other_clean

		 //其他辅助 --》清理痕迹
#pragma region tp_other_trace

		 Thread^ tp_other_trace_thread;
		 ULONG tp_other_trace_ulTotalCount;
		 TreeNode^ tp_other_trace_tnCurrent;
		 List<String^>^ tp_other_trace_lst;
		 delegate void delegate_lbl_other_trace_msg(String^ str_);

		 //回调函数
private: System::Void lbl_other_trace_msg_deletate(String^ str_)
		 {
			 lbl_other_trace_msg->Text = str_;
		 }

		 //
private: System::Void lbl_other_trace_msg_deletate_show(String^ str_)
		 {
			 delegate_lbl_other_trace_msg^ delegate_lbl_other_clean_msg_ = gcnew delegate_lbl_other_trace_msg(this,&Form1::lbl_other_trace_msg_deletate);
			 lbl_other_trace_msg->Invoke(delegate_lbl_other_clean_msg_,str_);
		 } 

		 //
private: System::Void tv_other_trace_show_func(String^ str_dir,List<String^>^ lst_,ULONG *tv_other_trace_ulCount)
		 {
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dir= Directory::GetDirectories(str_dir);
				 //得到当前目录下的所有文件
				 array<String^>^ strs_file = Directory::GetFiles(str_dir);

				 //遍历数组
				 for each(String^ str_ in strs_file)
				 {			 
					 lbl_other_clean_msg_deletate_show("正在扫描：--->>>[" + gcnew String(common_net::common_getShortPath(str_)) + "]");
					 (*tv_other_trace_ulCount)++;
					 lst_->Add(str_);
				 }		 

				 //遍历当前目录下的子目录
				 for each (String^ str_ in strs_dir)
				 {
					 tv_other_trace_show_func(str_,lst_,tv_other_trace_ulCount);
					 (*tv_other_trace_ulCount)++;
					 lst_->Add(str_);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //启动项
private: System::Void tv_other_trace_show_run_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU");
				 for each(String^ str_ in rk_->GetValueNames())
				 {
					 (*tv_other_trace_ulCount)++;
					 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU:"+str_ + ":" + rk_->GetValue(str_)->ToString());
				 }
				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //最近应用程序
private: System::Void tv_other_trace_show_recentApp_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedMRU");
				 for each(String^ str_ in rk_->GetValueNames())
				 {
					 try
					 {
						 (*tv_other_trace_ulCount)++;
						 switch (rk_->GetValueKind(str_))
						 {
						 case RegistryValueKind::Binary:
							 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedMRU:" + str_ + ":" + common_net::common_byteToString((array<byte>^)rk_->GetValue(str_)));
							 break;
						 default:
							 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedMRU:" + str_ + ":" + rk_->GetValue(str_)->ToString());
							 break;
						 }
					 }
					 catch(Exception^ ex){ }
				 }
				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //文件打开与保存
private: System::Void tv_other_trace_show_fileOpenSave_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU");	 
				 *tv_other_trace_ulCount = rk_->ValueCount;

				 for each(String^ str_ in rk_->GetValueNames())
				 {
					 try
					 {
						 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU:" + str_ + ":" + rk_->GetValue(str_)->ToString());
					 }
					 catch(Exception^ ex){ }
				 }

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 RegistryKey^ rk2_ = rk_->OpenSubKey(str_);
					 *tv_other_trace_ulCount = *tv_other_trace_ulCount + rk2_->ValueCount;
					 for each(String^ str2_ in rk2_->GetValueNames())
					 {
						 try
						 {
							 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU\\" + str_ +":"+str2_ + ":" + rk2_->GetValue(str2_)->ToString());
						 }
						 catch(Exception^ ex){ }
					 }
					 rk2_->Close();
				 }
				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //最近的文档
private: System::Void tv_other_trace_show_recentDoc_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs");	 
				 *tv_other_trace_ulCount = rk_->ValueCount;

				 for each(String^ str_ in rk_->GetValueNames())
				 {
					 try
					 {
						 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs:" + str_ + ":" +  common_net::common_byteToString((array<byte>^)rk_->GetValue(str_)));
					 }
					 catch(Exception^ ex){ }
				 }

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 RegistryKey^ rk2_ = rk_->OpenSubKey(str_);
					 *tv_other_trace_ulCount = *tv_other_trace_ulCount + rk2_->ValueCount;
					 for each(String^ str2_ in rk2_->GetValueNames())
					 {
						 try
						 {
							 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs\\" + str_ +":"+str2_ + ":" +  common_net::common_byteToString((array<byte>^)rk2_->GetValue(str2_)));
						 }
						 catch(Exception^ ex){ }
					 }
					 rk2_->Close();
				 }
				 rk_->Close();

				 array<String^>^ strs_file = Directory::GetFiles(Environment::GetFolderPath(Environment::SpecialFolder::Recent));
				 for each(String^ str_ in strs_file)
				 {
					 (*tv_other_trace_ulCount)++;
					 lst_->Add(str_);
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //收藏夹
private: System::Void tv_other_trace_show_favorites_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 tv_other_trace_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Favorites),lst_,tv_other_trace_ulCount);
			 }
			 catch(Exception^ ex){ }
		 }

		 //windows模板
private: System::Void tv_other_trace_show_templates_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 tv_other_trace_show_func(Environment::GetFolderPath(Environment::SpecialFolder::Templates),lst_,tv_other_trace_ulCount);
			 }
			 catch(Exception^ ex){ }
		 }

		 //搜索记录
private: System::Void tv_other_trace_show_search_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Search Assistant\\ACMru");	  
				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 RegistryKey^ rk2_ = rk_->OpenSubKey(str_);
					 *tv_other_trace_ulCount = *tv_other_trace_ulCount + rk2_->ValueCount;
					 for each(String^ str2_ in rk2_->GetValueNames())
					 {
						 try
						 {
							 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Search Assistant\\ACMru\\" + str_ +":"+str2_ + ":" + rk2_->GetValue(str2_)->ToString());
						 }
						 catch(Exception^ ex){ }				 
					 }
					 rk2_->Close();
				 }
				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //画图
private: System::Void tv_other_trace_show_paint_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Applets\\Paint\\Recent File List");	  
				 *tv_other_trace_ulCount = rk_->ValueCount;

				 for each(String^ str_ in rk_->GetValueNames())
				 {
					 try
					 {
						 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Applets\\Paint\\Recent File List:" + str_ + ":" + rk_->GetValue(str_)->ToString());
					 }
					 catch(Exception^ ex){ }				 
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //adobe reader历史记录
private: System::Void tv_other_trace_show_acrobatReader_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Adobe\\Acrobat Reader");

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\AVGeneral\\cRecentFiles");

						 for each(String^ str2_ in rk2_->GetSubKeyNames())
						 {
							 RegistryKey^ rk3_ = rk2_->OpenSubKey(str2_);
							 (*tv_other_trace_ulCount)++;
							 for each(String^ str3_ in rk3_->GetValueNames())
							 {
								 try
								 {
									 if (str3_->ToLower() == "tditext")
									 {
										 lst_->Add("HKEY_CURRENT_USER\\Software\\Adobe\\Acrobat Reader\\" + str_ + "\\AVGeneral\\cRecentFiles\\" + str2_ +":"+str3_ + ":" + rk3_->GetValue(str3_)->ToString());
									 }			 
								 }
								 catch(Exception^ ex){ }				 
							 }
							 rk3_->Close();
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //office 最近文档
private: System::Void tv_other_trace_show_office_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 tv_other_trace_show_func(Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + "\\Microsoft\\Office\\Recent",lst_,tv_other_trace_ulCount);
			 }
			 catch(Exception^ ex){ }
		 }

		 //office access
private: System::Void tv_other_trace_show_officeAccess_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Office");	 

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\Access\\File MRU");

						 for each(String^ str2_ in rk2_->GetValueNames())
						 {
							 try
							 {				
								 (*tv_other_trace_ulCount)++;
								 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\" + str_ + "\\Access\\File MRU:" +str2_ + ":" + rk2_->GetValue(str2_)->ToString());		 
							 }
							 catch(Exception^ ex){ }				 
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }			 
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //office excel
private: System::Void tv_other_trace_show_officeXls_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Office");	 

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\Excel\\File MRU");

						 for each(String^ str2_ in rk2_->GetValueNames())
						 {
							 try
							 {				
								 (*tv_other_trace_ulCount)++;
								 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\" + str_ + "\\Excel\\File MRU:" +str2_ + ":" + rk2_->GetValue(str2_)->ToString());		 
							 }
							 catch(Exception^ ex){ }				 
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }			 
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //office ppt
private: System::Void tv_other_trace_show_officePPT_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Office");	 

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\PowerPoint\\File MRU");

						 for each(String^ str2_ in rk2_->GetValueNames())
						 {
							 try
							 {				
								 (*tv_other_trace_ulCount)++;
								 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\" + str_ + "\\PowerPoint\\File MRU:" +str2_ + ":" + rk2_->GetValue(str2_)->ToString());		 
							 }
							 catch(Exception^ ex){ }				 
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }			 
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //office word
private: System::Void tv_other_trace_show_officeDoc_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\Office");	 

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\Word\\File MRU");

						 for each(String^ str2_ in rk2_->GetValueNames())
						 {
							 try
							 {				
								 (*tv_other_trace_ulCount)++;
								 lst_->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\" + str_ + "\\Word\\File MRU:" +str2_ + ":" + rk2_->GetValue(str2_)->ToString());		 
							 }
							 catch(Exception^ ex){ }				 
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }			 
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //wps excel
private: System::Void tv_other_trace_show_wpsxls_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Kingsoft\\Office");

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\et\\RecentFiles\\files");

						 for each(String^ str2_ in rk2_->GetSubKeyNames())
						 {
							 RegistryKey^ rk3_ = rk2_->OpenSubKey(str2_);
							 (*tv_other_trace_ulCount)++;
							 for each(String^ str3_ in rk3_->GetValueNames())
							 {
								 try
								 {
									 if (str3_->ToLower() == "path")
									 {
										 lst_->Add("HKEY_CURRENT_USER\\Software\\Kingsoft\\Office\\" + str_ + "\\et\\RecentFiles\\files\\" + str2_ +":"+str3_ + ":" + rk3_->GetValue(str3_)->ToString());
									 }			 
								 }
								 catch(Exception^ ex){ }				 
							 }
							 rk3_->Close();
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //wps word
private: System::Void tv_other_trace_show_wpsdoc_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Kingsoft\\Office");

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\wps\\RecentFiles\\files");

						 for each(String^ str2_ in rk2_->GetSubKeyNames())
						 {
							 RegistryKey^ rk3_ = rk2_->OpenSubKey(str2_);
							 (*tv_other_trace_ulCount)++;
							 for each(String^ str3_ in rk3_->GetValueNames())
							 {
								 try
								 {
									 if (str3_->ToLower() == "path")
									 {
										 lst_->Add("HKEY_CURRENT_USER\\Software\\Kingsoft\\Office\\" + str_ + "\\wps\\RecentFiles\\files\\" + str2_ +":"+str3_ + ":" + rk3_->GetValue(str3_)->ToString());
									 }			 
								 }
								 catch(Exception^ ex){ }				 
							 }
							 rk3_->Close();
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //wps ppt
private: System::Void tv_other_trace_show_wpsppt_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Kingsoft\\Office");

				 for each(String^ str_ in rk_->GetSubKeyNames())
				 {
					 try
					 {
						 RegistryKey^ rk2_ = rk_->OpenSubKey(str_ + "\\wpp\\RecentFiles\\files");

						 for each(String^ str2_ in rk2_->GetSubKeyNames())
						 {
							 RegistryKey^ rk3_ = rk2_->OpenSubKey(str2_);
							 (*tv_other_trace_ulCount)++;
							 for each(String^ str3_ in rk3_->GetValueNames())
							 {
								 try
								 {
									 if (str3_->ToLower() == "path")
									 {
										 lst_->Add("HKEY_CURRENT_USER\\Software\\Kingsoft\\Office\\" + str_ + "\\wpp\\RecentFiles\\files\\" + str2_ +":"+str3_ + ":" + rk3_->GetValue(str3_)->ToString());
									 }			 
								 }
								 catch(Exception^ ex){ }				 
							 }
							 rk3_->Close();
						 }

						 rk2_->Close();
					 }
					 catch(Exception^ ex){ }
				 }

				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }

		 //pps
private: System::Void tv_other_trace_show_pps_func2(List<String^>^ lst_,ULONG *tv_other_trace_ulCount,String^ str_,bool isFirst,int nodeIndex){
			 try
			 {
				 if (File::Exists(str_))
				 {
					 if (isFirst)
					 {
						 //用于xml文件的加载
						 XmlDocument^ xd_ = gcnew XmlDocument(); 
						 xd_->Load(str_); 
						 //定义xml的第一个结点
						 XmlNode^ xn_ = xd_->DocumentElement; 
						 //(*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + xn_->ChildNodes->Count;
						 for each(XmlNode^ xn2_ in xn_->ChildNodes)
						 {
							 (*tv_other_trace_ulCount)++;
							 lst_->Add(str_ + ":" + xn2_->Attributes["ChsName"]->Value);
						 }
					 }
					 else
					 {
						 //用于xml文件的加载
						 XmlDocument^ xd_ = gcnew XmlDocument(); 
						 xd_->Load(str_); 
						 //定义xml的第一个结点
						 XmlNode^ xn_ = xd_->DocumentElement; 
						 //(*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + xn_->ChildNodes[nodeIndex]->ChildNodes->Count;
						 for each(XmlNode^ xn2_ in xn_->ChildNodes[0]->ChildNodes)
						 {
							 (*tv_other_trace_ulCount)++;
							 lst_->Add(str_ + ":" + xn2_->Attributes["Name"]->Value);
						 }
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //pps
private: System::Void tv_other_trace_show_pps_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 tv_other_trace_show_pps_func2(lst_,tv_other_trace_ulCount,
					 Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + "\\PPStream\\PlayHistory\\RecentHistory.xml",true,0);
				 tv_other_trace_show_pps_func2(lst_,tv_other_trace_ulCount,
					 Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + "\\PPStream\\MediaList\\ChsDownload.xml",false,0);
				 tv_other_trace_show_pps_func2(lst_,tv_other_trace_ulCount,
					 Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + "\\PPStream\\MediaList\\LocalMedia.xml",false,0);

			     array<String^>^ strs_file = Directory::GetFiles(Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + "\\PPStream\\MediaList\\PlayList");
				 for each(String^ str_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Extension == ".xml")
					 {
						 tv_other_trace_show_pps_func2(lst_,tv_other_trace_ulCount,str_,false,0);
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //pptv
private: System::Void tv_other_trace_show_pptv_func2(String^ str_db,String^ str_sql,String^ str_type,int columnCount,List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 sqlite3 *sql3_db;
			 sqlite3_stmt *sql3_stmt; 
			 char *sql3_sqlstr;
			 char *sql3_errmsg;

			 //
			 if(sqlite3_open(common_net::common_stringToHGlobalAnsi(str_db), &sql3_db) != SQLITE_OK)
			 {
				 //error
				 return;
			 }

			 sql3_sqlstr = common_net::common_stringToHGlobalAnsi(str_sql);

			 //
			 if (sqlite3_prepare(sql3_db, sql3_sqlstr, strlen(sql3_sqlstr), &sql3_stmt, (const char**)&sql3_errmsg) != SQLITE_OK)
			 {
				 //error
				 return;
			 }

			 while(true)
			 {
				 if (sqlite3_step(sql3_stmt) != SQLITE_ROW)
				 {
					 break;
				 }

				 (*tv_other_trace_ulCount)++;

				 //ID
				 String^ str_ = str_db + ":" + str_type + ":" + sqlite3_column_int64(sql3_stmt, 0).ToString();

				 for (int i = 1 ;i < columnCount;i ++)
				 {
					 str_ = str_ + ":" + gcnew String(common_UTFToGBK((char*)sqlite3_column_text(sql3_stmt, i)));
				 }

				 lst_->Add(str_);
			 }

			 //释放资源
			 sqlite3_finalize(sql3_stmt);
			 //关闭
			 sqlite3_close(sql3_db);
		 }

		 //pptv
private: System::Void tv_other_trace_show_pptv_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 array<String^>^ strs_file = Directory::GetFiles(Environment::GetFolderPath(Environment::SpecialFolder::CommonApplicationData) + "\\PPLive\\PPTV\\Favorites");

				 for each(String^ str_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Name->ToLower() == "common.s3db")
					 {
						 tv_other_trace_show_pptv_func2(str_,"select Id,SubName from Favorites","Favorites",2,lst_,tv_other_trace_ulCount);
						 tv_other_trace_show_pptv_func2(str_,"select Id,SubName from Recent","Recent",2,lst_,tv_other_trace_ulCount);
					 }
					 else if (fi_->Name->ToLower() == "taskinfo")
					 {
						 tv_other_trace_show_pptv_func2(str_,"select Id,Name,DownDir from TaskInfo","TaskInfo",2,lst_,tv_other_trace_ulCount);
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //腾讯live
private: System::Void tv_other_trace_show_qqlive_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 array<String^>^ strs_dir = Directory::GetDirectories(Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + "\\Tencent\\QQLive");

				 for each(String^ str_ in strs_dir)
				 {
					 DirectoryInfo^ di_ = gcnew DirectoryInfo(str_);
					 //f9403723cab909b8eece0a0077536429
					 if (di_->Name->Length == 32)
					 {
						 tv_other_trace_show_func(str_ + "\\xml",lst_,tv_other_trace_ulCount);
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //快播
private: System::Void tv_other_trace_show_qvod_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 String^ str_ = common_net::common_getRegkeyValue(Registry::CurrentUser,"Software\\QvodPlayer\\Insert","Insertpath");

				 if (str_ == nullptr)
				 {
					 return;
				 }

				 array<String^>^ strs_file = Directory::GetFiles(str_ + "\\Playlist");

				 for each(String^ str2_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str2_);
					 if (fi_->Name->ToLower() == "recentplay.xml" || fi_->Name->ToLower() == "qvodhash.xml" || fi_->Name->ToLower() == "mediacenter.xml"|| Regex::IsMatch(fi_->Name,"List\d*"))
					 {
						 //用于xml文件的加载
						 XmlDocument^ xd_ = gcnew XmlDocument(); 
						 xd_->Load(str2_); 
						 //定义xml的第一个结点
						 XmlNode^ xn_ = xd_->DocumentElement; 
						 //(*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + xn_->ChildNodes[0]->ChildNodes->Count;
						 for each(XmlNode^ xn2_ in xn_->ChildNodes[0]->ChildNodes)
						 {
							 (*tv_other_trace_ulCount)++;
							 lst_->Add(str_ + ":" + xn2_->InnerText);
						 }
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //百度影音
private: System::Void tv_other_trace_show_baidu_func(ULONG *tv_other_trace_ulCount){
			 try
			 {
				 array<String^>^ strs_file = Directory::GetFiles(Environment::GetFolderPath(Environment::SpecialFolder::ApplicationData) + "\\Baidu\\BaiduPlayer");

				 for each(String^ str_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Extension == ".xml")
					 {
						 //用于xml文件的加载
						 XmlDocument^ xd_ = gcnew XmlDocument(); 
						 xd_->Load(str_); 
						 //定义xml的第一个结点
						 XmlNode^ xn_ = xd_->DocumentElement; 
						 (*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + xn_->ChildNodes->Count;
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //暴风
private: System::Void tv_other_trace_show_baofeng_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 array<String^>^ strs_file = Directory::GetFiles(Environment::GetFolderPath(Environment::SpecialFolder::CommonApplicationData) + "\\Baofeng\\StormPlayer\\Profiles");

				 for each(String^ str_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Name == "StormPlayer.smpl")
					 {
						 //用于xml文件的加载
						 XmlDocument^ xd_ = gcnew XmlDocument(); 
						 xd_->Load(str_); 
						 //定义xml的第一个结点
						 XmlNode^ xn_ = xd_->DocumentElement; 
						 for each(XmlNode^ xn2_ in xn_->ChildNodes[0]->ChildNodes)
						 {
							 if (xn2_->ChildNodes->Count == 0)
							 {
								 (*tv_other_trace_ulCount)++;
								 lst_->Add(str_ + ":" + xn2_->Attributes["Name"]->Value);
							 }
							 else
							 {
								 //(*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + xn2_->ChildNodes->Count;
								 for each(XmlNode^ xn3_ in xn2_->ChildNodes)
								 {
									 (*tv_other_trace_ulCount)++;
									 lst_->Add(str_ + ":" + xn3_->Attributes["Name"]->Value);
								 }
							 }
						 }
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }

	     //皮皮
private: System::Void tv_other_trace_show_pipi_func(ULONG *tv_other_trace_ulCount){
			 try
			 {
				 String^ str_ = common_net::common_getSoftwareInstallLocation("PIPI_is1","InstallLocation");

				 if (str_ == nullptr)
				 {
					 return;
				 }

				 String^ str2_ = common_net::config_getPrivateProfileString("cook","mini_favorite",str_ + "\\ppcook.cfg");
				 String^ str3_ = "&&";
				 (*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + (common_net::common_urlDecode(str2_)->Split(str3_->ToCharArray()))->Length;

				 str2_ = common_net::config_getPrivateProfileString("cook","mini_lastViewed",str_ + "\\ppcook.cfg");
				 (*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + (common_net::common_urlDecode(str2_)->Split(str3_->ToCharArray()))->Length;
			 }
			 catch(Exception^ ex){ }
		 }	

		 //迅雷
private: System::Void tv_other_trace_show_xmp_func(ULONG *tv_other_trace_ulCount){
			 try
			 {
				 array<String^>^ strs_file = Directory::GetFiles(Environment::GetFolderPath(Environment::SpecialFolder::CommonApplicationData) + "\\Thunder Network\\XMP4\\ProgramData\\Playlists");

				 for each(String^ str_ in strs_file)
				 {
					 FileInfo^ fi_ = gcnew FileInfo(str_);
					 if (fi_->Extension == ".xml")
					 {
						 //用于xml文件的加载
						 XmlDocument^ xd_ = gcnew XmlDocument(); 
						 xd_->Load(str_); 
						 //定义xml的第一个结点
						 XmlNode^ xn_ = xd_->DocumentElement; 
						 (*tv_other_trace_ulCount) = (*tv_other_trace_ulCount) + xn_->ChildNodes->Count;
					 }
				 }
			 }
			 catch(Exception^ ex){ }
		 }	

		 //windows media
private: System::Void tv_other_trace_show_windows_func(ULONG *tv_other_trace_ulCount){
			 try
			 {
				 RegistryKey^ rk_ = Registry::CurrentUser->OpenSubKey("Software\\Microsoft\\MediaPlayer\\Player\\RecentFileList");	 
				 *tv_other_trace_ulCount = rk_->ValueCount;
				 rk_->Close();
			 }
			 catch(Exception^ ex){ }
		 }	

		 //迅雷
private: System::Void tv_other_trace_show_xunlei_func(List<String^>^ lst_,ULONG *tv_other_trace_ulCount){
			 try
			 {
				 String^ str_ = common_net::common_getSoftwareInstallLocation("thunder_is1","InstallLocation");

				 if (str_ == nullptr)
				 {
					 return;
				 }

				 //
				 str_ = str_ + "\\Profiles\\TaskDb.dat";

				 tv_other_trace_show_pptv_func2(str_,"select TaskId,Name from TaskBase","TaskBase",2,lst_,tv_other_trace_ulCount);
			 }
			 catch(Exception^ ex){ }
		 }	

		 //
private: System::Void tv_other_trace_show(){
			 try
			 {
				 for each(TreeNode^ tn_ in tv_other_trace->Nodes)
				 {
					 for each(TreeNode^ tn_2 in tn_->Nodes)
					 {
						 if (tn_2->Checked)
						 {
							 tp_other_trace_lst = gcnew List<String^>();

							 //表示文件数量
							 tv_other_trace_ulCount = 0;

							 String^ str_nodeText = tn_2->Name;

							 tn_2->Text = str_nodeText + "(正在检测……)";

							 tp_other_trace_tnCurrent = tn_2;
							 tn_2->EnsureVisible();

							 //运行
							 if (tn_2->Name == "运行(开始菜单中，重启后生效)")
							 {
								 tv_other_trace_show_run_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //最近运行的程序
							 else if (tn_2->Name == "最近运行的程序历史记录")
							 {
								 tv_other_trace_show_recentApp_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //文件打开与保存
							 else if (tn_2->Name == "文件打开与保存历史记录")
							 {
								 tv_other_trace_show_fileOpenSave_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //最近的文档
							 else if (tn_2->Name == "最近打开的文件")
							 {
								 tv_other_trace_show_recentDoc_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //收藏夹
							 else if (tn_2->Name == "Windows收藏夹")
							 {
								 tv_other_trace_show_favorites_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //模板
							 else if (tn_2->Name == "Windows模板")
							 {
								 tv_other_trace_show_templates_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //搜索历史
							 else if (tn_2->Name == "Windows搜索历史")
							 {
								 tv_other_trace_show_search_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //windows画图
							 else if (tn_2->Name == "Windows画图")
							 {
								 tv_other_trace_show_paint_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //adobe reader
							 else if (tn_2->Name == "Acrobat Reader")
							 {
								 tv_other_trace_show_acrobatReader_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //office 清理
							 else if (tn_2->Name == "Office 清理")
							 {
								 tv_other_trace_show_office_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //office access
							 else if (tn_2->Name == "Office Access")
							 {
								 tv_other_trace_show_officeAccess_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //office xls
							 else if (tn_2->Name == "Office Excel")
							 {
								 tv_other_trace_show_officeXls_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //office ppt
							 else if (tn_2->Name == "Office PowerPoint")
							 {
								 tv_other_trace_show_officePPT_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //office word
							 else if (tn_2->Name == "Office Word")
							 {
								 tv_other_trace_show_officeDoc_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //wps xls
							 else if (tn_2->Name == "WPS表格历史记录")
							 {
								 tv_other_trace_show_wpsxls_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //wps 文字
							 else if (tn_2->Name == "WPS文字历史记录")
							 {
								 tv_other_trace_show_wpsdoc_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //wps 演示
							 else if (tn_2->Name == "WPS演示历史记录")
							 {
								 tv_other_trace_show_wpsppt_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //pps
							 else if (tn_2->Name == "PPS网络电视")
							 {
								 tv_other_trace_show_pps_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //pptv
							 else if (tn_2->Name == "PPTV网络电视")
							 {
								 tv_other_trace_show_pptv_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //qqlive
							 else if (tn_2->Name == "QQLIVE网络电视")
							 {
								 tv_other_trace_show_qqlive_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //qvod
							 else if (tn_2->Name == "快播播放器")
							 {
								 tv_other_trace_show_qvod_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //baidu
							 else if (tn_2->Name == "百度影音")
							 {
								 tv_other_trace_show_baidu_func(&tv_other_trace_ulCount);
							 }
							 //baofeng
							 else if (tn_2->Name == "暴风影音")
							 {
								 tv_other_trace_show_baofeng_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }
							 //pipi
							 else if (tn_2->Name == "皮皮影视")
							 {
								 tv_other_trace_show_pipi_func(&tv_other_trace_ulCount);
							 }
							 //xmp
							 else if (tn_2->Name == "迅雷看看")
							 {
								 tv_other_trace_show_xmp_func(&tv_other_trace_ulCount);
							 }
							 //windows media
							 else if (tn_2->Name == "Windows媒体播放器")
							 {
								 tv_other_trace_show_windows_func(&tv_other_trace_ulCount);
							 }
							 //迅雷
							 else if (tn_2->Name == "迅雷")
							 {
								 tv_other_trace_show_xunlei_func(tp_other_trace_lst,&tv_other_trace_ulCount);
							 }

							 if (tv_other_trace_ulCount==0)
							 {
								 tp_other_trace_tnCurrent->Text = tp_other_trace_tnCurrent->Name + "(没有发现痕迹)";
							 }
							 else
							 {
								 tp_other_trace_tnCurrent->Text = tp_other_trace_tnCurrent->Name + "(痕迹数：" + tv_other_trace_ulCount.ToString() + ")";
							 }

							 //设置tag
							 tn_2->Tag = tp_other_trace_lst;
							 tp_other_trace_ulTotalCount = tp_other_trace_ulTotalCount + tv_other_trace_ulCount;
						 }
					 }
				 }

				 lbl_other_trace_msg_deletate_show("扫描已完成！共扫描出 " + tp_other_trace_ulTotalCount.ToString() + "处痕迹");

				 btn_other_trace->Text = "立即清除";
				 lbl_other_trace_reset->Text = "重新选择扫描项目";
				 lbl_other_trace_reset->Visible = true;
				 lbl_other_trace_all->Enabled = true;
				 lbl_other_trace_noall->Enabled = true;
				 lbl_other_trace_recommend->Enabled = true;
				 lbl_other_trace_reset->Enabled = true;
				 tv_other_trace->Enabled = true;
			 }
			 catch(Exception^ ex){ }
		 }

		 //
private: System::Void tv_other_trace_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (e->Button == System::Windows::Forms::MouseButtons::Right) 
			 { 
				 Point p =Point(e->X, e->Y); 
				 TreeNode^ tn_ = tv_other_trace->GetNodeAt(p); 
				 tv_other_trace->SelectedNode = tn_; 
			 }
		 }

		 //
private: System::Void tv_other_trace_NodeMouseClick(System::Object^  sender, System::Windows::Forms::TreeNodeMouseClickEventArgs^  e) {
			 if (e->Node->Level == 0 && e->Node->Checked)
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 tn_->Checked = true;
				 }
			 }
			 else if (e->Node->Level == 0 && !e->Node->Checked)
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 tn_->Checked = false;
				 }
			 }
			 else if (e->Node->Level == 1 && e->Node->Checked)
			 {
				 bool bl_ = true;
				 for each(TreeNode^ tn_ in e->Node->Parent->Nodes)
				 {
					 if (!tn_->Checked)
					 {
						 bl_ = false;
					 }
				 }
				 if (bl_)
				 {
					 e->Node->Parent->Checked = true;
				 }
			 }
			 else if (e->Node->Level == 1 && !e->Node->Checked)
			 {
				 bool bl_ = false;
				 for each(TreeNode^ tn_ in e->Node->Parent->Nodes)
				 {
					 if (!tn_->Checked)
					 {
						 bl_ = true;
					 }
				 }
				 if (bl_)
				 {
					 e->Node->Parent->Checked = false;
				 }
			 }
		 }

		 //全选
private: System::Void lbl_other_trace_all_Click(System::Object^  sender, System::EventArgs^  e) {
			 for each(TreeNode^ tn_ in tv_other_trace->Nodes)
			 {
				 tn_->Checked = true;
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 tn_2->Checked = true;
				 }
			 }
		 }

		 //不全选
private: System::Void lbl_other_trace_noall_Click(System::Object^  sender, System::EventArgs^  e) {
			 for each(TreeNode^ tn_ in tv_other_trace->Nodes)
			 {
				 tn_->Checked = false;
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 tn_2->Checked = false;
				 }
			 }
		 }

		 //推荐
private: System::Void lbl_other_trace_recommend_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //设置
private: System::Void lbl_other_trace_reset_Click(System::Object^  sender, System::EventArgs^  e) {
			 for each(TreeNode^ tn_ in tv_other_trace->Nodes)
			 {
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 tn_2->Text = tn_2->Name;
				 }
			 }

			 if (lbl_other_trace_reset->Text == "重新扫描")
			 {
				 lbl_other_trace_reset->Text = "开始扫描";
				 btn_other_trace_Click(sender,e);
				 lbl_other_trace_reset->Visible = false;
			 }
			 else
			 {
				 btn_other_trace->Text = "开始扫描";
				 lbl_other_trace_msg->Text = "清理痕迹，保障隐私安全；信不信由你，反正我信了";
				 lbl_other_trace_reset->Visible = false;
			 }
		 }

		 //开始扫描
private: System::Void btn_other_trace_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 tp_other_trace_ulTotalCount = 0;

			 if (btn_other_trace->Text == "开始扫描")
			 {
				 btn_other_trace->Text = "取消";
				 lbl_other_trace_all->Enabled = false;
				 lbl_other_trace_noall->Enabled = false;
				 lbl_other_trace_recommend->Enabled = false;
				 lbl_other_trace_reset->Enabled = false;
				 tv_other_trace->Enabled = false;

				 tp_other_trace_thread = gcnew Thread(gcnew ThreadStart(this,&Form1::tv_other_trace_show));
				 tp_other_trace_thread->IsBackground = true;
				 tp_other_trace_thread->Start();
			 }
			 else if (btn_other_trace->Text == "取消")
			 {
				 if (tp_other_trace_thread!=nullptr && tp_other_trace_thread->IsAlive)
				 {
					 tp_other_trace_thread->Abort();		 
				 }

				 if (tv_other_trace_ulCount==0)
				 {
					 tp_other_trace_tnCurrent->Text = tp_other_trace_tnCurrent->Tag->ToString() + "(没有发现痕迹)";
				 }
				 else
				 {
					 tp_other_trace_tnCurrent->Text = tp_other_trace_tnCurrent->Tag->ToString() + "(痕迹数：" + tv_other_trace_ulCount.ToString() + ")";
				 }

				 tp_other_trace_ulTotalCount = tp_other_trace_ulTotalCount + tv_other_trace_ulCount;

				 lbl_other_trace_msg_deletate_show("扫描已完成！共扫描出 " + tp_other_trace_ulTotalCount.ToString() + "处痕迹");

				 btn_other_trace->Text = "立即清除";
				 lbl_other_trace_reset->Text = "重新扫描";
				 lbl_other_trace_reset->Visible = true;
				 lbl_other_trace_all->Enabled = true;
				 lbl_other_trace_noall->Enabled = true;
				 lbl_other_trace_recommend->Enabled = true;
				 lbl_other_trace_reset->Enabled = true;
				 tv_other_trace->Enabled = true;
			 }
			 else
			 {
				 //在这里清除
			 }
		 }
#pragma endregion tp_other_trace

		 //系统快照 --》文件快照
#pragma region tp_snap_file
		 //枚举
private: System::Void lv_snap_file_show(String^ str_)
		 {
			 try
			 {
				 //得到当前目录下的所有子目录
				 array<String^>^ strs_dirs = Directory::GetDirectories(str_);
				 //得到当前目录下的所有文件
				 array<String^>^ strs_files = Directory::GetFiles(str_);

				 //遍历当前目录下的所有文件
				 for each (String^ f in strs_files)
				 {
					 try
					 {
						 FileInfo^ fi_ = gcnew FileInfo(f);

						 //
						 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

						 //
						 item_->SubItems->AddRange(gcnew array<String^> { 
							 f, 
								 fi_->LastAccessTime.ToString(), 
								 fi_->LastWriteTime.ToString(),
								 "0x" + fi_->Length.ToString("X8"), 
								 common_net::common_getFileMD5(f) 
						 });

						 //
						 lv_snap_file->Items->Add(item_);
					 }
					 catch(Exception^ ex) { }
				 }

				 //遍历当前目录下的子目录
				 for each (String^ d in strs_dirs)
				 {
					 //
					 lv_snap_file_show(d);
				 }
			 }
			 catch(Exception^ ex){ }			 
		 }

		 //保存
private: System::Void lv_snap_file_save()
		 {
			 //
			 XmlDocument^ xd_ = gcnew XmlDocument();
			 xd_->LoadXml("<list notice='if you need to analysis file,please do not delete it!'>" + "</list>");

			 SFD->Filter = "xml files(*.xml)|*.xml";

			 if (SFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 try
				 {
					 //创建文件流
					 FileStream^ fs_ = gcnew FileStream(SFD->FileName, FileMode::OpenOrCreate);

					 //创建节点数组
					 array<String^>^ strs_element = gcnew array<String^> {"name", "path", "lastAccessTime", "lastWriteTime","size", "md5"};

					 //创建泛型
					 Dictionary<int,array<String^>^>^ dic_innerText = gcnew System::Collections::Generic::Dictionary<int,array<String^>^>();

					 //遍历listview中的元素
					 for (int i = 0; i < lv_snap_file->Items->Count; i++)
					 {
						 array<String^>^ strs_text = gcnew array<String^> { 
							 lv_snap_file->Items[i]->SubItems[0]->Text, 
								 lv_snap_file->Items[i]->SubItems[1]->Text, 							 
								 lv_snap_file->Items[i]->SubItems[2]->Text, 
								 lv_snap_file->Items[i]->SubItems[3]->Text,
								 lv_snap_file->Items[i]->SubItems[4]->Text,
								 lv_snap_file->Items[i]->SubItems[5]->Text,
						 };

						 //添加到泛型中
						 dic_innerText->Add(i,strs_text);
					 }

					 //向xml中写入
					 for (int i = 0; i < dic_innerText->Count; i++)
					 {
						 XmlElement^ xe_ = xd_->CreateElement("item");
						 xd_->DocumentElement->AppendChild(xe_);

						 //
						 array<String^>^ strs_dicValu = nullptr;
						 dic_innerText->TryGetValue(i,strs_dicValu);

						 //循环遍历
						 for (int j = 0; j < strs_element->Length; j++)
						 {
							 //创建节点
							 xe_ = xd_->CreateElement(strs_element[j]);
							 xd_->DocumentElement->LastChild->AppendChild(xe_);

							 //节点内嵌文本
							 XmlText^ xt_ = xd_->CreateTextNode(strs_dicValu[j]);
							 xd_->DocumentElement->ChildNodes[i]->LastChild->AppendChild(xt_);
						 }

					 }

					 //添加时间标签
					 xd_->DocumentElement->AppendChild(xd_->CreateElement("time"));
					 xd_->DocumentElement->LastChild->AppendChild(xd_->CreateTextNode(DateTime::Now.ToString()));

					 //写入流中
					 xd_->Save(fs_);

					 //最后关闭流
					 fs_->Close();
				 }
				 catch (System::Exception^ ex) { }
			 }
		 }

		 //保存
private: System::String^ lv_snap_file_dragDropToSave()
		 {
			 //		 				
			 String^ str_path = Environment::GetEnvironmentVariable("temp") + "\\" + DateTime::Now.ToString()->Replace("-","_")->Replace(" ","_")->Replace(":","_") + ".xml";

			 //
			 XmlDocument^ xd_ = gcnew XmlDocument();
			 xd_->LoadXml("<list notice='if you need to analysis file,please do not delete it!'>" + "</list>");

			 try
			 {
				 //创建文件流
				 FileStream^ fs_ = gcnew FileStream(str_path, FileMode::OpenOrCreate);

				 //创建节点数组
				 array<String^>^ strs_element = gcnew array<String^> {"name", "path", "lastAccessTime", "lastWriteTime","size", "md5"};

				 //创建泛型
				 Dictionary<int,array<String^>^>^ dic_innerText = gcnew System::Collections::Generic::Dictionary<int,array<String^>^>();

				 //遍历listview中的元素
				 for (int i = 0; i < lv_snap_file->Items->Count; i++)
				 {
					 array<String^>^ strs_text = gcnew array<String^> { 
						 lv_snap_file->Items[i]->SubItems[0]->Text, 
							 lv_snap_file->Items[i]->SubItems[1]->Text, 							 
							 lv_snap_file->Items[i]->SubItems[2]->Text, 
							 lv_snap_file->Items[i]->SubItems[3]->Text,
							 lv_snap_file->Items[i]->SubItems[4]->Text,
							 lv_snap_file->Items[i]->SubItems[5]->Text,
					 };

					 //添加到泛型中
					 dic_innerText->Add(i,strs_text);
				 }

				 //向xml中写入
				 for (int i = 0; i < dic_innerText->Count; i++)
				 {
					 XmlElement^ xe_ = xd_->CreateElement("item");
					 xd_->DocumentElement->AppendChild(xe_);

					 //
					 array<String^>^ strs_dicValu = nullptr;
					 dic_innerText->TryGetValue(i,strs_dicValu);

					 //循环遍历
					 for (int j = 0; j < strs_element->Length; j++)
					 {
						 //创建节点
						 xe_ = xd_->CreateElement(strs_element[j]);
						 xd_->DocumentElement->LastChild->AppendChild(xe_);

						 //节点内嵌文本
						 XmlText^ xt_ = xd_->CreateTextNode(strs_dicValu[j]);
						 xd_->DocumentElement->ChildNodes[i]->LastChild->AppendChild(xt_);
					 }

				 }

				 //添加时间标签
				 xd_->DocumentElement->AppendChild(xd_->CreateElement("time"));
				 xd_->DocumentElement->LastChild->AppendChild(xd_->CreateTextNode(DateTime::Now.ToString()));

				 //写入流中
				 xd_->Save(fs_);

				 //最后关闭流
				 fs_->Close();

				 //
				 return str_path;
			 }
			 catch (System::Exception^ ex) { return nullptr; }
		 }

		 //控制右键菜单的显示
private: System::Void lv_snap_file_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e){
			 if (lv_snap_file->Items->Count == 0)
			 {
				 cms_snap_file_save->Enabled = false;
				 cms_snap_file_clear->Enabled = false;
				 cms_snap_file_explorer->Enabled = false;
				 cms_snap_file_showProperty->Enabled = false;
			 }
			 else if(lv_snap_file->SelectedItems->Count == 0)
			 {
				 cms_snap_file_save->Enabled = true;
				 cms_snap_file_clear->Enabled = false;
				 cms_snap_file_explorer->Enabled = false;
				 cms_snap_file_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_snap_file_save->Enabled = true;
				 cms_snap_file_clear->Enabled = true;
				 cms_snap_file_explorer->Enabled = true;
				 cms_snap_file_showProperty->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_snap_file_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 if(e->Column == 2 || e->Column == 3)
				 {
					 //时间排序
					 lv_snap_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else if(e->Column == 4)
				 {
					 //16进制比较
					 lv_snap_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串比较
					 lv_snap_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 if(e->Column == 2 || e->Column == 3)
				 {
					 //时间排序
					 lv_snap_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,2,0);
				 }
				 else if(e->Column == 4)
				 {
					 //16进制比较
					 lv_snap_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,0,16);
				 }
				 else
				 {
					 //字符串比较
					 lv_snap_file->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);
				 }

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放操作
private: System::Void lv_snap_file_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 if (e->Data->GetDataPresent(DataFormats::FileDrop))
			 {
				 e->Effect = DragDropEffects::Link;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void lv_snap_file_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 array<String^>^ fileNames = (array<String^>^)e->Data->GetData(DataFormats::FileDrop);

			 //
			 if (lv_snap_file->Items->Count > 0)
			 {
				 lv_snap_file->Items->Clear();
			 }

			 //
			 for each(String^ str_ in fileNames)
			 {
				 FileInfo^ fi_ = gcnew FileInfo(str_);

				 //如果为文件夹
				 if (fi_->Attributes == FileAttributes::Directory)
				 {
					 lv_snap_file_show(str_);
				 }
			 }
		 }

		 //
private: System::Void lv_snap_file_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_snap_file->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = lv_snap_file_dragDropToSave();

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //选择目录
private: System::Void cms_snap_file_choose_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (FBD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //
				 if (lv_snap_file->Items->Count > 0)
				 {
					 lv_snap_file->Items->Clear();
				 }

				 //
				 lv_snap_file_show(FBD->SelectedPath);
			 }
		 }

		 //保存
private: System::Void cms_snap_file_save_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_snap_file_save();
		 }

		 //
private: System::Void cms_snap_file_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_snap_file->Items->Clear();
		 }

		 //
private: System::Void cms_snap_file_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_snap_file->SelectedItems[0];

			 //
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[1]->Text));
		 }

		 //
private: System::Void cms_snap_file_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_snap_file->SelectedItems[0];

			 //
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[1]->Text));
		 }

		 //导出
private: System::Void cms_snap_file_export_Click(System::Object^  sender, System::EventArgs^  e){
			 //
			 common_net::common_getListViewData(lv_snap_file);
		 }
#pragma endregion tp_snap_file

		 //系统快照 --》文件快照分析
#pragma region tp_snap_file_analysis

		 static String^ tp_snap_file_analysis_str_one = String::Empty;
		 static String^ tp_snap_file_analysis_str_two = String::Empty;

		 // 得出xml中的时间
private: System::String^ lv_snap_file_analysis_time(String^ str_)
		 {
			 try
			 {
				 String^ str_time = String::Empty;

				 //用于xml文件的加载
				 XmlDocument^ xml_doc = gcnew XmlDocument();
				 xml_doc->Load(str_);

				 //
				 XmlNode^ xml_node = xml_doc->FirstChild;

				 //
				 for each (XmlNode^ xml_node_sub in xml_node->ChildNodes)
				 {
					 if (xml_node_sub->Name == "time")
					 {
						 str_time = xml_node_sub->InnerText;
						 break;
					 }
				 }

				 //
				 return str_time;
			 }
			 catch(Exception^ ex){ return nullptr; }
		 }

		 //分析xml文件
private: System::Void lv_snap_file_analysis_xml(String^ str_,Dictionary<int,String^>^ dic_path,Dictionary<int,array<String^>^>^ dic_path_sub)
		 {
			 //索引
			 int index = 0;

			 //用于xml文件的加载
			 XmlDocument^ xml_doc = gcnew XmlDocument();
			 xml_doc->Load(str_);

			 //
			 XmlNode^ xml_node = xml_doc->FirstChild;

			 //
			 for each (XmlNode^ xml_node_sub in xml_node->ChildNodes)
			 {
				 if (xml_node_sub->Name == "item")
				 {
					 //
					 array<String^>^ strs_name_item = gcnew array<String^>(5);

					 //
					 for each (XmlNode^ xml_subNode_sub in xml_node_sub->ChildNodes)
					 {
						 if (xml_subNode_sub->Name == "path")
						 {
							 //
							 dic_path->Add(index,xml_subNode_sub->InnerText);
						 }
						 else if (xml_subNode_sub->Name == "name")
						 {
							 strs_name_item[0] = xml_subNode_sub->InnerText;
						 }
						 else if (xml_subNode_sub->Name == "lastAccessTime")
						 {
							 strs_name_item[1] = xml_subNode_sub->InnerText;
						 }
						 else if (xml_subNode_sub->Name == "lastWriteTime")
						 {
							 strs_name_item[2] = xml_subNode_sub->InnerText;
						 }
						 else if (xml_subNode_sub->Name == "size")
						 {
							 strs_name_item[3] = xml_subNode_sub->InnerText;
						 }
						 else if (xml_subNode_sub->Name == "md5")
						 {
							 strs_name_item[4] = xml_subNode_sub->InnerText;
						 }
					 }

					 //
					 dic_path_sub->Add(index,strs_name_item);

					 //
					 index ++;
				 }
			 }
		 }

		 //分析
private: System::Void lv_snap_file_analysis_show_func(Dictionary<int,String^>^ dic_path_one,Dictionary<int,array<String^>^>^ dic_path_sub_one,Dictionary<int,String^>^ dic_path_two,Dictionary<int,array<String^>^>^ dic_path_sub_two){
			 for(int i = 0; i < dic_path_two->Count; i ++)
			 {
				 //
				 String^ str_two = String::Empty;
				 //
				 dic_path_two->TryGetValue(i,str_two);

				 //
				 for(int j = 0;j < dic_path_one->Count;j ++)
				 {
					 //
					 String^ str_one = String::Empty;
					 //
					 dic_path_one->TryGetValue(j,str_one);

					 //
					 if (str_two == str_one)
					 {
						 //在这里处理其余子项
						 array<String^>^ strs_one = gcnew array<String^>(5);
						 dic_path_sub_one->TryGetValue(j,strs_one);

						 array<String^>^ strs_two = gcnew array<String^>(5);
						 dic_path_sub_two->TryGetValue(i,strs_two);

						 //
						 for (int m = 0; m < 5;  m ++)
						 {
							 if (strs_one[m] != strs_two[m])
							 {
								 //
								 String^ str_msg = String::Empty;
								 //
								 switch(m)
								 {
								 case 1:
									 str_msg = "上次访问时间";
									 break;
								 case 2:
									 str_msg = "上次修改时间";
									 break;
								 case 3:
									 str_msg = "文件大小";
									 break;
								 case 4:
									 str_msg = "文件MD5";
									 break;
								 }

								 //原始
								 ListViewItem^ item_ = gcnew ListViewItem(strs_one[0]);

								 //
								 item_->SubItems->AddRange(gcnew array<String^>{str_one,str_msg + "~(比较老)~" + strs_one[m]});

								 //
								 lv_snap_file_analysis->Items->Add(item_);

								 //
								 item_ = gcnew ListViewItem(strs_two[0]);

								 //
								 item_->SubItems->AddRange(gcnew array<String^>{str_two,str_msg + "~(最新)~" + strs_two[m]});

								 //
								 lv_snap_file_analysis->Items->Add(item_);
							 }
						 }

						 //
						 break;
					 }
					 else if (j == dic_path_one->Count - 1 && str_two != str_one)
					 {
						 FileInfo^ fi_ = gcnew FileInfo(str_two);

						 //
						 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

						 //
						 item_->SubItems->AddRange(gcnew array<String^>{str_two,"新增文件"});

						 //
						 lv_snap_file_analysis->Items->Add(item_);
					 }
				 }
			 }

			 for(int i = 0; i < dic_path_one->Count; i ++)
			 {
				 //
				 String^ str_one = String::Empty;
				 //
				 dic_path_one->TryGetValue(i,str_one);

				 //
				 for(int j = 0; j < dic_path_two->Count;j ++)
				 {
					 //
					 String^ str_two = String::Empty;
					 dic_path_two->TryGetValue(j,str_two);

					 //
					 if (str_one == str_two)
					 {
						 //
						 break;
					 }
					 else if (j == dic_path_two->Count - 1 && str_one != str_two)
					 {
						 FileInfo^ fi_ = gcnew FileInfo(str_one);

						 //
						 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

						 //
						 item_->SubItems->AddRange(gcnew array<String^>{str_one,"文件不存在"});

						 //
						 lv_snap_file_analysis->Items->Add(item_);
					 }
				 }
			 }
		 }

		 //
private: System::Void lv_snap_file_analysis_show(String^ str_file1,String^ str_file2){
			 //
			 Dictionary<int,String^>^ dic_path_one = gcnew Generic::Dictionary<int,String^>();
			 Dictionary<int,array<String^>^>^ dic_path_sub_one = gcnew Generic::Dictionary<int,array<String^>^>();
			 Dictionary<int,String^>^ dic_path_two = gcnew Generic::Dictionary<int,String^>();
			 Dictionary<int,array<String^>^>^ dic_path_sub_two = gcnew Generic::Dictionary<int,array<String^>^>();

			 //获得xml里面的时间
			 String^ str_one = String::Empty;

			 //如果失败，代表发生错误
			 str_one = lv_snap_file_analysis_time(str_file1);

			 if (str_one == nullptr)
			 {
				 return;
			 }

			 //同上
			 String^ str_two = String::Empty;

			 str_two = lv_snap_file_analysis_time(str_file2);

			 if (str_two == nullptr)
			 {
				 return;
			 }

			 if (Convert::ToDateTime(str_one) > Convert::ToDateTime(str_two))
			 {
				 lv_snap_file_analysis_xml(str_file2,dic_path_one,dic_path_sub_one);
				 lv_snap_file_analysis_xml(str_file1,dic_path_two,dic_path_sub_two);
			 }
			 else
			 {
				 lv_snap_file_analysis_xml(str_file1,dic_path_one,dic_path_sub_one);
				 lv_snap_file_analysis_xml(str_file2,dic_path_two,dic_path_sub_two);
			 }

			 //
			 lv_snap_file_analysis_show_func(dic_path_one,dic_path_sub_one,dic_path_two,dic_path_sub_two);

			 //
			 dic_path_one->Clear();
			 dic_path_sub_one->Clear();
			 dic_path_two->Clear();
			 dic_path_sub_two->Clear();
		 }

		 //控制右键菜单的显示
private: System::Void lv_snap_file_analysis_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e){
			 if (lv_snap_file_analysis->Items->Count == 0)
			 {
				 cms_snap_file_analysis_clear->Enabled = false;
				 cms_snap_file_analysis_explorer->Enabled = false;
				 cms_snap_file_analysis_showProperty->Enabled = false;
			 }
			 else if(lv_snap_file_analysis->SelectedItems->Count == 0)
			 {
				 cms_snap_file_analysis_clear->Enabled = false;
				 cms_snap_file_analysis_explorer->Enabled = false;
				 cms_snap_file_analysis_showProperty->Enabled = false;
			 }
			 else
			 {
				 cms_snap_file_analysis_clear->Enabled = true;
				 cms_snap_file_analysis_explorer->Enabled = true;
				 cms_snap_file_analysis_showProperty->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_snap_file_analysis_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串比较
				 lv_snap_file_analysis->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);			 
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串比较
				 lv_snap_file_analysis->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);	

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //拖放操作
private: System::Void lv_snap_file_analysis_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 if (e->Data->GetDataPresent(DataFormats::FileDrop))
			 {
				 e->Effect = DragDropEffects::Link;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void lv_snap_file_analysis_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 array<String^>^ fileNames = (array<String^>^)e->Data->GetData(DataFormats::FileDrop);

			 //
			 if (lv_snap_file_analysis->Items->Count > 0)
			 {
				 lv_snap_file_analysis->Items->Clear();
			 }

			 //只允许一次性托两个文件或两个以上的文件
			 if (fileNames->Length != 2)
			 {
				 return;
			 }

			 //
			 for each(String^ str_ in fileNames)
			 {
				 FileInfo^ fi_ = gcnew FileInfo(str_);

				 //
				 if (fi_->Attributes == FileAttributes::Directory || fi_->Extension->ToLower() != ".xml")
				 {
					 return;
				 }
			 }		 

			 //
			 lv_snap_file_analysis_show(fileNames[0],fileNames[1]);
		 }

		 //
private: System::Void lv_snap_file_analysis_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_snap_file_analysis->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_snap_file_analysis);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("导出失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 
		 }

		 //
private: System::Void cms_snap_file_analysis_one_Click(System::Object^  sender, System::EventArgs^  e) {
			 OFD->Multiselect = false;
			 OFD->Filter = "xml files(*.xml)|*.xml";

			 if (OFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //OFD->FileName;
				 tp_snap_file_analysis_str_one = OFD->FileName;

				 if (!String::IsNullOrEmpty(tp_snap_file_analysis_str_two))
				 {
					 //
					 lv_snap_file_analysis_show(tp_snap_file_analysis_str_one,tp_snap_file_analysis_str_two);

					 tp_snap_file_analysis_str_one = String::Empty;
					 tp_snap_file_analysis_str_two = String::Empty;
				 }
			 }
		 }

		 //
private: System::Void cms_snap_file_analysis_two_Click(System::Object^  sender, System::EventArgs^  e) {
			 OFD->Multiselect = false;
			 OFD->Filter = "xml files(*.xml)|*.xml";

			 if (OFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //OFD->FileName;
				 tp_snap_file_analysis_str_two = OFD->FileName;

				 if (!String::IsNullOrEmpty(tp_snap_file_analysis_str_one))
				 {
					 //
					 lv_snap_file_analysis_show(tp_snap_file_analysis_str_one,tp_snap_file_analysis_str_two);

					 tp_snap_file_analysis_str_one = String::Empty;
					 tp_snap_file_analysis_str_two = String::Empty;
				 }
			 }
		 }

		 //
private: System::Void cms_snap_file_analysis_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_snap_file_analysis->Items->Clear();
		 }

		 //
private: System::Void cms_snap_file_analysis_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_snap_file_analysis->SelectedItems[0];

			 //
			 common_explorerFile(common_net::common_stringToHGlobalAnsi(item_->SubItems[1]->Text));
		 }

		 //
private: System::Void cms_snap_file_analysis_showProperty_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 ListViewItem^ item_ = lv_snap_file_analysis->SelectedItems[0];

			 //
			 common_showFileProperty(common_net::common_stringToHGlobalUni(item_->SubItems[1]->Text));
		 }

		 //导出
private: System::Void cms_snap_file_analysis_export_Click(System::Object^  sender, System::EventArgs^  e){
			 //
			 common_net::common_getListViewData(lv_snap_file_analysis);
		 }
#pragma endregion tp_snap_file_analysis

		 //系统快照 --》注册表快照
#pragma region tp_snap_reg
		 //
private: System::Void lv_snap_reg_get_root(TreeNode^ tn_,String^ str_,RegistryKey^ rk_)
		 {
			 tn_ = gcnew TreeNode(str_,1,2);
			 tn_->Tag = rk_;
			 tv_snap_reg->Nodes[0]->Nodes->Add(tn_);
			 lv_reg_get_all_subNode(rk_, tn_);
		 }

		 //
private: System::Void tv_snap_reg_BeforeExpand(System::Object^  sender, System::Windows::Forms::TreeViewCancelEventArgs^  e) {
			 try
			 {
				 for each(TreeNode^ tn_ in e->Node->Nodes)
				 {
					 lv_reg_get_all_subNode((RegistryKey^)tn_->Tag, tn_);
				 }
			 }
			 catch(Exception^ ex){ }
		 }

		 //
private: System::Void tv_snap_reg_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (e->Button == System::Windows::Forms::MouseButtons::Right) 
			 { 
				 //获得鼠标位置
				 Point p = Point(e->X, e->Y); 

				 //获得treenode
				 TreeNode^ tn_ = tv_snap_reg->GetNodeAt(p); 
				 //选中
				 tv_snap_reg->SelectedNode = tn_; 
			 } 
		 }

		 //
private: System::Void tv_snap_reg_show()
		 {
			 //清空
			 tv_snap_reg->Nodes->Clear();

			 TreeNode^ tn_ = gcnew TreeNode("我的电脑",0,0);
			 tv_snap_reg->Nodes->Add(tn_);

			 //枚举HKEY_CLASSES_ROOT
			 lv_snap_reg_get_root(tn_, "HKEY_CLASSES_ROOT",Registry::ClassesRoot);

			 //枚举HKEY_CURRENT_USER
			 lv_snap_reg_get_root(tn_, "HKEY_CURRENT_USER", Registry::CurrentUser);

			 //枚举HKEY_LOCAL_MACHINE
			 lv_snap_reg_get_root(tn_, "HKEY_LOCAL_MACHINE", Registry::LocalMachine);

			 //枚举HKEY_USERS
			 lv_snap_reg_get_root(tn_, "HKEY_USERS", Registry::Users);

			 //枚举HKEY_CURRENT_CONFIG
			 lv_snap_reg_get_root(tn_, "HKEY_CURRENT_CONFIG", Registry::CurrentConfig);

			 tv_snap_reg->Nodes[0]->Expand();

			 //从配置文件中加载信息
			 try
			 {
				 String^ str_cbo_snap_reg_items = common_net::config_getPrivateProfileString("main","cbo_reg_items",Application::StartupPath+"\\Deianeira.config");

				 array<String^>^ strs_ = str_cbo_snap_reg_items->Split(gcnew array<String^>{";"},StringSplitOptions::RemoveEmptyEntries);

				 for (int i = 0;i<strs_->Length;i++)
				 {
					 //显示名称
					 cbo_snap_reg->Items->Add(strs_[i]);
				 }
			 }
			 catch (Exception^ ex){ }

			 //往cbo_snap_reg添加常用想
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellExecuteHooks");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\IniFileMapping");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\IPSec\\Policy\\Local");
			 cbo_snap_reg->Items->Add("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace");

			 cbo_snap_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run");
			 cbo_snap_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer");
			 cbo_snap_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows");
			 cbo_snap_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon");
			 cbo_snap_reg->Items->Add("HKEY_CURRENT_USER\\Software\\Microsoft\\Internet Explorer");
		 }

		 //
private: RegistryKey^ lv_snap_reg_show_func(String^ str_){
			 //
			 str_ = str_->ToUpper();

			 //
			 if (str_ == "HKEY_CLASSES_ROOT")
			 {
				 return Registry::ClassesRoot;
			 }

			 //
			 if (str_ == "HKEY_CURRENT_USER")
			 {
				 return Registry::CurrentUser;
			 }

			 //
			 if (str_ == "HKEY_LOCAL_MACHINE")
			 {
				 return Registry::LocalMachine;
			 }

			 //
			 if (str_ == "HKEY_USERS")
			 {
				 return Registry::Users;
			 }

			 //
			 if (str_ == "HKEY_CURRENT_CONFIG")
			 {
				 return Registry::CurrentConfig;
			 }
		 }

		 //
private: System::Void lv_snap_reg_show_func2(RegistryKey^ rk_){

			 //得到当前目录下的所有子目录
			 array<String^>^ strs_keys = rk_->GetSubKeyNames();
			 //得到当前目录下的所有文件
			 array<String^>^ strs_values = rk_->GetValueNames(); 

			 //遍历当前目录下的所有文件
			 for each(String^ str_ in strs_values)
			 {
				 try
				 {				
					 //
					 ListViewItem^ item_ = nullptr;
					 //
					 String^ str_value = String::Empty;

					 //
					 if (str_ == "")
					 {
						 item_ = gcnew ListViewItem("default");
					 }
					 else
					 {
						 item_ = gcnew ListViewItem(str_);
					 }

					 //
					 switch (rk_->GetValueKind(str_))
					 {
					 case RegistryValueKind::Binary:
						 //
						 str_value = common_net::common_byteToString((array<byte>^)rk_->GetValue(str_));
						 break;
					 default:
						 //
						 str_value = rk_->GetValue(str_)->ToString();
						 break;
					 }

					 //
					 if (str_ == "")
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{rk_->Name + "\\default","value",rk_->GetValueKind(str_).ToString(),str_value});
					 }
					 else
					 {
						 item_->SubItems->AddRange(gcnew array<String^>{rk_->Name + "\\" + str_,"value",rk_->GetValueKind(str_).ToString(),str_value});
					 }		 
					 //
					 lv_snap_reg->Items->Add(item_);
				 }
				 catch(Exception^ ex) { }
			 }

			 //遍历当前目录下的子目录
			 for each (String^ str_ in strs_keys)
			 {
				 try
				 {
					 //
					 ListViewItem^ item_ = gcnew ListViewItem(str_);
					 //
					 item_->SubItems->AddRange(gcnew array<String^>{rk_->Name + "\\" + str_,"key","","" });
					 //
					 lv_snap_reg->Items->Add(item_);
					 //
					 RegistryKey^ rk_sub = rk_->OpenSubKey(str_);
					 //
					 lv_snap_reg_show_func2(rk_sub);
				 }
				 catch(Exception^ ex){ }		 
			 }
		 }

		 //
private: System::Void lv_snap_reg_show(String^ str_){
			 //
			 RegistryKey^ rk_ = nullptr;

			 //
			 array<String^>^ strs_ = str_->Split(gcnew array<String^>{"\\"},StringSplitOptions::RemoveEmptyEntries);

			 //
			 if (strs_->Length == 1)
			 {
				 //
				 rk_ = lv_snap_reg_show_func(str_);

				 //
				 if (lv_snap_reg->Items->Count > 0)
				 {
					 lv_snap_reg->Items->Clear();
				 }

				 //
				 lv_snap_reg_show_func2(rk_);
			 }
			 else
			 {
				 //
				 rk_ = lv_snap_reg_show_func(strs_[0]);
				 //
				 rk_ = rk_->OpenSubKey(str_->Substring(str_->IndexOf("\\") + 1));

				 //
				 lv_snap_reg_show_func2(rk_);
			 }
		 }

		 //保存
private: System::Void lv_snap_reg_save()
		 {
			 //
			 XmlDocument^ xd_ = gcnew XmlDocument();
			 xd_->LoadXml("<list notice='if you need to analysis file,please do not delete it!'>" + "</list>");

			 SFD->Filter = "xml files(*.xml)|*.xml";

			 if (SFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 try
				 {
					 //创建文件流
					 FileStream^ fs_ = gcnew FileStream(SFD->FileName, FileMode::OpenOrCreate);

					 //创建节点数组
					 array<String^>^ strs_element = gcnew array<String^> {"name", "path", "type", "valuetype","value"};

					 //创建泛型
					 Dictionary<int,array<String^>^>^ dic_innerText = gcnew System::Collections::Generic::Dictionary<int,array<String^>^>();

					 //遍历listview中的元素
					 for (int i = 0; i < lv_snap_reg->Items->Count; i++)
					 {
						 array<String^>^ strs_text = gcnew array<String^> { 
							 lv_snap_reg->Items[i]->SubItems[0]->Text, 
								 lv_snap_reg->Items[i]->SubItems[1]->Text, 							 
								 lv_snap_reg->Items[i]->SubItems[2]->Text, 
								 lv_snap_reg->Items[i]->SubItems[3]->Text,
								 lv_snap_reg->Items[i]->SubItems[4]->Text
						 };

						 //添加到泛型中
						 dic_innerText->Add(i,strs_text);
					 }

					 //向xml中写入
					 for (int i = 0; i < dic_innerText->Count; i++)
					 {
						 XmlElement^ xe_ = xd_->CreateElement("item");
						 xd_->DocumentElement->AppendChild(xe_);

						 //
						 array<String^>^ strs_dicValu = nullptr;
						 dic_innerText->TryGetValue(i,strs_dicValu);

						 //循环遍历
						 for (int j = 0; j < strs_element->Length; j++)
						 {
							 //创建节点
							 xe_ = xd_->CreateElement(strs_element[j]);
							 xd_->DocumentElement->LastChild->AppendChild(xe_);

							 //节点内嵌文本
							 XmlText^ xt_ = xd_->CreateTextNode(strs_dicValu[j]);
							 xd_->DocumentElement->ChildNodes[i]->LastChild->AppendChild(xt_);
						 }

					 }

					 //添加时间标签
					 xd_->DocumentElement->AppendChild(xd_->CreateElement("time"));
					 xd_->DocumentElement->LastChild->AppendChild(xd_->CreateTextNode(DateTime::Now.ToString()));

					 //写入流中
					 xd_->Save(fs_);

					 //最后关闭流
					 fs_->Close();
				 }
				 catch (System::Exception^ ex) { }
			 }
		 }

		 //保存
private: System::String^ lv_snap_reg_dragDropToSave()
		 {
			 //		 				
			 String^ str_path = Environment::GetEnvironmentVariable("temp") + "\\" + DateTime::Now.ToString()->Replace("-","_")->Replace(" ","_")->Replace(":","_") + ".xml";

			 //
			 XmlDocument^ xd_ = gcnew XmlDocument();
			 xd_->LoadXml("<list notice='if you need to analysis file,please do not delete it!'>" + "</list>");

			 try
			 {
				 //创建文件流
				 FileStream^ fs_ = gcnew FileStream(str_path, FileMode::OpenOrCreate);

				 //创建节点数组
				 array<String^>^ strs_element = gcnew array<String^> {"name", "path", "type", "valuetype","value"};

				 //创建泛型
				 Dictionary<int,array<String^>^>^ dic_innerText = gcnew System::Collections::Generic::Dictionary<int,array<String^>^>();

				 //遍历listview中的元素
				 for (int i = 0; i < lv_snap_reg->Items->Count; i++)
				 {
					 array<String^>^ strs_text = gcnew array<String^> { 
						 lv_snap_reg->Items[i]->SubItems[0]->Text, 
							 lv_snap_reg->Items[i]->SubItems[1]->Text, 							 
							 lv_snap_reg->Items[i]->SubItems[2]->Text, 
							 lv_snap_reg->Items[i]->SubItems[3]->Text,
							 lv_snap_reg->Items[i]->SubItems[4]->Text
					 };

					 //添加到泛型中
					 dic_innerText->Add(i,strs_text);
				 }

				 //向xml中写入
				 for (int i = 0; i < dic_innerText->Count; i++)
				 {
					 XmlElement^ xe_ = xd_->CreateElement("item");
					 xd_->DocumentElement->AppendChild(xe_);

					 //
					 array<String^>^ strs_dicValu = nullptr;
					 dic_innerText->TryGetValue(i,strs_dicValu);

					 //循环遍历
					 for (int j = 0; j < strs_element->Length; j++)
					 {
						 //创建节点
						 xe_ = xd_->CreateElement(strs_element[j]);
						 xd_->DocumentElement->LastChild->AppendChild(xe_);

						 //节点内嵌文本
						 XmlText^ xt_ = xd_->CreateTextNode(strs_dicValu[j]);
						 xd_->DocumentElement->ChildNodes[i]->LastChild->AppendChild(xt_);
					 }
				 }

				 //添加时间标签
				 xd_->DocumentElement->AppendChild(xd_->CreateElement("time"));
				 xd_->DocumentElement->LastChild->AppendChild(xd_->CreateTextNode(DateTime::Now.ToString()));

				 //写入流中
				 xd_->Save(fs_);

				 //最后关闭流
				 fs_->Close();

				 //
				 return str_path;
			 }
			 catch (System::Exception^ ex) { return nullptr; }
		 }

		 //
private: System::Void tv_snap_reg_findNode_func(TreeNode^ tn_,String^ str_)
		 {
			 try
			 {
				 //遍历数组
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 if (tn_2->Tag->ToString() == str_)
					 {
						 tn_2->Expand();	
						 //
						 tv_snap_reg->Focus();
						 //
						 tv_snap_reg->SelectedNode = tn_2;			 

						 break;
					 }

					 //
					 tv_snap_reg_findNode_func(tn_2,str_);
				 }	 
			 }
			 catch(Exception^ ex) { }
		 }

		 //
private: System::Void tv_snap_reg_findNode_func2(TreeNode^ tn_,String^ str_)
		 {
			 try
			 {
				 //遍历数组
				 for each(TreeNode^ tn_2 in tn_->Nodes)
				 {
					 if (tn_2->Text == str_)
					 {
						 tn_2->Expand();
						 //
						 tv_snap_reg->Focus();
						 //
						 tv_snap_reg->SelectedNode = tn_2;
						 break;
					 }

					 //
					 tv_snap_reg_findNode_func(tn_2,str_);
				 }	 
			 }
			 catch(Exception^ ex) { }
		 }

		 //
private: System::Void tv_snap_reg_findNode_func3(array<String^>^ strs_)
		 {
			 try
			 {
				 //
				 tv_snap_reg->SelectedNode = tv_snap_reg->Nodes[0];

				 for (int i = 0;i < strs_->Length;i ++)
				 {
					 //
					 tv_snap_reg_findNode_func2(tv_snap_reg->SelectedNode,strs_[i]);
				 }
			 }
			 catch(Exception^ ex) { }
		 }

		 //
private: System::Void cbo_snap_reg_KeyPress(System::Object^  sender, System::Windows::Forms::KeyPressEventArgs^  e) {
			 if (e->KeyChar == (Char)13)
			 {
				 //
				 array<String^>^ strs_ = cbo_snap_reg->Text->Split('\\');

				 //
				 tv_snap_reg_findNode_func3(strs_);

				 //把信息写入配置文件
				 try
				 {
					 //如果是已经在列表里面的话，就不要写入配置文件了
					 for each(String^ str_ in cbo_snap_reg->Items)
					 {
						 //如果已经存在相同记录的话就返回
						 if (str_ == cbo_snap_reg->Text)
						 {
							 return;
						 }
					 }

					 //
					 String^ str_cbo_reg_items = common_net::config_getPrivateProfileString("main","cbo_reg_items",Application::StartupPath+"\\Deianeira.config");
					 //
					 array<String^>^ strs_ = str_cbo_reg_items->Split(gcnew array<String^>{";"},StringSplitOptions::RemoveEmptyEntries);

					 //
					 for (int i = 0;i<strs_->Length;i++)
					 {
						 //如果已经存在相同记录的话就返回
						 if (strs_[i] == cbo_snap_reg->Text)
						 {
							 return;
						 }
					 }	

					 //
					 str_cbo_reg_items = cbo_reg->Text + ";" + str_cbo_reg_items;
					 common_net::config_writePrivateProfileString("main","cbo_reg_items",str_cbo_reg_items,Application::StartupPath+"\\Deianeira.config");
				 }
				 catch (Exception^ ex){ }
			 }
		 }

		 //
private: System::Void tv_snap_reg_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 String^ str_ = ((TreeNode^)e->Item)->Tag->ToString();
			 //开始进行"Drag"操作
			 DoDragDrop(str_, DragDropEffects::Copy);
		 }

		 //
private: System::Void lv_snap_reg_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_snap_reg->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = lv_snap_reg_dragDropToSave();

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("导出失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 
		 }

		 //
private: System::Void lv_snap_reg_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 if (e->Data->GetDataPresent(DataFormats::Text))
			 {
				 e->Effect = DragDropEffects::Copy;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void lv_snap_reg_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 //
			 String^ str_ = (String^)e->Data->GetData(DataFormats::Text);

			 //
			 lv_snap_reg_show(str_);
		 }

		 //
private: System::Void lv_snap_reg_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_snap_reg->Items->Count == 0)
			 {
				 cms_snap_reg_save->Enabled = false;
				 cms_snap_reg_clear->Enabled = false;
				 cms_snap_reg_explorer->Enabled = false;
			 }
			 else if(lv_snap_reg->SelectedItems->Count == 0)
			 {
				 cms_snap_reg_save->Enabled = true;
				 cms_snap_reg_clear->Enabled = false;
				 cms_snap_reg_explorer->Enabled = false;
			 }
			 else
			 {
				 cms_snap_reg_save->Enabled = true;
				 cms_snap_reg_clear->Enabled = true;
				 cms_snap_reg_explorer->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_snap_reg_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串比较
				 lv_snap_reg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);			 
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串比较
				 lv_snap_reg->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);	

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //
private: System::Void cms_snap_reg_save_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_snap_reg_save();
		 }

		 //
private: System::Void cms_snap_reg_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_snap_reg->Items->Clear();
		 }

		 //
private: System::Void cms_snap_reg_explorer_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 
		 }

		 //
private: System::Void cms_snap_reg_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 common_net::common_getListViewData(lv_snap_reg);
		 }
#pragma endregion tp_snap_reg

		 //系统快照 --》注册表快照分析
#pragma region tp_snap_reg_analysis
		 //
		 static String^ tp_snap_reg_analysis_str_one = String::Empty;
		 static String^ tp_snap_reg_analysis_str_two = String::Empty;

		 //分析xml文件
private: System::Void lv_snap_reg_analysis_xml(String^ str_,Dictionary<int,String^>^ dic_path,Dictionary<int,array<String^>^>^ dic_path_sub)
		 {
			 //索引
			 int index = 0;

			 //用于xml文件的加载
			 XmlDocument^ xml_doc = gcnew XmlDocument();
			 xml_doc->Load(str_);

			 //
			 XmlNode^ xml_node = xml_doc->FirstChild;

			 //
			 for each (XmlNode^ xml_node_sub in xml_node->ChildNodes)
			 {
				 if (xml_node_sub->Name == "item")
				 {
					 //
					 array<String^>^ strs_name_item = gcnew array<String^>(4);

					 //
					 for each (XmlNode^ xml_subNode_sub in xml_node_sub->ChildNodes)
					 {
						 if (xml_subNode_sub->Name == "path")
						 {
							 //
							 dic_path->Add(index,xml_subNode_sub->InnerText);
						 }
						 else if (xml_subNode_sub->Name == "name")
						 {
							 strs_name_item[0] = xml_subNode_sub->InnerText;
						 }
						 else if (xml_subNode_sub->Name == "type")
						 {
							 strs_name_item[1] = xml_subNode_sub->InnerText;
						 }
						 else if (xml_subNode_sub->Name == "valuetype")
						 {
							 strs_name_item[2] = xml_subNode_sub->InnerText;
						 }
						 else if (xml_subNode_sub->Name == "value")
						 {
							 strs_name_item[3] = xml_subNode_sub->InnerText;
						 }
					 }

					 //
					 dic_path_sub->Add(index,strs_name_item);

					 //
					 index ++;
				 }
			 }
		 }

		 //分析
private: System::Void lv_snap_reg_analysis_show_func(Dictionary<int,String^>^ dic_path_one,Dictionary<int,array<String^>^>^ dic_path_sub_one,Dictionary<int,String^>^ dic_path_two,Dictionary<int,array<String^>^>^ dic_path_sub_two){
			 for(int i = 0; i < dic_path_two->Count; i ++)
			 {
				 //
				 String^ str_two = String::Empty;
				 //
				 dic_path_two->TryGetValue(i,str_two);

				 //
				 for(int j = 0;j < dic_path_one->Count;j ++)
				 {
					 //
					 String^ str_one = String::Empty;
					 //
					 dic_path_one->TryGetValue(j,str_one);

					 //
					 if (str_two == str_one)
					 {
						 //在这里处理其余子项
						 array<String^>^ strs_one = gcnew array<String^>(4);
						 dic_path_sub_one->TryGetValue(j,strs_one);

						 array<String^>^ strs_two = gcnew array<String^>(4);
						 dic_path_sub_two->TryGetValue(i,strs_two);

						 //
						 for (int m = 0; m < 4;  m ++)
						 {
							 if (strs_one[m] != strs_two[m])
							 {
								 //
								 String^ str_msg = String::Empty;
								 //
								 switch(m)
								 {
								 case 1:
									 str_msg = "type";
									 break;
								 case 2:
									 str_msg = "valuetype";
									 break;
								 case 3:
									 str_msg = "value";
									 break;
								 }

								 //原始
								 ListViewItem^ item_ = gcnew ListViewItem(strs_one[0]);

								 //
								 item_->SubItems->AddRange(gcnew array<String^>{str_one,str_msg + "~(比较老)~" + strs_one[m]});

								 //
								 lv_snap_reg_analysis->Items->Add(item_);

								 //
								 item_ = gcnew ListViewItem(strs_two[0]);

								 //
								 item_->SubItems->AddRange(gcnew array<String^>{str_two,str_msg + "~(最新)~" + strs_two[m]});

								 //
								 lv_snap_reg_analysis->Items->Add(item_);
							 }
						 }

						 //
						 break;
					 }
					 else if (j == dic_path_one->Count - 1 && str_two != str_one)
					 {
						 FileInfo^ fi_ = gcnew FileInfo(str_two);

						 //
						 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

						 //
						 item_->SubItems->AddRange(gcnew array<String^>{str_two,"新增"});

						 //
						 lv_snap_reg_analysis->Items->Add(item_);
					 }
				 }
			 }

			 for(int i = 0; i < dic_path_one->Count; i ++)
			 {
				 //
				 String^ str_one = String::Empty;
				 //
				 dic_path_one->TryGetValue(i,str_one);

				 //
				 for(int j = 0; j < dic_path_two->Count;j ++)
				 {
					 //
					 String^ str_two = String::Empty;
					 dic_path_two->TryGetValue(j,str_two);

					 //
					 if (str_one == str_two)
					 {
						 //
						 break;
					 }
					 else if (j == dic_path_two->Count - 1 && str_one != str_two)
					 {
						 FileInfo^ fi_ = gcnew FileInfo(str_one);

						 //
						 ListViewItem^ item_ = gcnew ListViewItem(fi_->Name);

						 //
						 item_->SubItems->AddRange(gcnew array<String^>{str_one,"不存在"});

						 //
						 lv_snap_reg_analysis->Items->Add(item_);
					 }
				 }
			 }
		 }

		 //
private: System::Void lv_snap_reg_analysis_show(String^ str_file1,String^ str_file2){
			 //
			 Dictionary<int,String^>^ dic_path_one = gcnew Generic::Dictionary<int,String^>();
			 Dictionary<int,array<String^>^>^ dic_path_sub_one = gcnew Generic::Dictionary<int,array<String^>^>();
			 Dictionary<int,String^>^ dic_path_two = gcnew Generic::Dictionary<int,String^>();
			 Dictionary<int,array<String^>^>^ dic_path_sub_two = gcnew Generic::Dictionary<int,array<String^>^>();

			 //获得xml里面的时间
			 String^ str_one = String::Empty;

			 //如果失败，代表发生错误
			 str_one = lv_snap_file_analysis_time(str_file1);

			 if (str_one == nullptr)
			 {
				 return;
			 }

			 //同上
			 String^ str_two = String::Empty;

			 str_two = lv_snap_file_analysis_time(str_file2);

			 if (str_two == nullptr)
			 {
				 return;
			 }

			 if (Convert::ToDateTime(str_one) > Convert::ToDateTime(str_two))
			 {
				 lv_snap_reg_analysis_xml(str_file2,dic_path_one,dic_path_sub_one);
				 lv_snap_reg_analysis_xml(str_file1,dic_path_two,dic_path_sub_two);
			 }
			 else
			 {
				 lv_snap_reg_analysis_xml(str_file1,dic_path_one,dic_path_sub_one);
				 lv_snap_reg_analysis_xml(str_file2,dic_path_two,dic_path_sub_two);
			 }

			 //
			 lv_snap_reg_analysis_show_func(dic_path_one,dic_path_sub_one,dic_path_two,dic_path_sub_two);

			 //
			 dic_path_one->Clear();
			 dic_path_sub_one->Clear();
			 dic_path_two->Clear();
			 dic_path_sub_two->Clear();
		 }

		 //
private: System::Void lv_snap_reg_analysis_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_snap_reg_analysis->Items->Count == 0)
			 {
				 cms_snap_reg_analysis_clear->Enabled = false;
				 cms_snap_reg_analysis_explorer->Enabled = false;
			 }
			 else if(lv_snap_reg_analysis->SelectedItems->Count == 0)
			 {
				 cms_snap_reg_analysis_clear->Enabled = false;
				 cms_snap_reg_analysis_explorer->Enabled = false;
			 }
			 else
			 {
				 cms_snap_reg_analysis_clear->Enabled = true;
				 cms_snap_reg_analysis_explorer->Enabled = true;
			 }
		 }

		 //
private: System::Void lv_snap_reg_analysis_ColumnClick(System::Object^  sender, System::Windows::Forms::ColumnClickEventArgs^  e) {
			 if(e->Column == lv_item_curColumn)
			 {		 
				 if (lv_item_bAsc)
				 {
					 lv_item_bAsc = false;
				 }
				 else
				 {
					 lv_item_bAsc = true;
				 }

				 //字符串比较
				 lv_snap_reg_analysis->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);			 
			 }
			 else
			 {		
				 lv_item_bAsc = false;

				 //字符串比较
				 lv_snap_reg_analysis->ListViewItemSorter = gcnew ListViewItemComparer(e->Column,lv_item_bAsc,1,0);	

				 //记录当前
				 lv_item_curColumn = e->Column;
			 }
		 }

		 //
private: System::Void lv_snap_reg_analysis_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 if (e->Data->GetDataPresent(DataFormats::FileDrop))
			 {
				 e->Effect = DragDropEffects::Link;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //
private: System::Void lv_snap_reg_analysis_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 array<String^>^ fileNames = (array<String^>^)e->Data->GetData(DataFormats::FileDrop);

			 //
			 if (lv_snap_reg_analysis->Items->Count > 0)
			 {
				 lv_snap_reg_analysis->Items->Clear();
			 }

			 //只允许一次性托两个文件或两个以上的文件
			 if (fileNames->Length != 2)
			 {
				 return;
			 }

			 //
			 for each(String^ str_ in fileNames)
			 {
				 FileInfo^ fi_ = gcnew FileInfo(str_);

				 //
				 if (fi_->Attributes == FileAttributes::Directory || fi_->Extension->ToLower() != ".xml")
				 {
					 return;
				 }
			 }		 

			 //
			 lv_snap_reg_analysis_show(fileNames[0],fileNames[1]);
		 }

		 //
private: System::Void lv_snap_reg_analysis_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_snap_reg_analysis->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_snap_reg_analysis);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("导出失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 
		 }

		 //
private: System::Void cms_snap_reg_analysis_one_Click(System::Object^  sender, System::EventArgs^  e) {
			 OFD->Multiselect = false;
			 OFD->Filter = "xml files(*.xml)|*.xml";

			 if (OFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //OFD->FileName;
				 tp_snap_reg_analysis_str_one = OFD->FileName;

				 if (!String::IsNullOrEmpty(tp_snap_reg_analysis_str_two))
				 {
					 //
					 lv_snap_reg_analysis_show(tp_snap_reg_analysis_str_one,tp_snap_reg_analysis_str_two);

					 tp_snap_reg_analysis_str_one = String::Empty;
					 tp_snap_reg_analysis_str_two = String::Empty;
				 }
			 }
		 }

		 //
private: System::Void cms_snap_reg_analysis_two_Click(System::Object^  sender, System::EventArgs^  e) {
			 OFD->Multiselect = false;
			 OFD->Filter = "xml files(*.xml)|*.xml";

			 if (OFD->ShowDialog() == System::Windows::Forms::DialogResult::OK)
			 {
				 //OFD->FileName;
				 tp_snap_reg_analysis_str_two = OFD->FileName;

				 if (!String::IsNullOrEmpty(tp_snap_reg_analysis_str_one))
				 {
					 //
					 lv_snap_reg_analysis_show(tp_snap_reg_analysis_str_one,tp_snap_reg_analysis_str_two);

					 tp_snap_reg_analysis_str_one = String::Empty;
					 tp_snap_reg_analysis_str_two = String::Empty;
				 }
			 }
		 }

		 //
private: System::Void cms_snap_reg_analysis_clear_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_snap_reg_analysis->Items->Clear();
		 }

		 //
private: System::Void cms_snap_reg_analysis_explorer_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //导出
private: System::Void cms_snap_reg_analysis_export_Click(System::Object^  sender, System::EventArgs^  e){
			 //
			 common_net::common_getListViewData(lv_snap_reg_analysis);
		 }
#pragma endregion tp_snap_reg_analysis


		 //主面板索引改变事件
private: System::Void tc_main_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {
			 tsp_lbl_msg->Text = nullptr;

			 switch (tc_main->SelectedIndex)
			 {
				 //进程
			 case 0:
				 cms_process_refresh_Click(sender,e);
				 break;
				 //服务
			 case 1:
				 cms_service_refresh_Click(sender,e);
				 break;
				 //事件日志
			 case 2:
				 cms_eventlog_refresh_Click(sender,e);
				 break;
				 //驱动模块
			 case 3:
				 cms_sysmodule_refresh_Click(sender,e);
				 break;
				 //内核相关
			 case 4:
				 cms_kernel_ssdt_refresh_Click(sender,e);
				 break;
				 //应用层相关
			 case 5:
				 cms_app_msg_refresh_Click(sender,e);
				 break;
				 //网络连接
			 case 6:
				 cms_net_port_refresh_Click(sender,e);
				 break;
				 //文件
			 case 7:
				 lv_file_show();
				 break;
				 //注册表
			 case 8:
				 lv_reg_show();
				 break;
				 //窗体管理
			 case 9:
				 if(tp_process_bl_toWin)
				 {
					 tp_win_bl_isJmp = true;
					 tv_win_show2();
					 return;
				 }
				 //
				 tp_win_bl_isJmp = false;
				 cms_win_refresh_Click(sender,e);
				 break;
				 //启动项
			 case 10:
				 cms_run_refresh_Click(sender,e);
				 break;
			 }

			 //ListViewItem排序所需，记录当前列
			 lv_item_curColumn = -1; 
			 //表示降序还是升序
			 lv_item_bAsc = false; 
		 }

		 //“内核相关”面板索引改变事件
private: System::Void tc_kernel_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {
			 tsp_lbl_msg->Text = nullptr;

			 switch(tc_kernel->SelectedIndex)
			 {
				 //SSDT
			 case 0:
				 cms_kernel_ssdt_refresh_Click(sender,e);
				 break;
				 //Shadow SSDT
			 case 1:
				 cms_kernel_shadow_refresh_Click(sender,e);
				 break;
				 //fsd
			 case 2:
				 break;
				 //system callback
			 case 3:
				 cms_kernel_callback_refresh_Click(sender,e);
				 break;
				 //filter driver
			 case 4:
				 cms_kernel_filter_refresh_Click(sender,e);
				 break;;
			 }

			 //ListViewItem排序所需，记录当前列
			 lv_item_curColumn = -1; 
			 //表示降序还是升序
			 lv_item_bAsc = false; 
		 }

		 //“应用层相关”
private: System::Void tc_app_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {
			 tsp_lbl_msg->Text = nullptr;

			 switch (tc_app->SelectedIndex)
			 {
				 //
			 case 0:
				 cms_app_msg_refresh_Click(sender,e);
				 break;
				 //
			 case 1:
				 cms_app_hook2_refresh_Click(sender,e);
				 break;
			 }
		 }

		 //“网络连接”面板索引改变事件
private: System::Void tc_net_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {
			 tsp_lbl_msg->Text = nullptr;

			 switch (tc_net->SelectedIndex)
			 {
				 //端口
			 case 0:
				 cms_net_port_refresh_Click(sender,e);
				 break;
				 //IE插件
			 case 1:
				 cms_net_iePlugin_refresh_Click(sender,e);
				 break;
				 //IE右键菜单
			 case 2:
				 cms_net_ieMenu_refresh_Click(sender,e);
				 break;
				 //LSP
			 case 3:
				 cms_net_lsp_refresh_Click(sender,e);
				 break;
				 //host
			 case 4:
				 cms_net_host_refresh_Click(sender,e);
				 break;
			 }

			 //ListViewItem排序所需，记录当前列
			 lv_item_curColumn = -1; 
			 //表示降序还是升序
			 lv_item_bAsc = false; 
		 }

		 //“系统快照”面板索引改变事件
private: System::Void tc_snap_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {
			 tsp_lbl_msg->Text = nullptr;

			 //
			 switch(tc_snap->SelectedIndex)
			 {
				 //文件快照
			 case 0:
				 break;
			 case 1:
				 break;
				 //reg snap
			 case 2:
				 {
					 //
					 if (tp_reg_bl_toSnap)
					 {
						 //
						 tv_snap_reg_show();
						 //
						 lv_snap_reg_show(tp_reg_str_snapKeyDir);
						 //
						 tp_reg_bl_toSnap = false;
						 //
						 return;
					 }
					 //
					 tv_snap_reg_show();
				 }		 
				 break;
			 case 3:
				 break;
			 }

			 //ListViewItem排序所需，记录当前列
			 lv_item_curColumn = -1; 
			 //表示降序还是升序
			 lv_item_bAsc = false; 
		 }

		 //“其他辅助”面板索引改变事件
private: System::Void tc_other_SelectedIndexChanged(System::Object^  sender, System::EventArgs^  e) {
			 tsp_lbl_msg->Text = nullptr;

			 switch(tc_other->SelectedIndex)
			 {
				 //MD5
			 case 1:
				 {
					 if (tp_file_bl_toMD5)
					 {
						 lv_other_md5_enumFiles(tp_file_str_md5Dir);
						 //重新赋值
						 tp_file_bl_toMD5 = false;
					 }
				 }
				 break;
				 //右键菜单
			 case 2:
				 cms_other_menu_refresh_Click(sender,e);
				 break;
				 //proxy
			 case 3:
				 cms_other_proxy_refresh_Click(sender,e);
				 break;
				 //sigverif_check
			 case 4:
				 {
					 if (tp_file_bl_toSigverif)
					 {
						 lv_other_sigverif_enumFiles(tp_file_str_sigverifDir);
						 //重新赋值
						 tp_file_bl_toSigverif = false;
					 }
				 }
				 break;
				 //mbr
			 case 5:
				 cms_other_mbr_refresh_Click(sender,e);
				 break;
				 //share
			 case 6:
				 cms_other_share_refresh_Click(sender,e);
				 break;
				 //user
			 case 7:
				 cms_other_user_refresh_Click(sender,e);
				 break;
				 //垃圾清理
			 case 8:
				 {
					 tp_other_clean_isClean = true;
					 tv_other_clean->Nodes[0]->Expand();			 
					 lbl_other_clean_recommend_Click(sender,e);
				 }
				 break;
				 //痕迹清理
			 case 9:
				 {
					 tp_other_clean_isClean = false;
					 tv_other_trace->Nodes[0]->Expand();			 
					 lbl_other_trace_recommend_Click(sender,e);
				 }
				 break;
			 }

			 //ListViewItem排序所需，记录当前列
			 lv_item_curColumn = -1; 
			 //表示降序还是升序
			 lv_item_bAsc = false; 
		 }
		 

		 //
private: System::Void cms_other_table_before_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //
private: System::Void cms_other_table_forward_Click(System::Object^  sender, System::EventArgs^  e) {

		 }


		 //拖放保存
private: System::Void lv_kernel_hook_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_kernel_hook->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_kernel_hook);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //
private: System::Void cms_tv_reg_hive_Click(System::Object^  sender, System::EventArgs^  e) {
			 if (cms_tv_reg_hive->Checked)
			 {
				 cms_tv_reg_hive->Checked = false;
			 }
			 else
			 {
				 cms_tv_reg_hive->Checked = true;
			 }
		 }

		 //
private: System::Void cms_tv_file_disk_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 if (cms_tv_file_disk->Checked)
			 {
				 cms_tv_file_disk->Checked = false;
			 }
			 else
			 {
				 cms_tv_file_disk->Checked = true;
			 }
		 }



		 //
private: System::Void lv_app_hook_DragDrop(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 //
			 String^ str_ = (String^)e->Data->GetData(DataFormats::Text);
			 //
			 lv_app_hook2_show(int::Parse(str_));
		 }

		 //
private: System::Void lv_app_hook_DragEnter(System::Object^  sender, System::Windows::Forms::DragEventArgs^  e) {
			 //
			 if (e->Data->GetDataPresent(DataFormats::Text))
			 {
				 e->Effect = DragDropEffects::Copy;
			 }
			 else
			 {
				 e->Effect = DragDropEffects::None;
			 }
		 }

		 //拖放保存
private: System::Void lv_app_hook_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 if (e->Button == System::Windows::Forms::MouseButtons::Left)
			 {		 
				 if (lv_app_hook->Items->Count == 0)
				 {
					 return;
				 }

				 //获得保存的路径
				 String^ str_ = common_net::common_dragDropToSave(lv_app_hook);

				 //
				 if (str_ == nullptr)
				 {
					 MessageBox::Show("保存失败！");
					 return;
				 }

				 //
				 DataObject^ do_ = gcnew DataObject(DataFormats::FileDrop, gcnew array<String^>{ str_ });

				 //
				 DoDragDrop(do_, DragDropEffects::Copy);

				 File::Delete(str_);
			 } 			 
		 }

		 //
private: System::Void lv_app_hook_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_app_hook->Items->Count == 0)
			 {
				 cms_app_hook_recover->Enabled = false;
				 cms_app_hook_recoverAll->Enabled = false;
			 }
			 else if(lv_app_hook->SelectedItems->Count == 0)
			 {
				 cms_app_hook_recover->Enabled = false;
				 cms_app_hook_recoverAll->Enabled = false;
			 }
			 else
			 {
				 cms_app_hook_recover->Enabled = true;
				 cms_app_hook_recoverAll->Enabled = true;
			 }
		 }

		 //
private: System::Void cms_app_hook_refresh_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //
private: System::Void cms_app_hook_recover_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //
private: System::Void cms_app_hook_recoverAll_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //
private: System::Void cms_app_hook_export_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 common_net::common_getListViewData(lv_app_hook);
		 }

		 //
private: System::Void lv_app_hook2_import(HANDLE hProcess,HMODULE hModule,LPTSTR lpName,PVOID lpBase){
			 //
			 PBYTE pBase = (PBYTE)hModule;

			 IMAGE_DOS_HEADER image_dos_header;
			 ReadProcessMemory(hProcess,pBase,&image_dos_header,sizeof(IMAGE_DOS_HEADER),NULL);

			 IMAGE_OPTIONAL_HEADER image_optional_header;
			 ReadProcessMemory(hProcess,pBase + image_dos_header.e_lfanew + 24,&image_optional_header,sizeof(IMAGE_OPTIONAL_HEADER),NULL);

			 if (image_optional_header.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress == 0)
			 {
				 return;
			 }

			 IMAGE_IMPORT_DESCRIPTOR image_import_descriptor;
			 DWORD dwIndex = 0;

			 do 
			 {
				 ReadProcessMemory(hProcess,pBase + image_optional_header.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress + \
					 sizeof(IMAGE_IMPORT_DESCRIPTOR)*dwIndex,&image_import_descriptor,sizeof(IMAGE_IMPORT_DESCRIPTOR),NULL);

				 if (image_import_descriptor.Name == 0)
				 {
					 break;
				 }				

				 char szDllName[MAX_PATH] = { 0 };
				 //
				 ReadProcessMemory(hProcess,pBase + image_import_descriptor.Name,szDllName,MAX_PATH,NULL);

				 DWORD dwIndex2 = 0;
				 IMAGE_THUNK_DATA image_thunk_data;

				 do 
				 {				 
					 ReadProcessMemory(hProcess,pBase + image_import_descriptor.OriginalFirstThunk + sizeof(IMAGE_THUNK_DATA)*dwIndex2,
						 &image_thunk_data,sizeof(IMAGE_THUNK_DATA), NULL);

					 if (image_thunk_data.u1.AddressOfData == 0)
					 {
						 break;
					 }

					 WORD wOrdinal = 0;
					 ReadProcessMemory(hProcess,pBase + image_thunk_data.u1.AddressOfData,&wOrdinal,sizeof(WORD),NULL);

					 char szFuncName[MAX_PATH] = { 0 };
					 ReadProcessMemory(hProcess,pBase + image_thunk_data.u1.AddressOfData + 2, szFuncName, MAX_PATH,NULL);

					 DWORD dwFuncAddr = 0;
					 ReadProcessMemory(hProcess,pBase + image_import_descriptor.FirstThunk + 4*dwIndex2,&dwFuncAddr,sizeof(DWORD),NULL);

					 //
					 DWORD dwOriFuncAddr = pe_getImportOriFuncAddressByOrdinal(lpBase,szDllName,dwIndex2);

					 ListViewItem^ item_ = gcnew ListViewItem((gcnew String(lpName)) + "->" + (gcnew String(szDllName)) + ":" + (gcnew String(szFuncName)));
					 item_->SubItems->AddRange(gcnew array<String^>{ "0x" + dwFuncAddr.ToString("X8") + "->" + "0x" + (dwOriFuncAddr).ToString("X8"),"IAT HOOK",wOrdinal.ToString()});
					 lv_app_hook->Items->Add(item_);

					 dwIndex2++;
				 } while (image_thunk_data.u1.AddressOfData);

				 dwIndex++;
			 } while (image_import_descriptor.Name);
		 }					

		 //
private: System::Void lv_app_hook2_export(HANDLE hProcess,HMODULE hModule,LPTSTR lpName,PVOID lpBase){
			 //
			 PBYTE pBase = (PBYTE)hModule;
			 LONG lE_lfanew;

			 char szDllName[64] = { 0 };

			 DWORD dwVirtualAddress,dwName,dwNumberOfNames;

			 //获得IMAGE_NT_HEADERS 块地址
			 BOOL bRet = ReadProcessMemory(hProcess,&(((PIMAGE_DOS_HEADER)pBase)->e_lfanew),&lE_lfanew,sizeof(LONG),NULL);
			 if (!bRet){ return; }

			 //获得可选头部地址
			 PIMAGE_OPTIONAL_HEADER pOptional = (PIMAGE_OPTIONAL_HEADER)(pBase + lE_lfanew + 4 + sizeof(IMAGE_FILE_HEADER));

			 //获得导出表地址
			 bRet = ReadProcessMemory(hProcess,&(pOptional->DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress),&dwVirtualAddress,sizeof(DWORD),NULL);
			 if (!bRet){ return; }
			 //
			 PIMAGE_EXPORT_DIRECTORY pImage_export_directory =	(PIMAGE_EXPORT_DIRECTORY) (pBase + dwVirtualAddress);	 

			 bRet = ReadProcessMemory(hProcess,&(pImage_export_directory->Name),&dwName,sizeof(DWORD),NULL);
			 if (!bRet){ return; }
			 bRet = ReadProcessMemory(hProcess,pBase + dwName,szDllName,sizeof(szDllName),NULL);	 
			 if (!bRet){ return; }
			 bRet = ReadProcessMemory(hProcess,&(pImage_export_directory->NumberOfNames),&dwNumberOfNames,sizeof(DWORD),NULL);
			 if (!bRet){ return; }

			 for (int i = 0;i < dwNumberOfNames;i++)
			 {
				 char szFunc[MAX_PATH] = { 0 };

				 DWORD dwFuncName,dwOrdinal,dwFuncAddr;
				 WORD wOrdinal;		 	

				 bRet = ReadProcessMemory(hProcess,&(pImage_export_directory->AddressOfNames),&dwFuncName,sizeof(DWORD),NULL);
				 if (!bRet){ return; }
				 bRet = ReadProcessMemory(hProcess,pBase + dwFuncName + i*4,&dwFuncName,sizeof(DWORD),NULL);
				 if (!bRet){ return; }
				 bRet = ReadProcessMemory(hProcess,pBase + dwFuncName,szFunc,sizeof(szFunc),NULL);
				 if (!bRet){ return; }
				 bRet = ReadProcessMemory(hProcess,&(pImage_export_directory->AddressOfNameOrdinals),&dwOrdinal,sizeof(DWORD),NULL);
				 if (!bRet){ return; }
				 bRet = ReadProcessMemory(hProcess,pBase + dwOrdinal + i*2,&wOrdinal,sizeof(WORD),NULL);
				 if (!bRet){ return; }
				 bRet = ReadProcessMemory(hProcess,&(pImage_export_directory->AddressOfFunctions),&dwFuncAddr,sizeof(DWORD),NULL);
				 if (!bRet){ return; }
				 bRet = ReadProcessMemory(hProcess,pBase + dwFuncAddr + wOrdinal*4,&dwFuncAddr,sizeof(DWORD),NULL);
				 if (!bRet){ return; }

				 //获得原始地址
				 DWORD dwOriFuncAddr = pe_getExportOriFuncAddressByOrdinal(lpBase,wOrdinal);
				 //
				 if (dwOriFuncAddr == -1)
				 {
					 return;
				 }
				 //
				 if ((DWORD)pBase + dwOriFuncAddr != (DWORD)pBase + dwFuncAddr)
				 {
					 //
					 ListViewItem^ item_ = gcnew ListViewItem((gcnew String(lpName)) + "->" + (gcnew String(szDllName)) + ":" + (gcnew String(szFunc)));
					 item_->SubItems->AddRange(gcnew array<String^>{ "0x" + ((DWORD)pBase + dwFuncAddr).ToString("X8") + "->" +  "0x" + (dwOriFuncAddr).ToString("X8"),"EAT HOOK"});
					 lv_app_hook->Items->Add(item_);
				 }			
			 }
		 }

		 //
private: System::Void lv_app_hook2_show(){
			 //
			 array<Process^>^ ps = Process::GetProcesses(Environment::MachineName);

			 for each (Process^ p in ps)
			 {
				 //
				 ListViewItem^ item_ = gcnew ListViewItem(p->Id.ToString() + "[" + common_net::common_getProcessName(p->Id) + "]");
				 //
				 item_->Tag = p->Id;
				 //
				 lv_app_hook2->Items->Add(item_);
			 }
		 }

		 //
private: System::Void lv_app_hook2_show(ULONG ulPID){
			 //
			 MODULEENTRY32	me32;
			 me32.dwSize = sizeof(MODULEENTRY32);

			 //
			 HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS,FALSE,ulPID);

			 if (!hProcess)
			 {
				 return;
			 }

			 //
			 HANDLE hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, ulPID);

			 if (!hModuleSnap)
			 {
				 return;
			 }

			 bRet = Module32First(hModuleSnap, &me32);

			 while(bRet)
			 {
				 //
				 tsp_lbl_msg->Text = "--->>>[" + gcnew String(me32.szExePath) + "]";
				 //
				 PVOID lpBase = pe_getMapViewOfFile(me32.szExePath);
				 //
				 if (lpBase)
				 {
					 lv_app_hook2_import(hProcess,me32.hModule,me32.szModule,lpBase);
					 lv_app_hook2_export(hProcess,me32.hModule,me32.szModule,lpBase);
					 //
					 UnmapViewOfFile(lpBase);
				 }
				 		 
				 bRet = Module32Next(hModuleSnap, &me32);
			 }

			 CloseHandle(hModuleSnap);
		 }

		 //
private: System::Void lv_app_hook2_ItemDrag(System::Object^  sender, System::Windows::Forms::ItemDragEventArgs^  e) {
			 //
			 String^ str_ = ((ListViewItem^)e->Item)->Tag->ToString();
			 //开始进行"Drag"操作
			 DoDragDrop(str_, DragDropEffects::Copy);
		 }

		 //
private: System::Void lv_app_hook2_MouseUp(System::Object^  sender, System::Windows::Forms::MouseEventArgs^  e) {
			 if (lv_app_hook2->Items->Count == 0)
			 {
				 cms_app_hook2_check->Enabled = false;
				 cms_app_hook2_checkAll->Enabled = false;
			 }
			 else if (lv_app_hook2->SelectedItems->Count == 0)
			 {
				 cms_app_hook2_check->Enabled = false;
				 cms_app_hook2_checkAll->Enabled = true;
			 }
			 else
			 {
				 cms_app_hook2_check->Enabled = true;
				 cms_app_hook2_checkAll->Enabled = true;
			 }
		 }

		 //
private: System::Void cms_app_hook2_refresh_Click(System::Object^  sender, System::EventArgs^  e) {
			 //
			 lv_app_hook2->Items->Clear();
			 //
			 lv_app_hook2_show();
		 }

		 //
private: System::Void cms_app_hook2_check_Click(System::Object^  sender, System::EventArgs^  e) {

		 }

		 //
private: System::Void cms_app_hook2_checkAll_Click(System::Object^  sender, System::EventArgs^  e) {

		 }









};
}

